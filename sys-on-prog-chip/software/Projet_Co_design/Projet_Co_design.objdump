
Projet_Co_design.elf:     file format elf32-littlenios2
Projet_Co_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005524 memsz 0x00005524 flags r-x
    LOAD off    0x00006544 vaddr 0x00045544 paddr 0x00046fb0 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008a1c vaddr 0x00048a1c paddr 0x00048a1c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005338  000401bc  000401bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000454f4  000454f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00045544  00046fb0  00006544  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00048a1c  00048a1c  00008a1c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00048b6c  00048b6c  00007fb0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000930  00000000  00000000  00007fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015e51  00000000  00000000  00008908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005d01  00000000  00000000  0001e759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000065ef  00000000  00000000  0002445a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000147c  00000000  00000000  0002aa4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021ef  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000044ae  00000000  00000000  0002e0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00032568  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00032578  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00034d1b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00034d25  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00034d26  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00034d27  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00034d2b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00034d2f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00034d33  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00034d3e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00034d49  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00034d54  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  00034d5f  2**0
                  CONTENTS, READONLY
 29 .jdi          00003e1c  00000000  00000000  00034d8f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000502d3  00000000  00000000  00038bab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401bc l    d  .text	00000000 .text
000454f4 l    d  .rodata	00000000 .rodata
00045544 l    d  .rwdata	00000000 .rwdata
00048a1c l    d  .bss	00000000 .bss
00048b6c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Projet_Co_design_bsp//obj/HAL/src/crt0.o
000401f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00045544 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00041d98 l     F .text	00000008 __fp_lock
00041da0 l     F .text	00000008 __fp_unlock
00041db4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00042e38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00042f60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00042f8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043094 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043190 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043274 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043458 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00046fa0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000436dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004382c l     F .text	00000038 alt_dev_reg
00045f18 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043b08 l     F .text	00000204 altera_avalon_jtag_uart_irq
00043d0c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044488 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044920 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044a78 l     F .text	00000050 alt_get_errno
00044ac8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00042d04 g     F .text	00000054 _isatty_r
000433a0 g     F .text	00000078 alt_main
000402f0 g     F .text	000000b8 _puts_r
00048a6c g     O .bss	00000100 alt_irq
00042d58 g     F .text	0000005c _lseek_r
00046fb0 g       *ABS*	00000000 __flash_rwdata_start
00048b6c g       *ABS*	00000000 __alt_heap_start
00042a84 g     F .text	0000005c __sseek
000420fc g     F .text	00000010 __sinit
00041f54 g     F .text	00000078 __sfmoreglue
00043438 g     F .text	00000020 __malloc_unlock
000412c0 g     F .text	0000015c memmove
000420e4 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042cac g     F .text	00000058 _fstat_r
00048a28 g     O .bss	00000004 errno
00042a00 g     F .text	00000008 __seofread
00048a30 g     O .bss	00000004 alt_argv
0004ef78 g       *ABS*	00000000 _gp
00045d98 g     O .rwdata	00000180 alt_fd_list
00044ed8 g     F .text	00000090 alt_find_dev
00041188 g     F .text	00000138 memcpy
00041da8 g     F .text	0000000c _cleanup_r
00044a00 g     F .text	00000078 alt_io_redirect
000454f4 g       *ABS*	00000000 __DTOR_END__
000403a8 g     F .text	00000014 puts
00043f08 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000430e4 g     F .text	000000ac isatty
00048a24 g     O .bss	00000004 __malloc_top_pad
00040454 g     F .text	000004a4 __sfvwrite_r
000419bc g     F .text	00000054 _sbrk_r
00042db4 g     F .text	0000005c _read_r
00046f98 g     O .rwdata	00000004 alt_max_fd
00042b98 g     F .text	00000100 _fclose_r
00041d68 g     F .text	00000030 fflush
00048a20 g     O .bss	00000004 __malloc_max_sbrked_mem
000432c4 g     F .text	000000dc lseek
00046f78 g     O .rwdata	00000004 _global_impure_ptr
000401f8 g     F .text	00000034 set_led
0004141c g     F .text	000005a0 _realloc_r
00048b6c g       *ABS*	00000000 __bss_end
00044830 g     F .text	000000f0 alt_iic_isr_register
00044db4 g     F .text	00000104 alt_tick
0004211c g     F .text	00000018 __fp_lock_all
000447e4 g     F .text	0000004c alt_ic_irq_enabled
00044d1c g     F .text	00000098 alt_alarm_stop
00048a38 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000d0 alt_irq_handler
00045d70 g     O .rwdata	00000028 alt_dev_null
0004446c g     F .text	0000001c alt_dcache_flush_all
00046fb0 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00046f90 g     O .rwdata	00000008 alt_dev_list
0004372c g     F .text	00000100 write
00045544 g       *ABS*	00000000 __ram_rodata_end
00042fdc g     F .text	000000b8 fstat
00048b6c g       *ABS*	00000000 end
00043a44 g     F .text	000000c4 altera_avalon_jtag_uart_init
000454f4 g       *ABS*	00000000 __CTOR_LIST__
00070d40 g       *ABS*	00000000 __alt_stack_pointer
00044114 g     F .text	00000218 altera_avalon_jtag_uart_write
0004210c g     F .text	00000004 __sfp_lock_acquire
000410a0 g     F .text	000000e8 memchr
00042270 g     F .text	000002f0 _free_r
0004532c g     F .text	00000194 __call_exitprocs
00046f80 g     O .rwdata	00000004 __malloc_sbrk_base
000401bc g     F .text	0000003c _start
00048a3c g     O .bss	00000004 _alt_tick_rate
00048a40 g     O .bss	00000004 _alt_nticks
000434a8 g     F .text	00000104 read
00043898 g     F .text	00000048 alt_sys_init
00045218 g     F .text	00000114 __register_exitproc
00043db4 g     F .text	00000068 altera_avalon_jtag_uart_close
00042e10 g     F .text	00000028 .hidden __mulsi3
00045544 g       *ABS*	00000000 __ram_rwdata_start
000454f4 g       *ABS*	00000000 __ram_rodata_start
00048a44 g     O .bss	00000028 __malloc_current_mallinfo
000438e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004507c g     F .text	000000d4 alt_get_fd
00042b44 g     F .text	00000054 _close_r
0004519c g     F .text	0000007c memcmp
000439a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00048b6c g       *ABS*	00000000 __alt_stack_base
000439f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041a10 g     F .text	00000130 __swsetup_r
00041fcc g     F .text	00000118 __sfp
00045968 g     O .rwdata	00000408 __malloc_av_
00042118 g     F .text	00000004 __sinit_lock_release
000429ac g     F .text	00000054 __sread
00044f68 g     F .text	00000114 alt_find_file
000444d8 g     F .text	000000a4 alt_dev_llist_insert
00043418 g     F .text	00000020 __malloc_lock
0004362c g     F .text	000000b0 sbrk
00041b40 g     F .text	00000228 _fflush_r
00048a1c g       *ABS*	00000000 __bss_start
00042888 g     F .text	00000124 memset
0004022c g     F .text	000000c4 main
00048a34 g     O .bss	00000004 alt_envp
00048a1c g     O .bss	00000004 __malloc_max_total_mem
00043940 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042ae0 g     F .text	00000008 __sclose
00070d40 g       *ABS*	00000000 __alt_heap_limit
00042c98 g     F .text	00000014 fclose
000408f8 g     F .text	000007a8 _malloc_r
00046f9c g     O .rwdata	00000004 alt_errno
00042560 g     F .text	000000b8 _fwalk
0004214c g     F .text	00000124 _malloc_trim_r
000454f4 g       *ABS*	00000000 __CTOR_END__
000454f4 g       *ABS*	00000000 __flash_rodata_start
000454f4 g       *ABS*	00000000 __DTOR_LIST__
00043864 g     F .text	00000034 alt_irq_init
000435ac g     F .text	00000080 alt_release_fd
00045150 g     F .text	00000014 atexit
00042ae8 g     F .text	0000005c _write_r
00046f7c g     O .rwdata	00000004 _impure_ptr
00048a2c g     O .bss	00000004 alt_argc
000445d8 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00042134 g     F .text	00000018 __fp_unlock_all
00046f88 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044650 g     F .text	00000050 alt_ic_isr_register
00046fb0 g       *ABS*	00000000 _edata
00048b6c g       *ABS*	00000000 _end
000401bc g       *ABS*	00000000 __ram_exceptions_end
00043e1c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00044740 g     F .text	000000a4 alt_ic_irq_disable
00042a08 g     F .text	0000007c __swrite
00046f84 g     O .rwdata	00000004 __malloc_trim_threshold
00044eb8 g     F .text	00000020 altera_nios2_qsys_irq_init
00045164 g     F .text	00000038 exit
00042618 g     F .text	000000b8 _fwalk_reent
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042110 g     F .text	00000004 __sfp_lock_release
000454c0 g     F .text	00000034 _exit
0004432c g     F .text	00000140 alt_alarm_start
000426d0 g     F .text	000001b8 __smakebuf_r
000403bc g     F .text	00000098 strlen
00044bbc g     F .text	00000160 open
00044634 g     F .text	0000001c alt_icache_flush_all
00046fa4 g     O .rwdata	00000004 alt_priority_mask
000446a0 g     F .text	000000a0 alt_ic_irq_enable
00046fa8 g     O .rwdata	00000008 alt_alarm_list
0004457c g     F .text	0000005c _do_ctors
00042e88 g     F .text	000000d8 close
000431f4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00042114 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406f14 	ori	at,at,444
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00800174 	movhi	r2,5
   40130:	10a29b04 	addi	r2,r2,-30100
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	00800174 	movhi	r2,5
   40148:	10a29b04 	addi	r2,r2,-30100
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	1105883a 	add	r2,r2,r4
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffcf3dc>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffcf3d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	e037883a 	mov	sp,fp
   401ac:	dfc00117 	ldw	ra,4(sp)
   401b0:	df000017 	ldw	fp,0(sp)
   401b4:	dec00204 	addi	sp,sp,8
   401b8:	f800283a 	ret

Disassembly of section .text:

000401bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401bc:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401c0:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   401c4:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401c8:	d6bbde14 	ori	gp,gp,61304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401cc:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401d0:	10a28714 	ori	r2,r2,35356

    movhi r3, %hi(__bss_end)
   401d4:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401d8:	18e2db14 	ori	r3,r3,35692

    beq r2, r3, 1f
   401dc:	10c00326 	beq	r2,r3,401ec <_start+0x30>

0:
    stw zero, (r2)
   401e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e8:	10fffd36 	bltu	r2,r3,401e0 <__alt_data_end+0xfffcf4a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401ec:	00431f40 	call	431f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f0:	00433a00 	call	433a0 <alt_main>

000401f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f4:	003fff06 	br	401f4 <__alt_data_end+0xfffcf4b4>

000401f8 <set_led>:
#include "io.h"
#include <stdio.h>
#include "system.h"

void set_led(unsigned char led_pattern){
   401f8:	defffe04 	addi	sp,sp,-8
   401fc:	df000115 	stw	fp,4(sp)
   40200:	df000104 	addi	fp,sp,4
   40204:	2005883a 	mov	r2,r4
   40208:	e0bfff05 	stb	r2,-4(fp)
	IOWR(LED_BASE,0, led_pattern);
   4020c:	e0ffff03 	ldbu	r3,-4(fp)
   40210:	00800234 	movhi	r2,8
   40214:	10841404 	addi	r2,r2,4176
   40218:	10c00035 	stwio	r3,0(r2)
}
   4021c:	e037883a 	mov	sp,fp
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00104 	addi	sp,sp,4
   40228:	f800283a 	ret

0004022c <main>:

int main(){
   4022c:	defffd04 	addi	sp,sp,-12
   40230:	dfc00215 	stw	ra,8(sp)
   40234:	df000115 	stw	fp,4(sp)
   40238:	df000104 	addi	fp,sp,4
	unsigned char led_pattern = 0x00;
   4023c:	e03fff05 	stb	zero,-4(fp)
	printf("PROJET_Co_Design \n");
   40240:	01000134 	movhi	r4,4
   40244:	21153d04 	addi	r4,r4,21748
   40248:	00403a80 	call	403a8 <puts>
	while(1){
		if(IORD(SWITCHER_BASE, 0)==1)
   4024c:	00800234 	movhi	r2,8
   40250:	10841004 	addi	r2,r2,4160
   40254:	10800037 	ldwio	r2,0(r2)
   40258:	10800058 	cmpnei	r2,r2,1
   4025c:	1000051e 	bne	r2,zero,40274 <main+0x48>
		{
			IOWR(LED_BASE, 0, 0x55);
   40260:	00c01544 	movi	r3,85
   40264:	00800234 	movhi	r2,8
   40268:	10841404 	addi	r2,r2,4176
   4026c:	10c00035 	stwio	r3,0(r2)
   40270:	00000e06 	br	402ac <main+0x80>
		}else if(IORD(SWITCHER_BASE, 0)==2)
   40274:	00800234 	movhi	r2,8
   40278:	10841004 	addi	r2,r2,4160
   4027c:	10800037 	ldwio	r2,0(r2)
   40280:	10800098 	cmpnei	r2,r2,2
   40284:	1000051e 	bne	r2,zero,4029c <main+0x70>
		{
			IOWR(LED_BASE, 0, 0xFF);
   40288:	00c03fc4 	movi	r3,255
   4028c:	00800234 	movhi	r2,8
   40290:	10841404 	addi	r2,r2,4176
   40294:	10c00035 	stwio	r3,0(r2)
   40298:	00000406 	br	402ac <main+0x80>
		} else
		{
			IOWR(LED_BASE, 0, 0x00);
   4029c:	0007883a 	mov	r3,zero
   402a0:	00800234 	movhi	r2,8
   402a4:	10841404 	addi	r2,r2,4176
   402a8:	10c00035 	stwio	r3,0(r2)
		}

		IOWR(SEVEN_SEG_1_BASE,0,0xFF);
   402ac:	00c03fc4 	movi	r3,255
   402b0:	00800234 	movhi	r2,8
   402b4:	10840c04 	addi	r2,r2,4144
   402b8:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_2_BASE,0,0xFF);
   402bc:	00c03fc4 	movi	r3,255
   402c0:	00800234 	movhi	r2,8
   402c4:	10840004 	addi	r2,r2,4096
   402c8:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_3_BASE,0,0xFF);
   402cc:	00c03fc4 	movi	r3,255
   402d0:	00800234 	movhi	r2,8
   402d4:	10840404 	addi	r2,r2,4112
   402d8:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_4_BASE,0,0xFF);
   402dc:	00c03fc4 	movi	r3,255
   402e0:	00800234 	movhi	r2,8
   402e4:	10840804 	addi	r2,r2,4128
   402e8:	10c00035 	stwio	r3,0(r2)

		//set_led(led_pattern);
	}
   402ec:	003fd706 	br	4024c <__alt_data_end+0xfffcf50c>

000402f0 <_puts_r>:
   402f0:	defff604 	addi	sp,sp,-40
   402f4:	dc000715 	stw	r16,28(sp)
   402f8:	2021883a 	mov	r16,r4
   402fc:	2809883a 	mov	r4,r5
   40300:	dc400815 	stw	r17,32(sp)
   40304:	dfc00915 	stw	ra,36(sp)
   40308:	2823883a 	mov	r17,r5
   4030c:	00403bc0 	call	403bc <strlen>
   40310:	00c00134 	movhi	r3,4
   40314:	18dbdf04 	addi	r3,r3,28540
   40318:	18c00017 	ldw	r3,0(r3)
   4031c:	11000044 	addi	r4,r2,1
   40320:	d8800115 	stw	r2,4(sp)
   40324:	18c00217 	ldw	r3,8(r3)
   40328:	01400134 	movhi	r5,4
   4032c:	29554204 	addi	r5,r5,21768
   40330:	1880030b 	ldhu	r2,12(r3)
   40334:	d9400215 	stw	r5,8(sp)
   40338:	d9000615 	stw	r4,24(sp)
   4033c:	01400044 	movi	r5,1
   40340:	01000084 	movi	r4,2
   40344:	d9000515 	stw	r4,20(sp)
   40348:	dc400015 	stw	r17,0(sp)
   4034c:	d9400315 	stw	r5,12(sp)
   40350:	dec00415 	stw	sp,16(sp)
   40354:	1108000c 	andi	r4,r2,8192
   40358:	2000061e 	bne	r4,zero,40374 <_puts_r+0x84>
   4035c:	19401917 	ldw	r5,100(r3)
   40360:	0137ffc4 	movi	r4,-8193
   40364:	10880014 	ori	r2,r2,8192
   40368:	2908703a 	and	r4,r5,r4
   4036c:	1880030d 	sth	r2,12(r3)
   40370:	19001915 	stw	r4,100(r3)
   40374:	81400217 	ldw	r5,8(r16)
   40378:	8009883a 	mov	r4,r16
   4037c:	d9800404 	addi	r6,sp,16
   40380:	00404540 	call	40454 <__sfvwrite_r>
   40384:	1000061e 	bne	r2,zero,403a0 <_puts_r+0xb0>
   40388:	00800284 	movi	r2,10
   4038c:	dfc00917 	ldw	ra,36(sp)
   40390:	dc400817 	ldw	r17,32(sp)
   40394:	dc000717 	ldw	r16,28(sp)
   40398:	dec00a04 	addi	sp,sp,40
   4039c:	f800283a 	ret
   403a0:	00bfffc4 	movi	r2,-1
   403a4:	003ff906 	br	4038c <__alt_data_end+0xfffcf64c>

000403a8 <puts>:
   403a8:	00800134 	movhi	r2,4
   403ac:	109bdf04 	addi	r2,r2,28540
   403b0:	200b883a 	mov	r5,r4
   403b4:	11000017 	ldw	r4,0(r2)
   403b8:	00402f01 	jmpi	402f0 <_puts_r>

000403bc <strlen>:
   403bc:	208000cc 	andi	r2,r4,3
   403c0:	10002026 	beq	r2,zero,40444 <strlen+0x88>
   403c4:	20800007 	ldb	r2,0(r4)
   403c8:	10002026 	beq	r2,zero,4044c <strlen+0x90>
   403cc:	2005883a 	mov	r2,r4
   403d0:	00000206 	br	403dc <strlen+0x20>
   403d4:	10c00007 	ldb	r3,0(r2)
   403d8:	18001826 	beq	r3,zero,4043c <strlen+0x80>
   403dc:	10800044 	addi	r2,r2,1
   403e0:	10c000cc 	andi	r3,r2,3
   403e4:	183ffb1e 	bne	r3,zero,403d4 <__alt_data_end+0xfffcf694>
   403e8:	10c00017 	ldw	r3,0(r2)
   403ec:	01ffbff4 	movhi	r7,65279
   403f0:	39ffbfc4 	addi	r7,r7,-257
   403f4:	00ca303a 	nor	r5,zero,r3
   403f8:	01a02074 	movhi	r6,32897
   403fc:	19c7883a 	add	r3,r3,r7
   40400:	31a02004 	addi	r6,r6,-32640
   40404:	1946703a 	and	r3,r3,r5
   40408:	1986703a 	and	r3,r3,r6
   4040c:	1800091e 	bne	r3,zero,40434 <strlen+0x78>
   40410:	10800104 	addi	r2,r2,4
   40414:	10c00017 	ldw	r3,0(r2)
   40418:	19cb883a 	add	r5,r3,r7
   4041c:	00c6303a 	nor	r3,zero,r3
   40420:	28c6703a 	and	r3,r5,r3
   40424:	1986703a 	and	r3,r3,r6
   40428:	183ff926 	beq	r3,zero,40410 <__alt_data_end+0xfffcf6d0>
   4042c:	00000106 	br	40434 <strlen+0x78>
   40430:	10800044 	addi	r2,r2,1
   40434:	10c00007 	ldb	r3,0(r2)
   40438:	183ffd1e 	bne	r3,zero,40430 <__alt_data_end+0xfffcf6f0>
   4043c:	1105c83a 	sub	r2,r2,r4
   40440:	f800283a 	ret
   40444:	2005883a 	mov	r2,r4
   40448:	003fe706 	br	403e8 <__alt_data_end+0xfffcf6a8>
   4044c:	0005883a 	mov	r2,zero
   40450:	f800283a 	ret

00040454 <__sfvwrite_r>:
   40454:	30800217 	ldw	r2,8(r6)
   40458:	10004526 	beq	r2,zero,40570 <__sfvwrite_r+0x11c>
   4045c:	28c0030b 	ldhu	r3,12(r5)
   40460:	defff404 	addi	sp,sp,-48
   40464:	dd400715 	stw	r21,28(sp)
   40468:	dcc00515 	stw	r19,20(sp)
   4046c:	dc000215 	stw	r16,8(sp)
   40470:	dfc00b15 	stw	ra,44(sp)
   40474:	df000a15 	stw	fp,40(sp)
   40478:	ddc00915 	stw	r23,36(sp)
   4047c:	dd800815 	stw	r22,32(sp)
   40480:	dd000615 	stw	r20,24(sp)
   40484:	dc800415 	stw	r18,16(sp)
   40488:	dc400315 	stw	r17,12(sp)
   4048c:	1880020c 	andi	r2,r3,8
   40490:	2821883a 	mov	r16,r5
   40494:	202b883a 	mov	r21,r4
   40498:	3027883a 	mov	r19,r6
   4049c:	10002526 	beq	r2,zero,40534 <__sfvwrite_r+0xe0>
   404a0:	28800417 	ldw	r2,16(r5)
   404a4:	10002326 	beq	r2,zero,40534 <__sfvwrite_r+0xe0>
   404a8:	1880008c 	andi	r2,r3,2
   404ac:	9c400017 	ldw	r17,0(r19)
   404b0:	10003126 	beq	r2,zero,40578 <__sfvwrite_r+0x124>
   404b4:	0029883a 	mov	r20,zero
   404b8:	0025883a 	mov	r18,zero
   404bc:	05810004 	movi	r22,1024
   404c0:	a00d883a 	mov	r6,r20
   404c4:	a809883a 	mov	r4,r21
   404c8:	90002526 	beq	r18,zero,40560 <__sfvwrite_r+0x10c>
   404cc:	900f883a 	mov	r7,r18
   404d0:	81400717 	ldw	r5,28(r16)
   404d4:	b480012e 	bgeu	r22,r18,404dc <__sfvwrite_r+0x88>
   404d8:	01c10004 	movi	r7,1024
   404dc:	80800917 	ldw	r2,36(r16)
   404e0:	103ee83a 	callr	r2
   404e4:	0080510e 	bge	zero,r2,4062c <__sfvwrite_r+0x1d8>
   404e8:	98c00217 	ldw	r3,8(r19)
   404ec:	a0a9883a 	add	r20,r20,r2
   404f0:	90a5c83a 	sub	r18,r18,r2
   404f4:	1885c83a 	sub	r2,r3,r2
   404f8:	98800215 	stw	r2,8(r19)
   404fc:	103ff01e 	bne	r2,zero,404c0 <__alt_data_end+0xfffcf780>
   40500:	0005883a 	mov	r2,zero
   40504:	dfc00b17 	ldw	ra,44(sp)
   40508:	df000a17 	ldw	fp,40(sp)
   4050c:	ddc00917 	ldw	r23,36(sp)
   40510:	dd800817 	ldw	r22,32(sp)
   40514:	dd400717 	ldw	r21,28(sp)
   40518:	dd000617 	ldw	r20,24(sp)
   4051c:	dcc00517 	ldw	r19,20(sp)
   40520:	dc800417 	ldw	r18,16(sp)
   40524:	dc400317 	ldw	r17,12(sp)
   40528:	dc000217 	ldw	r16,8(sp)
   4052c:	dec00c04 	addi	sp,sp,48
   40530:	f800283a 	ret
   40534:	a809883a 	mov	r4,r21
   40538:	800b883a 	mov	r5,r16
   4053c:	0041a100 	call	41a10 <__swsetup_r>
   40540:	80c0030b 	ldhu	r3,12(r16)
   40544:	103fd826 	beq	r2,zero,404a8 <__alt_data_end+0xfffcf768>
   40548:	18c01014 	ori	r3,r3,64
   4054c:	80c0030d 	sth	r3,12(r16)
   40550:	00c00244 	movi	r3,9
   40554:	00bfffc4 	movi	r2,-1
   40558:	a8c00015 	stw	r3,0(r21)
   4055c:	003fe906 	br	40504 <__alt_data_end+0xfffcf7c4>
   40560:	8d000017 	ldw	r20,0(r17)
   40564:	8c800117 	ldw	r18,4(r17)
   40568:	8c400204 	addi	r17,r17,8
   4056c:	003fd406 	br	404c0 <__alt_data_end+0xfffcf780>
   40570:	0005883a 	mov	r2,zero
   40574:	f800283a 	ret
   40578:	1880004c 	andi	r2,r3,1
   4057c:	1000301e 	bne	r2,zero,40640 <__sfvwrite_r+0x1ec>
   40580:	002f883a 	mov	r23,zero
   40584:	0025883a 	mov	r18,zero
   40588:	90001c26 	beq	r18,zero,405fc <__sfvwrite_r+0x1a8>
   4058c:	1880800c 	andi	r2,r3,512
   40590:	85000217 	ldw	r20,8(r16)
   40594:	10006c26 	beq	r2,zero,40748 <__sfvwrite_r+0x2f4>
   40598:	a02d883a 	mov	r22,r20
   4059c:	95008536 	bltu	r18,r20,407b4 <__sfvwrite_r+0x360>
   405a0:	1881200c 	andi	r2,r3,1152
   405a4:	10009d1e 	bne	r2,zero,4081c <__sfvwrite_r+0x3c8>
   405a8:	81000017 	ldw	r4,0(r16)
   405ac:	a039883a 	mov	fp,r20
   405b0:	9029883a 	mov	r20,r18
   405b4:	b80b883a 	mov	r5,r23
   405b8:	b00d883a 	mov	r6,r22
   405bc:	00412c00 	call	412c0 <memmove>
   405c0:	80c00217 	ldw	r3,8(r16)
   405c4:	81000017 	ldw	r4,0(r16)
   405c8:	9005883a 	mov	r2,r18
   405cc:	1f39c83a 	sub	fp,r3,fp
   405d0:	258f883a 	add	r7,r4,r22
   405d4:	87000215 	stw	fp,8(r16)
   405d8:	81c00015 	stw	r7,0(r16)
   405dc:	98c00217 	ldw	r3,8(r19)
   405e0:	b8af883a 	add	r23,r23,r2
   405e4:	90a5c83a 	sub	r18,r18,r2
   405e8:	1d05c83a 	sub	r2,r3,r20
   405ec:	98800215 	stw	r2,8(r19)
   405f0:	103fc326 	beq	r2,zero,40500 <__alt_data_end+0xfffcf7c0>
   405f4:	80c0030b 	ldhu	r3,12(r16)
   405f8:	903fe41e 	bne	r18,zero,4058c <__alt_data_end+0xfffcf84c>
   405fc:	8dc00017 	ldw	r23,0(r17)
   40600:	8c800117 	ldw	r18,4(r17)
   40604:	8c400204 	addi	r17,r17,8
   40608:	003fdf06 	br	40588 <__alt_data_end+0xfffcf848>
   4060c:	004141c0 	call	4141c <_realloc_r>
   40610:	102d883a 	mov	r22,r2
   40614:	1000a01e 	bne	r2,zero,40898 <__sfvwrite_r+0x444>
   40618:	81400417 	ldw	r5,16(r16)
   4061c:	a809883a 	mov	r4,r21
   40620:	00422700 	call	42270 <_free_r>
   40624:	00800304 	movi	r2,12
   40628:	a8800015 	stw	r2,0(r21)
   4062c:	80c0030b 	ldhu	r3,12(r16)
   40630:	00bfffc4 	movi	r2,-1
   40634:	18c01014 	ori	r3,r3,64
   40638:	80c0030d 	sth	r3,12(r16)
   4063c:	003fb106 	br	40504 <__alt_data_end+0xfffcf7c4>
   40640:	0029883a 	mov	r20,zero
   40644:	0011883a 	mov	r8,zero
   40648:	0039883a 	mov	fp,zero
   4064c:	0025883a 	mov	r18,zero
   40650:	90001f26 	beq	r18,zero,406d0 <__sfvwrite_r+0x27c>
   40654:	40006826 	beq	r8,zero,407f8 <__sfvwrite_r+0x3a4>
   40658:	a02f883a 	mov	r23,r20
   4065c:	9500012e 	bgeu	r18,r20,40664 <__sfvwrite_r+0x210>
   40660:	902f883a 	mov	r23,r18
   40664:	81000017 	ldw	r4,0(r16)
   40668:	80800417 	ldw	r2,16(r16)
   4066c:	b82d883a 	mov	r22,r23
   40670:	81800217 	ldw	r6,8(r16)
   40674:	81c00517 	ldw	r7,20(r16)
   40678:	1100022e 	bgeu	r2,r4,40684 <__sfvwrite_r+0x230>
   4067c:	31c7883a 	add	r3,r6,r7
   40680:	1dc01816 	blt	r3,r23,406e4 <__sfvwrite_r+0x290>
   40684:	b9c03f16 	blt	r23,r7,40784 <__sfvwrite_r+0x330>
   40688:	80800917 	ldw	r2,36(r16)
   4068c:	81400717 	ldw	r5,28(r16)
   40690:	a809883a 	mov	r4,r21
   40694:	da000115 	stw	r8,4(sp)
   40698:	e00d883a 	mov	r6,fp
   4069c:	103ee83a 	callr	r2
   406a0:	102d883a 	mov	r22,r2
   406a4:	da000117 	ldw	r8,4(sp)
   406a8:	00bfe00e 	bge	zero,r2,4062c <__alt_data_end+0xfffcf8ec>
   406ac:	a5a9c83a 	sub	r20,r20,r22
   406b0:	a0001f26 	beq	r20,zero,40730 <__sfvwrite_r+0x2dc>
   406b4:	98800217 	ldw	r2,8(r19)
   406b8:	e5b9883a 	add	fp,fp,r22
   406bc:	95a5c83a 	sub	r18,r18,r22
   406c0:	15adc83a 	sub	r22,r2,r22
   406c4:	9d800215 	stw	r22,8(r19)
   406c8:	b03f8d26 	beq	r22,zero,40500 <__alt_data_end+0xfffcf7c0>
   406cc:	903fe11e 	bne	r18,zero,40654 <__alt_data_end+0xfffcf914>
   406d0:	8f000017 	ldw	fp,0(r17)
   406d4:	8c800117 	ldw	r18,4(r17)
   406d8:	0011883a 	mov	r8,zero
   406dc:	8c400204 	addi	r17,r17,8
   406e0:	003fdb06 	br	40650 <__alt_data_end+0xfffcf910>
   406e4:	180d883a 	mov	r6,r3
   406e8:	e00b883a 	mov	r5,fp
   406ec:	da000115 	stw	r8,4(sp)
   406f0:	d8c00015 	stw	r3,0(sp)
   406f4:	00412c00 	call	412c0 <memmove>
   406f8:	d8c00017 	ldw	r3,0(sp)
   406fc:	80800017 	ldw	r2,0(r16)
   40700:	a809883a 	mov	r4,r21
   40704:	800b883a 	mov	r5,r16
   40708:	10c5883a 	add	r2,r2,r3
   4070c:	80800015 	stw	r2,0(r16)
   40710:	d8c00015 	stw	r3,0(sp)
   40714:	0041b400 	call	41b40 <_fflush_r>
   40718:	d8c00017 	ldw	r3,0(sp)
   4071c:	da000117 	ldw	r8,4(sp)
   40720:	103fc21e 	bne	r2,zero,4062c <__alt_data_end+0xfffcf8ec>
   40724:	182d883a 	mov	r22,r3
   40728:	a5a9c83a 	sub	r20,r20,r22
   4072c:	a03fe11e 	bne	r20,zero,406b4 <__alt_data_end+0xfffcf974>
   40730:	a809883a 	mov	r4,r21
   40734:	800b883a 	mov	r5,r16
   40738:	0041b400 	call	41b40 <_fflush_r>
   4073c:	103fbb1e 	bne	r2,zero,4062c <__alt_data_end+0xfffcf8ec>
   40740:	0011883a 	mov	r8,zero
   40744:	003fdb06 	br	406b4 <__alt_data_end+0xfffcf974>
   40748:	81000017 	ldw	r4,0(r16)
   4074c:	80800417 	ldw	r2,16(r16)
   40750:	1100012e 	bgeu	r2,r4,40758 <__sfvwrite_r+0x304>
   40754:	a4805a36 	bltu	r20,r18,408c0 <__sfvwrite_r+0x46c>
   40758:	81c00517 	ldw	r7,20(r16)
   4075c:	91c01a36 	bltu	r18,r7,407c8 <__sfvwrite_r+0x374>
   40760:	80800917 	ldw	r2,36(r16)
   40764:	81400717 	ldw	r5,28(r16)
   40768:	a809883a 	mov	r4,r21
   4076c:	b80d883a 	mov	r6,r23
   40770:	103ee83a 	callr	r2
   40774:	1029883a 	mov	r20,r2
   40778:	00bfac0e 	bge	zero,r2,4062c <__alt_data_end+0xfffcf8ec>
   4077c:	a005883a 	mov	r2,r20
   40780:	003f9606 	br	405dc <__alt_data_end+0xfffcf89c>
   40784:	b80d883a 	mov	r6,r23
   40788:	e00b883a 	mov	r5,fp
   4078c:	da000115 	stw	r8,4(sp)
   40790:	00412c00 	call	412c0 <memmove>
   40794:	80800217 	ldw	r2,8(r16)
   40798:	80c00017 	ldw	r3,0(r16)
   4079c:	da000117 	ldw	r8,4(sp)
   407a0:	15c5c83a 	sub	r2,r2,r23
   407a4:	1def883a 	add	r23,r3,r23
   407a8:	80800215 	stw	r2,8(r16)
   407ac:	85c00015 	stw	r23,0(r16)
   407b0:	003fbe06 	br	406ac <__alt_data_end+0xfffcf96c>
   407b4:	81000017 	ldw	r4,0(r16)
   407b8:	9039883a 	mov	fp,r18
   407bc:	9029883a 	mov	r20,r18
   407c0:	902d883a 	mov	r22,r18
   407c4:	003f7b06 	br	405b4 <__alt_data_end+0xfffcf874>
   407c8:	b80b883a 	mov	r5,r23
   407cc:	900d883a 	mov	r6,r18
   407d0:	00412c00 	call	412c0 <memmove>
   407d4:	80c00217 	ldw	r3,8(r16)
   407d8:	80800017 	ldw	r2,0(r16)
   407dc:	9029883a 	mov	r20,r18
   407e0:	1c87c83a 	sub	r3,r3,r18
   407e4:	1485883a 	add	r2,r2,r18
   407e8:	80800015 	stw	r2,0(r16)
   407ec:	80c00215 	stw	r3,8(r16)
   407f0:	9005883a 	mov	r2,r18
   407f4:	003f7906 	br	405dc <__alt_data_end+0xfffcf89c>
   407f8:	e009883a 	mov	r4,fp
   407fc:	01400284 	movi	r5,10
   40800:	900d883a 	mov	r6,r18
   40804:	00410a00 	call	410a0 <memchr>
   40808:	10003826 	beq	r2,zero,408ec <__sfvwrite_r+0x498>
   4080c:	10800044 	addi	r2,r2,1
   40810:	1729c83a 	sub	r20,r2,fp
   40814:	02000044 	movi	r8,1
   40818:	003f8f06 	br	40658 <__alt_data_end+0xfffcf918>
   4081c:	80800517 	ldw	r2,20(r16)
   40820:	81400417 	ldw	r5,16(r16)
   40824:	87000017 	ldw	fp,0(r16)
   40828:	10a9883a 	add	r20,r2,r2
   4082c:	a085883a 	add	r2,r20,r2
   40830:	1028d7fa 	srli	r20,r2,31
   40834:	e179c83a 	sub	fp,fp,r5
   40838:	e1000044 	addi	r4,fp,1
   4083c:	a085883a 	add	r2,r20,r2
   40840:	1029d07a 	srai	r20,r2,1
   40844:	2485883a 	add	r2,r4,r18
   40848:	a00d883a 	mov	r6,r20
   4084c:	a080022e 	bgeu	r20,r2,40858 <__sfvwrite_r+0x404>
   40850:	1029883a 	mov	r20,r2
   40854:	100d883a 	mov	r6,r2
   40858:	18c1000c 	andi	r3,r3,1024
   4085c:	a809883a 	mov	r4,r21
   40860:	183f6a26 	beq	r3,zero,4060c <__alt_data_end+0xfffcf8cc>
   40864:	300b883a 	mov	r5,r6
   40868:	00408f80 	call	408f8 <_malloc_r>
   4086c:	102d883a 	mov	r22,r2
   40870:	103f6c26 	beq	r2,zero,40624 <__alt_data_end+0xfffcf8e4>
   40874:	81400417 	ldw	r5,16(r16)
   40878:	1009883a 	mov	r4,r2
   4087c:	e00d883a 	mov	r6,fp
   40880:	00411880 	call	41188 <memcpy>
   40884:	8080030b 	ldhu	r2,12(r16)
   40888:	00fedfc4 	movi	r3,-1153
   4088c:	10c4703a 	and	r2,r2,r3
   40890:	10802014 	ori	r2,r2,128
   40894:	8080030d 	sth	r2,12(r16)
   40898:	b709883a 	add	r4,r22,fp
   4089c:	a707c83a 	sub	r3,r20,fp
   408a0:	85800415 	stw	r22,16(r16)
   408a4:	85000515 	stw	r20,20(r16)
   408a8:	81000015 	stw	r4,0(r16)
   408ac:	9039883a 	mov	fp,r18
   408b0:	80c00215 	stw	r3,8(r16)
   408b4:	9029883a 	mov	r20,r18
   408b8:	902d883a 	mov	r22,r18
   408bc:	003f3d06 	br	405b4 <__alt_data_end+0xfffcf874>
   408c0:	b80b883a 	mov	r5,r23
   408c4:	a00d883a 	mov	r6,r20
   408c8:	00412c00 	call	412c0 <memmove>
   408cc:	80800017 	ldw	r2,0(r16)
   408d0:	a809883a 	mov	r4,r21
   408d4:	800b883a 	mov	r5,r16
   408d8:	1505883a 	add	r2,r2,r20
   408dc:	80800015 	stw	r2,0(r16)
   408e0:	0041b400 	call	41b40 <_fflush_r>
   408e4:	103fa526 	beq	r2,zero,4077c <__alt_data_end+0xfffcfa3c>
   408e8:	003f5006 	br	4062c <__alt_data_end+0xfffcf8ec>
   408ec:	95000044 	addi	r20,r18,1
   408f0:	02000044 	movi	r8,1
   408f4:	003f5806 	br	40658 <__alt_data_end+0xfffcf918>

000408f8 <_malloc_r>:
   408f8:	defff504 	addi	sp,sp,-44
   408fc:	dc800315 	stw	r18,12(sp)
   40900:	dfc00a15 	stw	ra,40(sp)
   40904:	df000915 	stw	fp,36(sp)
   40908:	ddc00815 	stw	r23,32(sp)
   4090c:	dd800715 	stw	r22,28(sp)
   40910:	dd400615 	stw	r21,24(sp)
   40914:	dd000515 	stw	r20,20(sp)
   40918:	dcc00415 	stw	r19,16(sp)
   4091c:	dc400215 	stw	r17,8(sp)
   40920:	dc000115 	stw	r16,4(sp)
   40924:	288002c4 	addi	r2,r5,11
   40928:	00c00584 	movi	r3,22
   4092c:	2025883a 	mov	r18,r4
   40930:	18802a2e 	bgeu	r3,r2,409dc <_malloc_r+0xe4>
   40934:	047ffe04 	movi	r17,-8
   40938:	1462703a 	and	r17,r2,r17
   4093c:	88009e16 	blt	r17,zero,40bb8 <_malloc_r+0x2c0>
   40940:	89409d36 	bltu	r17,r5,40bb8 <_malloc_r+0x2c0>
   40944:	00434180 	call	43418 <__malloc_lock>
   40948:	00807dc4 	movi	r2,503
   4094c:	14402736 	bltu	r2,r17,409ec <_malloc_r+0xf4>
   40950:	8806d0fa 	srli	r3,r17,3
   40954:	04c00134 	movhi	r19,4
   40958:	9cd65a04 	addi	r19,r19,22888
   4095c:	18c5883a 	add	r2,r3,r3
   40960:	1085883a 	add	r2,r2,r2
   40964:	1085883a 	add	r2,r2,r2
   40968:	9885883a 	add	r2,r19,r2
   4096c:	14000317 	ldw	r16,12(r2)
   40970:	80814a26 	beq	r16,r2,40e9c <_malloc_r+0x5a4>
   40974:	80c00117 	ldw	r3,4(r16)
   40978:	81000317 	ldw	r4,12(r16)
   4097c:	00bfff04 	movi	r2,-4
   40980:	1884703a 	and	r2,r3,r2
   40984:	81400217 	ldw	r5,8(r16)
   40988:	8085883a 	add	r2,r16,r2
   4098c:	10c00117 	ldw	r3,4(r2)
   40990:	29000315 	stw	r4,12(r5)
   40994:	21400215 	stw	r5,8(r4)
   40998:	18c00054 	ori	r3,r3,1
   4099c:	10c00115 	stw	r3,4(r2)
   409a0:	9009883a 	mov	r4,r18
   409a4:	00434380 	call	43438 <__malloc_unlock>
   409a8:	80800204 	addi	r2,r16,8
   409ac:	dfc00a17 	ldw	ra,40(sp)
   409b0:	df000917 	ldw	fp,36(sp)
   409b4:	ddc00817 	ldw	r23,32(sp)
   409b8:	dd800717 	ldw	r22,28(sp)
   409bc:	dd400617 	ldw	r21,24(sp)
   409c0:	dd000517 	ldw	r20,20(sp)
   409c4:	dcc00417 	ldw	r19,16(sp)
   409c8:	dc800317 	ldw	r18,12(sp)
   409cc:	dc400217 	ldw	r17,8(sp)
   409d0:	dc000117 	ldw	r16,4(sp)
   409d4:	dec00b04 	addi	sp,sp,44
   409d8:	f800283a 	ret
   409dc:	04400404 	movi	r17,16
   409e0:	89407536 	bltu	r17,r5,40bb8 <_malloc_r+0x2c0>
   409e4:	00434180 	call	43418 <__malloc_lock>
   409e8:	003fd906 	br	40950 <__alt_data_end+0xfffcfc10>
   409ec:	8806d27a 	srli	r3,r17,9
   409f0:	18007526 	beq	r3,zero,40bc8 <_malloc_r+0x2d0>
   409f4:	00800104 	movi	r2,4
   409f8:	10c0ef36 	bltu	r2,r3,40db8 <_malloc_r+0x4c0>
   409fc:	8806d1ba 	srli	r3,r17,6
   40a00:	19c00e04 	addi	r7,r3,56
   40a04:	39cb883a 	add	r5,r7,r7
   40a08:	04c00134 	movhi	r19,4
   40a0c:	294b883a 	add	r5,r5,r5
   40a10:	9cd65a04 	addi	r19,r19,22888
   40a14:	294b883a 	add	r5,r5,r5
   40a18:	994b883a 	add	r5,r19,r5
   40a1c:	2c000317 	ldw	r16,12(r5)
   40a20:	2c000e26 	beq	r5,r16,40a5c <_malloc_r+0x164>
   40a24:	80800117 	ldw	r2,4(r16)
   40a28:	01bfff04 	movi	r6,-4
   40a2c:	010003c4 	movi	r4,15
   40a30:	1184703a 	and	r2,r2,r6
   40a34:	1447c83a 	sub	r3,r2,r17
   40a38:	20c00716 	blt	r4,r3,40a58 <_malloc_r+0x160>
   40a3c:	1800650e 	bge	r3,zero,40bd4 <_malloc_r+0x2dc>
   40a40:	84000317 	ldw	r16,12(r16)
   40a44:	2c000526 	beq	r5,r16,40a5c <_malloc_r+0x164>
   40a48:	80800117 	ldw	r2,4(r16)
   40a4c:	1184703a 	and	r2,r2,r6
   40a50:	1447c83a 	sub	r3,r2,r17
   40a54:	20fff90e 	bge	r4,r3,40a3c <__alt_data_end+0xfffcfcfc>
   40a58:	39ffffc4 	addi	r7,r7,-1
   40a5c:	38c00044 	addi	r3,r7,1
   40a60:	01800134 	movhi	r6,4
   40a64:	9c000417 	ldw	r16,16(r19)
   40a68:	31965a04 	addi	r6,r6,22888
   40a6c:	32400204 	addi	r9,r6,8
   40a70:	82410326 	beq	r16,r9,40e80 <_malloc_r+0x588>
   40a74:	81000117 	ldw	r4,4(r16)
   40a78:	00bfff04 	movi	r2,-4
   40a7c:	208e703a 	and	r7,r4,r2
   40a80:	3c45c83a 	sub	r2,r7,r17
   40a84:	010003c4 	movi	r4,15
   40a88:	2080ee16 	blt	r4,r2,40e44 <_malloc_r+0x54c>
   40a8c:	32400515 	stw	r9,20(r6)
   40a90:	32400415 	stw	r9,16(r6)
   40a94:	1000510e 	bge	r2,zero,40bdc <_malloc_r+0x2e4>
   40a98:	00807fc4 	movi	r2,511
   40a9c:	11c0ce36 	bltu	r2,r7,40dd8 <_malloc_r+0x4e0>
   40aa0:	3808d0fa 	srli	r4,r7,3
   40aa4:	01c00044 	movi	r7,1
   40aa8:	30800117 	ldw	r2,4(r6)
   40aac:	210b883a 	add	r5,r4,r4
   40ab0:	294b883a 	add	r5,r5,r5
   40ab4:	2009d0ba 	srai	r4,r4,2
   40ab8:	294b883a 	add	r5,r5,r5
   40abc:	298b883a 	add	r5,r5,r6
   40ac0:	2a000217 	ldw	r8,8(r5)
   40ac4:	3908983a 	sll	r4,r7,r4
   40ac8:	81400315 	stw	r5,12(r16)
   40acc:	82000215 	stw	r8,8(r16)
   40ad0:	2088b03a 	or	r4,r4,r2
   40ad4:	2c000215 	stw	r16,8(r5)
   40ad8:	31000115 	stw	r4,4(r6)
   40adc:	44000315 	stw	r16,12(r8)
   40ae0:	1805d0ba 	srai	r2,r3,2
   40ae4:	01400044 	movi	r5,1
   40ae8:	288a983a 	sll	r5,r5,r2
   40aec:	21404336 	bltu	r4,r5,40bfc <_malloc_r+0x304>
   40af0:	2144703a 	and	r2,r4,r5
   40af4:	10000a1e 	bne	r2,zero,40b20 <_malloc_r+0x228>
   40af8:	00bfff04 	movi	r2,-4
   40afc:	294b883a 	add	r5,r5,r5
   40b00:	1886703a 	and	r3,r3,r2
   40b04:	2144703a 	and	r2,r4,r5
   40b08:	18c00104 	addi	r3,r3,4
   40b0c:	1000041e 	bne	r2,zero,40b20 <_malloc_r+0x228>
   40b10:	294b883a 	add	r5,r5,r5
   40b14:	2144703a 	and	r2,r4,r5
   40b18:	18c00104 	addi	r3,r3,4
   40b1c:	103ffc26 	beq	r2,zero,40b10 <__alt_data_end+0xfffcfdd0>
   40b20:	023fff04 	movi	r8,-4
   40b24:	01c003c4 	movi	r7,15
   40b28:	18c5883a 	add	r2,r3,r3
   40b2c:	1085883a 	add	r2,r2,r2
   40b30:	1085883a 	add	r2,r2,r2
   40b34:	9895883a 	add	r10,r19,r2
   40b38:	52c00304 	addi	r11,r10,12
   40b3c:	1819883a 	mov	r12,r3
   40b40:	5c000017 	ldw	r16,0(r11)
   40b44:	59bffd04 	addi	r6,r11,-12
   40b48:	8180041e 	bne	r16,r6,40b5c <_malloc_r+0x264>
   40b4c:	0000ce06 	br	40e88 <_malloc_r+0x590>
   40b50:	2000d70e 	bge	r4,zero,40eb0 <_malloc_r+0x5b8>
   40b54:	84000317 	ldw	r16,12(r16)
   40b58:	8180cb26 	beq	r16,r6,40e88 <_malloc_r+0x590>
   40b5c:	80800117 	ldw	r2,4(r16)
   40b60:	1204703a 	and	r2,r2,r8
   40b64:	1449c83a 	sub	r4,r2,r17
   40b68:	393ff90e 	bge	r7,r4,40b50 <__alt_data_end+0xfffcfe10>
   40b6c:	80800317 	ldw	r2,12(r16)
   40b70:	80c00217 	ldw	r3,8(r16)
   40b74:	89400054 	ori	r5,r17,1
   40b78:	81400115 	stw	r5,4(r16)
   40b7c:	18800315 	stw	r2,12(r3)
   40b80:	10c00215 	stw	r3,8(r2)
   40b84:	8463883a 	add	r17,r16,r17
   40b88:	9c400515 	stw	r17,20(r19)
   40b8c:	9c400415 	stw	r17,16(r19)
   40b90:	20800054 	ori	r2,r4,1
   40b94:	88800115 	stw	r2,4(r17)
   40b98:	8a400315 	stw	r9,12(r17)
   40b9c:	8a400215 	stw	r9,8(r17)
   40ba0:	8923883a 	add	r17,r17,r4
   40ba4:	89000015 	stw	r4,0(r17)
   40ba8:	9009883a 	mov	r4,r18
   40bac:	00434380 	call	43438 <__malloc_unlock>
   40bb0:	80800204 	addi	r2,r16,8
   40bb4:	003f7d06 	br	409ac <__alt_data_end+0xfffcfc6c>
   40bb8:	00800304 	movi	r2,12
   40bbc:	90800015 	stw	r2,0(r18)
   40bc0:	0005883a 	mov	r2,zero
   40bc4:	003f7906 	br	409ac <__alt_data_end+0xfffcfc6c>
   40bc8:	01401f84 	movi	r5,126
   40bcc:	01c00fc4 	movi	r7,63
   40bd0:	003f8d06 	br	40a08 <__alt_data_end+0xfffcfcc8>
   40bd4:	81000317 	ldw	r4,12(r16)
   40bd8:	003f6a06 	br	40984 <__alt_data_end+0xfffcfc44>
   40bdc:	81c5883a 	add	r2,r16,r7
   40be0:	10c00117 	ldw	r3,4(r2)
   40be4:	9009883a 	mov	r4,r18
   40be8:	18c00054 	ori	r3,r3,1
   40bec:	10c00115 	stw	r3,4(r2)
   40bf0:	00434380 	call	43438 <__malloc_unlock>
   40bf4:	80800204 	addi	r2,r16,8
   40bf8:	003f6c06 	br	409ac <__alt_data_end+0xfffcfc6c>
   40bfc:	9c000217 	ldw	r16,8(r19)
   40c00:	00bfff04 	movi	r2,-4
   40c04:	85800117 	ldw	r22,4(r16)
   40c08:	b0ac703a 	and	r22,r22,r2
   40c0c:	b4400336 	bltu	r22,r17,40c1c <_malloc_r+0x324>
   40c10:	b445c83a 	sub	r2,r22,r17
   40c14:	00c003c4 	movi	r3,15
   40c18:	18805d16 	blt	r3,r2,40d90 <_malloc_r+0x498>
   40c1c:	05c00134 	movhi	r23,4
   40c20:	00800174 	movhi	r2,5
   40c24:	bddbe004 	addi	r23,r23,28544
   40c28:	10a28904 	addi	r2,r2,-30172
   40c2c:	15400017 	ldw	r21,0(r2)
   40c30:	b9000017 	ldw	r4,0(r23)
   40c34:	00ffffc4 	movi	r3,-1
   40c38:	858d883a 	add	r6,r16,r22
   40c3c:	8d6b883a 	add	r21,r17,r21
   40c40:	20c0e426 	beq	r4,r3,40fd4 <_malloc_r+0x6dc>
   40c44:	ad4403c4 	addi	r21,r21,4111
   40c48:	00fc0004 	movi	r3,-4096
   40c4c:	a8ea703a 	and	r21,r21,r3
   40c50:	9009883a 	mov	r4,r18
   40c54:	a80b883a 	mov	r5,r21
   40c58:	d9800015 	stw	r6,0(sp)
   40c5c:	00419bc0 	call	419bc <_sbrk_r>
   40c60:	00ffffc4 	movi	r3,-1
   40c64:	1029883a 	mov	r20,r2
   40c68:	d9800017 	ldw	r6,0(sp)
   40c6c:	10c0a426 	beq	r2,r3,40f00 <_malloc_r+0x608>
   40c70:	1180a236 	bltu	r2,r6,40efc <_malloc_r+0x604>
   40c74:	07000174 	movhi	fp,5
   40c78:	e7229104 	addi	fp,fp,-30140
   40c7c:	e0c00017 	ldw	r3,0(fp)
   40c80:	a8c7883a 	add	r3,r21,r3
   40c84:	e0c00015 	stw	r3,0(fp)
   40c88:	3500da26 	beq	r6,r20,40ff4 <_malloc_r+0x6fc>
   40c8c:	b9000017 	ldw	r4,0(r23)
   40c90:	00bfffc4 	movi	r2,-1
   40c94:	2080e426 	beq	r4,r2,41028 <_malloc_r+0x730>
   40c98:	a185c83a 	sub	r2,r20,r6
   40c9c:	1885883a 	add	r2,r3,r2
   40ca0:	e0800015 	stw	r2,0(fp)
   40ca4:	a0c001cc 	andi	r3,r20,7
   40ca8:	1800b526 	beq	r3,zero,40f80 <_malloc_r+0x688>
   40cac:	a0e9c83a 	sub	r20,r20,r3
   40cb0:	00840204 	movi	r2,4104
   40cb4:	a5000204 	addi	r20,r20,8
   40cb8:	10c7c83a 	sub	r3,r2,r3
   40cbc:	a545883a 	add	r2,r20,r21
   40cc0:	1083ffcc 	andi	r2,r2,4095
   40cc4:	18abc83a 	sub	r21,r3,r2
   40cc8:	9009883a 	mov	r4,r18
   40ccc:	a80b883a 	mov	r5,r21
   40cd0:	00419bc0 	call	419bc <_sbrk_r>
   40cd4:	00ffffc4 	movi	r3,-1
   40cd8:	10c0d026 	beq	r2,r3,4101c <_malloc_r+0x724>
   40cdc:	1507c83a 	sub	r3,r2,r20
   40ce0:	a8c7883a 	add	r3,r21,r3
   40ce4:	18c00054 	ori	r3,r3,1
   40ce8:	e0800017 	ldw	r2,0(fp)
   40cec:	9d000215 	stw	r20,8(r19)
   40cf0:	a0c00115 	stw	r3,4(r20)
   40cf4:	a887883a 	add	r3,r21,r2
   40cf8:	e0c00015 	stw	r3,0(fp)
   40cfc:	84c00e26 	beq	r16,r19,40d38 <_malloc_r+0x440>
   40d00:	018003c4 	movi	r6,15
   40d04:	3580a02e 	bgeu	r6,r22,40f88 <_malloc_r+0x690>
   40d08:	81400117 	ldw	r5,4(r16)
   40d0c:	013ffe04 	movi	r4,-8
   40d10:	b0bffd04 	addi	r2,r22,-12
   40d14:	1104703a 	and	r2,r2,r4
   40d18:	2900004c 	andi	r4,r5,1
   40d1c:	1108b03a 	or	r4,r2,r4
   40d20:	81000115 	stw	r4,4(r16)
   40d24:	01400144 	movi	r5,5
   40d28:	8089883a 	add	r4,r16,r2
   40d2c:	21400115 	stw	r5,4(r4)
   40d30:	21400215 	stw	r5,8(r4)
   40d34:	3080c036 	bltu	r6,r2,41038 <_malloc_r+0x740>
   40d38:	00800174 	movhi	r2,5
   40d3c:	10a28804 	addi	r2,r2,-30176
   40d40:	11000017 	ldw	r4,0(r2)
   40d44:	20c0012e 	bgeu	r4,r3,40d4c <_malloc_r+0x454>
   40d48:	10c00015 	stw	r3,0(r2)
   40d4c:	00800174 	movhi	r2,5
   40d50:	10a28704 	addi	r2,r2,-30180
   40d54:	11000017 	ldw	r4,0(r2)
   40d58:	9c000217 	ldw	r16,8(r19)
   40d5c:	20c0012e 	bgeu	r4,r3,40d64 <_malloc_r+0x46c>
   40d60:	10c00015 	stw	r3,0(r2)
   40d64:	80c00117 	ldw	r3,4(r16)
   40d68:	00bfff04 	movi	r2,-4
   40d6c:	1886703a 	and	r3,r3,r2
   40d70:	1c45c83a 	sub	r2,r3,r17
   40d74:	1c400236 	bltu	r3,r17,40d80 <_malloc_r+0x488>
   40d78:	00c003c4 	movi	r3,15
   40d7c:	18800416 	blt	r3,r2,40d90 <_malloc_r+0x498>
   40d80:	9009883a 	mov	r4,r18
   40d84:	00434380 	call	43438 <__malloc_unlock>
   40d88:	0005883a 	mov	r2,zero
   40d8c:	003f0706 	br	409ac <__alt_data_end+0xfffcfc6c>
   40d90:	88c00054 	ori	r3,r17,1
   40d94:	80c00115 	stw	r3,4(r16)
   40d98:	8463883a 	add	r17,r16,r17
   40d9c:	10800054 	ori	r2,r2,1
   40da0:	9c400215 	stw	r17,8(r19)
   40da4:	88800115 	stw	r2,4(r17)
   40da8:	9009883a 	mov	r4,r18
   40dac:	00434380 	call	43438 <__malloc_unlock>
   40db0:	80800204 	addi	r2,r16,8
   40db4:	003efd06 	br	409ac <__alt_data_end+0xfffcfc6c>
   40db8:	00800504 	movi	r2,20
   40dbc:	10c0482e 	bgeu	r2,r3,40ee0 <_malloc_r+0x5e8>
   40dc0:	00801504 	movi	r2,84
   40dc4:	10c06836 	bltu	r2,r3,40f68 <_malloc_r+0x670>
   40dc8:	8806d33a 	srli	r3,r17,12
   40dcc:	19c01b84 	addi	r7,r3,110
   40dd0:	39cb883a 	add	r5,r7,r7
   40dd4:	003f0c06 	br	40a08 <__alt_data_end+0xfffcfcc8>
   40dd8:	3804d27a 	srli	r2,r7,9
   40ddc:	01000104 	movi	r4,4
   40de0:	2080422e 	bgeu	r4,r2,40eec <_malloc_r+0x5f4>
   40de4:	01000504 	movi	r4,20
   40de8:	20807c36 	bltu	r4,r2,40fdc <_malloc_r+0x6e4>
   40dec:	110016c4 	addi	r4,r2,91
   40df0:	210b883a 	add	r5,r4,r4
   40df4:	294b883a 	add	r5,r5,r5
   40df8:	294b883a 	add	r5,r5,r5
   40dfc:	994b883a 	add	r5,r19,r5
   40e00:	28800217 	ldw	r2,8(r5)
   40e04:	02000134 	movhi	r8,4
   40e08:	42165a04 	addi	r8,r8,22888
   40e0c:	11406326 	beq	r2,r5,40f9c <_malloc_r+0x6a4>
   40e10:	01bfff04 	movi	r6,-4
   40e14:	11000117 	ldw	r4,4(r2)
   40e18:	2188703a 	and	r4,r4,r6
   40e1c:	3900022e 	bgeu	r7,r4,40e28 <_malloc_r+0x530>
   40e20:	10800217 	ldw	r2,8(r2)
   40e24:	28bffb1e 	bne	r5,r2,40e14 <__alt_data_end+0xfffd00d4>
   40e28:	11800317 	ldw	r6,12(r2)
   40e2c:	99000117 	ldw	r4,4(r19)
   40e30:	81800315 	stw	r6,12(r16)
   40e34:	80800215 	stw	r2,8(r16)
   40e38:	34000215 	stw	r16,8(r6)
   40e3c:	14000315 	stw	r16,12(r2)
   40e40:	003f2706 	br	40ae0 <__alt_data_end+0xfffcfda0>
   40e44:	88c00054 	ori	r3,r17,1
   40e48:	80c00115 	stw	r3,4(r16)
   40e4c:	8463883a 	add	r17,r16,r17
   40e50:	34400515 	stw	r17,20(r6)
   40e54:	34400415 	stw	r17,16(r6)
   40e58:	10c00054 	ori	r3,r2,1
   40e5c:	8a400315 	stw	r9,12(r17)
   40e60:	8a400215 	stw	r9,8(r17)
   40e64:	88c00115 	stw	r3,4(r17)
   40e68:	88a3883a 	add	r17,r17,r2
   40e6c:	88800015 	stw	r2,0(r17)
   40e70:	9009883a 	mov	r4,r18
   40e74:	00434380 	call	43438 <__malloc_unlock>
   40e78:	80800204 	addi	r2,r16,8
   40e7c:	003ecb06 	br	409ac <__alt_data_end+0xfffcfc6c>
   40e80:	31000117 	ldw	r4,4(r6)
   40e84:	003f1606 	br	40ae0 <__alt_data_end+0xfffcfda0>
   40e88:	63000044 	addi	r12,r12,1
   40e8c:	608000cc 	andi	r2,r12,3
   40e90:	5ac00204 	addi	r11,r11,8
   40e94:	103f2a1e 	bne	r2,zero,40b40 <__alt_data_end+0xfffcfe00>
   40e98:	00002106 	br	40f20 <_malloc_r+0x628>
   40e9c:	80800204 	addi	r2,r16,8
   40ea0:	84000517 	ldw	r16,20(r16)
   40ea4:	143eb31e 	bne	r2,r16,40974 <__alt_data_end+0xfffcfc34>
   40ea8:	18c00084 	addi	r3,r3,2
   40eac:	003eec06 	br	40a60 <__alt_data_end+0xfffcfd20>
   40eb0:	8085883a 	add	r2,r16,r2
   40eb4:	10c00117 	ldw	r3,4(r2)
   40eb8:	81000317 	ldw	r4,12(r16)
   40ebc:	81400217 	ldw	r5,8(r16)
   40ec0:	18c00054 	ori	r3,r3,1
   40ec4:	10c00115 	stw	r3,4(r2)
   40ec8:	29000315 	stw	r4,12(r5)
   40ecc:	21400215 	stw	r5,8(r4)
   40ed0:	9009883a 	mov	r4,r18
   40ed4:	00434380 	call	43438 <__malloc_unlock>
   40ed8:	80800204 	addi	r2,r16,8
   40edc:	003eb306 	br	409ac <__alt_data_end+0xfffcfc6c>
   40ee0:	19c016c4 	addi	r7,r3,91
   40ee4:	39cb883a 	add	r5,r7,r7
   40ee8:	003ec706 	br	40a08 <__alt_data_end+0xfffcfcc8>
   40eec:	3804d1ba 	srli	r2,r7,6
   40ef0:	11000e04 	addi	r4,r2,56
   40ef4:	210b883a 	add	r5,r4,r4
   40ef8:	003fbe06 	br	40df4 <__alt_data_end+0xfffd00b4>
   40efc:	84ff5d26 	beq	r16,r19,40c74 <__alt_data_end+0xfffcff34>
   40f00:	9c000217 	ldw	r16,8(r19)
   40f04:	00bfff04 	movi	r2,-4
   40f08:	80c00117 	ldw	r3,4(r16)
   40f0c:	1886703a 	and	r3,r3,r2
   40f10:	003f9706 	br	40d70 <__alt_data_end+0xfffd0030>
   40f14:	52800017 	ldw	r10,0(r10)
   40f18:	18ffffc4 	addi	r3,r3,-1
   40f1c:	50805c1e 	bne	r10,r2,41090 <_malloc_r+0x798>
   40f20:	190000cc 	andi	r4,r3,3
   40f24:	50bffe04 	addi	r2,r10,-8
   40f28:	203ffa1e 	bne	r4,zero,40f14 <__alt_data_end+0xfffd01d4>
   40f2c:	98800117 	ldw	r2,4(r19)
   40f30:	0146303a 	nor	r3,zero,r5
   40f34:	1884703a 	and	r2,r3,r2
   40f38:	98800115 	stw	r2,4(r19)
   40f3c:	294b883a 	add	r5,r5,r5
   40f40:	117f2e36 	bltu	r2,r5,40bfc <__alt_data_end+0xfffcfebc>
   40f44:	283f2d26 	beq	r5,zero,40bfc <__alt_data_end+0xfffcfebc>
   40f48:	1146703a 	and	r3,r2,r5
   40f4c:	1800521e 	bne	r3,zero,41098 <_malloc_r+0x7a0>
   40f50:	6007883a 	mov	r3,r12
   40f54:	294b883a 	add	r5,r5,r5
   40f58:	1148703a 	and	r4,r2,r5
   40f5c:	18c00104 	addi	r3,r3,4
   40f60:	203ffc26 	beq	r4,zero,40f54 <__alt_data_end+0xfffd0214>
   40f64:	003ef006 	br	40b28 <__alt_data_end+0xfffcfde8>
   40f68:	00805504 	movi	r2,340
   40f6c:	10c01336 	bltu	r2,r3,40fbc <_malloc_r+0x6c4>
   40f70:	8806d3fa 	srli	r3,r17,15
   40f74:	19c01dc4 	addi	r7,r3,119
   40f78:	39cb883a 	add	r5,r7,r7
   40f7c:	003ea206 	br	40a08 <__alt_data_end+0xfffcfcc8>
   40f80:	00c40004 	movi	r3,4096
   40f84:	003f4d06 	br	40cbc <__alt_data_end+0xfffcff7c>
   40f88:	00800044 	movi	r2,1
   40f8c:	a0800115 	stw	r2,4(r20)
   40f90:	a021883a 	mov	r16,r20
   40f94:	0007883a 	mov	r3,zero
   40f98:	003f7506 	br	40d70 <__alt_data_end+0xfffd0030>
   40f9c:	200bd0ba 	srai	r5,r4,2
   40fa0:	01800044 	movi	r6,1
   40fa4:	41000117 	ldw	r4,4(r8)
   40fa8:	314a983a 	sll	r5,r6,r5
   40fac:	100d883a 	mov	r6,r2
   40fb0:	2908b03a 	or	r4,r5,r4
   40fb4:	41000115 	stw	r4,4(r8)
   40fb8:	003f9d06 	br	40e30 <__alt_data_end+0xfffd00f0>
   40fbc:	00815504 	movi	r2,1364
   40fc0:	10c01336 	bltu	r2,r3,41010 <_malloc_r+0x718>
   40fc4:	8806d4ba 	srli	r3,r17,18
   40fc8:	19c01f04 	addi	r7,r3,124
   40fcc:	39cb883a 	add	r5,r7,r7
   40fd0:	003e8d06 	br	40a08 <__alt_data_end+0xfffcfcc8>
   40fd4:	ad400404 	addi	r21,r21,16
   40fd8:	003f1d06 	br	40c50 <__alt_data_end+0xfffcff10>
   40fdc:	01001504 	movi	r4,84
   40fe0:	20801c36 	bltu	r4,r2,41054 <_malloc_r+0x75c>
   40fe4:	3804d33a 	srli	r2,r7,12
   40fe8:	11001b84 	addi	r4,r2,110
   40fec:	210b883a 	add	r5,r4,r4
   40ff0:	003f8006 	br	40df4 <__alt_data_end+0xfffd00b4>
   40ff4:	3083ffcc 	andi	r2,r6,4095
   40ff8:	103f241e 	bne	r2,zero,40c8c <__alt_data_end+0xfffcff4c>
   40ffc:	99000217 	ldw	r4,8(r19)
   41000:	ad85883a 	add	r2,r21,r22
   41004:	10800054 	ori	r2,r2,1
   41008:	20800115 	stw	r2,4(r4)
   4100c:	003f4a06 	br	40d38 <__alt_data_end+0xfffcfff8>
   41010:	01403f04 	movi	r5,252
   41014:	01c01f84 	movi	r7,126
   41018:	003e7b06 	br	40a08 <__alt_data_end+0xfffcfcc8>
   4101c:	00c00044 	movi	r3,1
   41020:	002b883a 	mov	r21,zero
   41024:	003f3006 	br	40ce8 <__alt_data_end+0xfffcffa8>
   41028:	00800134 	movhi	r2,4
   4102c:	109be004 	addi	r2,r2,28544
   41030:	15000015 	stw	r20,0(r2)
   41034:	003f1b06 	br	40ca4 <__alt_data_end+0xfffcff64>
   41038:	9009883a 	mov	r4,r18
   4103c:	81400204 	addi	r5,r16,8
   41040:	00422700 	call	42270 <_free_r>
   41044:	00800174 	movhi	r2,5
   41048:	10a29104 	addi	r2,r2,-30140
   4104c:	10c00017 	ldw	r3,0(r2)
   41050:	003f3906 	br	40d38 <__alt_data_end+0xfffcfff8>
   41054:	01005504 	movi	r4,340
   41058:	20800436 	bltu	r4,r2,4106c <_malloc_r+0x774>
   4105c:	3804d3fa 	srli	r2,r7,15
   41060:	11001dc4 	addi	r4,r2,119
   41064:	210b883a 	add	r5,r4,r4
   41068:	003f6206 	br	40df4 <__alt_data_end+0xfffd00b4>
   4106c:	01015504 	movi	r4,1364
   41070:	20800436 	bltu	r4,r2,41084 <_malloc_r+0x78c>
   41074:	3804d4ba 	srli	r2,r7,18
   41078:	11001f04 	addi	r4,r2,124
   4107c:	210b883a 	add	r5,r4,r4
   41080:	003f5c06 	br	40df4 <__alt_data_end+0xfffd00b4>
   41084:	01403f04 	movi	r5,252
   41088:	01001f84 	movi	r4,126
   4108c:	003f5906 	br	40df4 <__alt_data_end+0xfffd00b4>
   41090:	98800117 	ldw	r2,4(r19)
   41094:	003fa906 	br	40f3c <__alt_data_end+0xfffd01fc>
   41098:	6007883a 	mov	r3,r12
   4109c:	003ea206 	br	40b28 <__alt_data_end+0xfffcfde8>

000410a0 <memchr>:
   410a0:	208000cc 	andi	r2,r4,3
   410a4:	280f883a 	mov	r7,r5
   410a8:	10003526 	beq	r2,zero,41180 <memchr+0xe0>
   410ac:	30bfffc4 	addi	r2,r6,-1
   410b0:	30001b26 	beq	r6,zero,41120 <memchr+0x80>
   410b4:	21800003 	ldbu	r6,0(r4)
   410b8:	28c03fcc 	andi	r3,r5,255
   410bc:	30c01a26 	beq	r6,r3,41128 <memchr+0x88>
   410c0:	180d883a 	mov	r6,r3
   410c4:	00000406 	br	410d8 <memchr+0x38>
   410c8:	10001526 	beq	r2,zero,41120 <memchr+0x80>
   410cc:	20c00003 	ldbu	r3,0(r4)
   410d0:	10bfffc4 	addi	r2,r2,-1
   410d4:	19801426 	beq	r3,r6,41128 <memchr+0x88>
   410d8:	21000044 	addi	r4,r4,1
   410dc:	20c000cc 	andi	r3,r4,3
   410e0:	183ff91e 	bne	r3,zero,410c8 <__alt_data_end+0xfffd0388>
   410e4:	024000c4 	movi	r9,3
   410e8:	48801136 	bltu	r9,r2,41130 <memchr+0x90>
   410ec:	10000c26 	beq	r2,zero,41120 <memchr+0x80>
   410f0:	20c00003 	ldbu	r3,0(r4)
   410f4:	29403fcc 	andi	r5,r5,255
   410f8:	19400b26 	beq	r3,r5,41128 <memchr+0x88>
   410fc:	20c00044 	addi	r3,r4,1
   41100:	2085883a 	add	r2,r4,r2
   41104:	39803fcc 	andi	r6,r7,255
   41108:	00000306 	br	41118 <memchr+0x78>
   4110c:	18c00044 	addi	r3,r3,1
   41110:	197fffc3 	ldbu	r5,-1(r3)
   41114:	29800426 	beq	r5,r6,41128 <memchr+0x88>
   41118:	1809883a 	mov	r4,r3
   4111c:	18bffb1e 	bne	r3,r2,4110c <__alt_data_end+0xfffd03cc>
   41120:	0005883a 	mov	r2,zero
   41124:	f800283a 	ret
   41128:	2005883a 	mov	r2,r4
   4112c:	f800283a 	ret
   41130:	28c03fcc 	andi	r3,r5,255
   41134:	1810923a 	slli	r8,r3,8
   41138:	02ffbff4 	movhi	r11,65279
   4113c:	02a02074 	movhi	r10,32897
   41140:	40c6b03a 	or	r3,r8,r3
   41144:	1810943a 	slli	r8,r3,16
   41148:	5affbfc4 	addi	r11,r11,-257
   4114c:	52a02004 	addi	r10,r10,-32640
   41150:	40d0b03a 	or	r8,r8,r3
   41154:	20c00017 	ldw	r3,0(r4)
   41158:	40c6f03a 	xor	r3,r8,r3
   4115c:	1acd883a 	add	r6,r3,r11
   41160:	00c6303a 	nor	r3,zero,r3
   41164:	30c6703a 	and	r3,r6,r3
   41168:	1a86703a 	and	r3,r3,r10
   4116c:	183fdf1e 	bne	r3,zero,410ec <__alt_data_end+0xfffd03ac>
   41170:	10bfff04 	addi	r2,r2,-4
   41174:	21000104 	addi	r4,r4,4
   41178:	48bff636 	bltu	r9,r2,41154 <__alt_data_end+0xfffd0414>
   4117c:	003fdb06 	br	410ec <__alt_data_end+0xfffd03ac>
   41180:	3005883a 	mov	r2,r6
   41184:	003fd706 	br	410e4 <__alt_data_end+0xfffd03a4>

00041188 <memcpy>:
   41188:	deffff04 	addi	sp,sp,-4
   4118c:	dc000015 	stw	r16,0(sp)
   41190:	00c003c4 	movi	r3,15
   41194:	2005883a 	mov	r2,r4
   41198:	1980432e 	bgeu	r3,r6,412a8 <memcpy+0x120>
   4119c:	2146b03a 	or	r3,r4,r5
   411a0:	18c000cc 	andi	r3,r3,3
   411a4:	1800421e 	bne	r3,zero,412b0 <memcpy+0x128>
   411a8:	343ffc04 	addi	r16,r6,-16
   411ac:	8020d13a 	srli	r16,r16,4
   411b0:	28c00104 	addi	r3,r5,4
   411b4:	23400104 	addi	r13,r4,4
   411b8:	801e913a 	slli	r15,r16,4
   411bc:	2b000204 	addi	r12,r5,8
   411c0:	22c00204 	addi	r11,r4,8
   411c4:	7bc00504 	addi	r15,r15,20
   411c8:	2a800304 	addi	r10,r5,12
   411cc:	22400304 	addi	r9,r4,12
   411d0:	2bdf883a 	add	r15,r5,r15
   411d4:	2811883a 	mov	r8,r5
   411d8:	200f883a 	mov	r7,r4
   411dc:	41000017 	ldw	r4,0(r8)
   411e0:	39c00404 	addi	r7,r7,16
   411e4:	18c00404 	addi	r3,r3,16
   411e8:	393ffc15 	stw	r4,-16(r7)
   411ec:	1bbffc17 	ldw	r14,-16(r3)
   411f0:	6b400404 	addi	r13,r13,16
   411f4:	5ac00404 	addi	r11,r11,16
   411f8:	6bbffc15 	stw	r14,-16(r13)
   411fc:	63800017 	ldw	r14,0(r12)
   41200:	4a400404 	addi	r9,r9,16
   41204:	42000404 	addi	r8,r8,16
   41208:	5bbffc15 	stw	r14,-16(r11)
   4120c:	53800017 	ldw	r14,0(r10)
   41210:	63000404 	addi	r12,r12,16
   41214:	52800404 	addi	r10,r10,16
   41218:	4bbffc15 	stw	r14,-16(r9)
   4121c:	1bffef1e 	bne	r3,r15,411dc <__alt_data_end+0xfffd049c>
   41220:	81c00044 	addi	r7,r16,1
   41224:	380e913a 	slli	r7,r7,4
   41228:	310003cc 	andi	r4,r6,15
   4122c:	02c000c4 	movi	r11,3
   41230:	11c7883a 	add	r3,r2,r7
   41234:	29cb883a 	add	r5,r5,r7
   41238:	59001f2e 	bgeu	r11,r4,412b8 <memcpy+0x130>
   4123c:	1813883a 	mov	r9,r3
   41240:	2811883a 	mov	r8,r5
   41244:	200f883a 	mov	r7,r4
   41248:	42800017 	ldw	r10,0(r8)
   4124c:	4a400104 	addi	r9,r9,4
   41250:	39ffff04 	addi	r7,r7,-4
   41254:	4abfff15 	stw	r10,-4(r9)
   41258:	42000104 	addi	r8,r8,4
   4125c:	59fffa36 	bltu	r11,r7,41248 <__alt_data_end+0xfffd0508>
   41260:	213fff04 	addi	r4,r4,-4
   41264:	2008d0ba 	srli	r4,r4,2
   41268:	318000cc 	andi	r6,r6,3
   4126c:	21000044 	addi	r4,r4,1
   41270:	2109883a 	add	r4,r4,r4
   41274:	2109883a 	add	r4,r4,r4
   41278:	1907883a 	add	r3,r3,r4
   4127c:	290b883a 	add	r5,r5,r4
   41280:	30000626 	beq	r6,zero,4129c <memcpy+0x114>
   41284:	198d883a 	add	r6,r3,r6
   41288:	29c00003 	ldbu	r7,0(r5)
   4128c:	18c00044 	addi	r3,r3,1
   41290:	29400044 	addi	r5,r5,1
   41294:	19ffffc5 	stb	r7,-1(r3)
   41298:	19bffb1e 	bne	r3,r6,41288 <__alt_data_end+0xfffd0548>
   4129c:	dc000017 	ldw	r16,0(sp)
   412a0:	dec00104 	addi	sp,sp,4
   412a4:	f800283a 	ret
   412a8:	2007883a 	mov	r3,r4
   412ac:	003ff406 	br	41280 <__alt_data_end+0xfffd0540>
   412b0:	2007883a 	mov	r3,r4
   412b4:	003ff306 	br	41284 <__alt_data_end+0xfffd0544>
   412b8:	200d883a 	mov	r6,r4
   412bc:	003ff006 	br	41280 <__alt_data_end+0xfffd0540>

000412c0 <memmove>:
   412c0:	2005883a 	mov	r2,r4
   412c4:	29000b2e 	bgeu	r5,r4,412f4 <memmove+0x34>
   412c8:	298f883a 	add	r7,r5,r6
   412cc:	21c0092e 	bgeu	r4,r7,412f4 <memmove+0x34>
   412d0:	2187883a 	add	r3,r4,r6
   412d4:	198bc83a 	sub	r5,r3,r6
   412d8:	30004b26 	beq	r6,zero,41408 <memmove+0x148>
   412dc:	39ffffc4 	addi	r7,r7,-1
   412e0:	39000003 	ldbu	r4,0(r7)
   412e4:	18ffffc4 	addi	r3,r3,-1
   412e8:	19000005 	stb	r4,0(r3)
   412ec:	197ffb1e 	bne	r3,r5,412dc <__alt_data_end+0xfffd059c>
   412f0:	f800283a 	ret
   412f4:	00c003c4 	movi	r3,15
   412f8:	1980412e 	bgeu	r3,r6,41400 <memmove+0x140>
   412fc:	1146b03a 	or	r3,r2,r5
   41300:	18c000cc 	andi	r3,r3,3
   41304:	1800411e 	bne	r3,zero,4140c <memmove+0x14c>
   41308:	33fffc04 	addi	r15,r6,-16
   4130c:	781ed13a 	srli	r15,r15,4
   41310:	28c00104 	addi	r3,r5,4
   41314:	13400104 	addi	r13,r2,4
   41318:	781c913a 	slli	r14,r15,4
   4131c:	2b000204 	addi	r12,r5,8
   41320:	12c00204 	addi	r11,r2,8
   41324:	73800504 	addi	r14,r14,20
   41328:	2a800304 	addi	r10,r5,12
   4132c:	12400304 	addi	r9,r2,12
   41330:	2b9d883a 	add	r14,r5,r14
   41334:	2811883a 	mov	r8,r5
   41338:	100f883a 	mov	r7,r2
   4133c:	41000017 	ldw	r4,0(r8)
   41340:	39c00404 	addi	r7,r7,16
   41344:	18c00404 	addi	r3,r3,16
   41348:	393ffc15 	stw	r4,-16(r7)
   4134c:	193ffc17 	ldw	r4,-16(r3)
   41350:	6b400404 	addi	r13,r13,16
   41354:	5ac00404 	addi	r11,r11,16
   41358:	693ffc15 	stw	r4,-16(r13)
   4135c:	61000017 	ldw	r4,0(r12)
   41360:	4a400404 	addi	r9,r9,16
   41364:	42000404 	addi	r8,r8,16
   41368:	593ffc15 	stw	r4,-16(r11)
   4136c:	51000017 	ldw	r4,0(r10)
   41370:	63000404 	addi	r12,r12,16
   41374:	52800404 	addi	r10,r10,16
   41378:	493ffc15 	stw	r4,-16(r9)
   4137c:	1bbfef1e 	bne	r3,r14,4133c <__alt_data_end+0xfffd05fc>
   41380:	79000044 	addi	r4,r15,1
   41384:	2008913a 	slli	r4,r4,4
   41388:	328003cc 	andi	r10,r6,15
   4138c:	02c000c4 	movi	r11,3
   41390:	1107883a 	add	r3,r2,r4
   41394:	290b883a 	add	r5,r5,r4
   41398:	5a801e2e 	bgeu	r11,r10,41414 <memmove+0x154>
   4139c:	1813883a 	mov	r9,r3
   413a0:	2811883a 	mov	r8,r5
   413a4:	500f883a 	mov	r7,r10
   413a8:	41000017 	ldw	r4,0(r8)
   413ac:	4a400104 	addi	r9,r9,4
   413b0:	39ffff04 	addi	r7,r7,-4
   413b4:	493fff15 	stw	r4,-4(r9)
   413b8:	42000104 	addi	r8,r8,4
   413bc:	59fffa36 	bltu	r11,r7,413a8 <__alt_data_end+0xfffd0668>
   413c0:	513fff04 	addi	r4,r10,-4
   413c4:	2008d0ba 	srli	r4,r4,2
   413c8:	318000cc 	andi	r6,r6,3
   413cc:	21000044 	addi	r4,r4,1
   413d0:	2109883a 	add	r4,r4,r4
   413d4:	2109883a 	add	r4,r4,r4
   413d8:	1907883a 	add	r3,r3,r4
   413dc:	290b883a 	add	r5,r5,r4
   413e0:	30000926 	beq	r6,zero,41408 <memmove+0x148>
   413e4:	198d883a 	add	r6,r3,r6
   413e8:	29c00003 	ldbu	r7,0(r5)
   413ec:	18c00044 	addi	r3,r3,1
   413f0:	29400044 	addi	r5,r5,1
   413f4:	19ffffc5 	stb	r7,-1(r3)
   413f8:	19bffb1e 	bne	r3,r6,413e8 <__alt_data_end+0xfffd06a8>
   413fc:	f800283a 	ret
   41400:	1007883a 	mov	r3,r2
   41404:	003ff606 	br	413e0 <__alt_data_end+0xfffd06a0>
   41408:	f800283a 	ret
   4140c:	1007883a 	mov	r3,r2
   41410:	003ff406 	br	413e4 <__alt_data_end+0xfffd06a4>
   41414:	500d883a 	mov	r6,r10
   41418:	003ff106 	br	413e0 <__alt_data_end+0xfffd06a0>

0004141c <_realloc_r>:
   4141c:	defff604 	addi	sp,sp,-40
   41420:	dcc00315 	stw	r19,12(sp)
   41424:	dc400115 	stw	r17,4(sp)
   41428:	dfc00915 	stw	ra,36(sp)
   4142c:	df000815 	stw	fp,32(sp)
   41430:	ddc00715 	stw	r23,28(sp)
   41434:	dd800615 	stw	r22,24(sp)
   41438:	dd400515 	stw	r21,20(sp)
   4143c:	dd000415 	stw	r20,16(sp)
   41440:	dc800215 	stw	r18,8(sp)
   41444:	dc000015 	stw	r16,0(sp)
   41448:	2827883a 	mov	r19,r5
   4144c:	3023883a 	mov	r17,r6
   41450:	2800bf26 	beq	r5,zero,41750 <_realloc_r+0x334>
   41454:	2025883a 	mov	r18,r4
   41458:	00434180 	call	43418 <__malloc_lock>
   4145c:	98ffff17 	ldw	r3,-4(r19)
   41460:	01bfff04 	movi	r6,-4
   41464:	890002c4 	addi	r4,r17,11
   41468:	01c00584 	movi	r7,22
   4146c:	9d7ffe04 	addi	r21,r19,-8
   41470:	19a0703a 	and	r16,r3,r6
   41474:	39003f2e 	bgeu	r7,r4,41574 <_realloc_r+0x158>
   41478:	053ffe04 	movi	r20,-8
   4147c:	2528703a 	and	r20,r4,r20
   41480:	a00f883a 	mov	r7,r20
   41484:	a0008216 	blt	r20,zero,41690 <_realloc_r+0x274>
   41488:	a4408136 	bltu	r20,r17,41690 <_realloc_r+0x274>
   4148c:	81c03c0e 	bge	r16,r7,41580 <_realloc_r+0x164>
   41490:	07000134 	movhi	fp,4
   41494:	e7165a04 	addi	fp,fp,22888
   41498:	e1000217 	ldw	r4,8(fp)
   4149c:	ac05883a 	add	r2,r21,r16
   414a0:	2080bf26 	beq	r4,r2,417a0 <_realloc_r+0x384>
   414a4:	11000117 	ldw	r4,4(r2)
   414a8:	023fff84 	movi	r8,-2
   414ac:	2210703a 	and	r8,r4,r8
   414b0:	1211883a 	add	r8,r2,r8
   414b4:	41400117 	ldw	r5,4(r8)
   414b8:	2940004c 	andi	r5,r5,1
   414bc:	28004a1e 	bne	r5,zero,415e8 <_realloc_r+0x1cc>
   414c0:	017fff04 	movi	r5,-4
   414c4:	2148703a 	and	r4,r4,r5
   414c8:	2409883a 	add	r4,r4,r16
   414cc:	21c0ad0e 	bge	r4,r7,41784 <_realloc_r+0x368>
   414d0:	18c0004c 	andi	r3,r3,1
   414d4:	18007f1e 	bne	r3,zero,416d4 <_realloc_r+0x2b8>
   414d8:	9dfffe17 	ldw	r23,-8(r19)
   414dc:	adefc83a 	sub	r23,r21,r23
   414e0:	bd800117 	ldw	r22,4(r23)
   414e4:	b14a703a 	and	r5,r22,r5
   414e8:	216d883a 	add	r22,r4,r5
   414ec:	b1c04516 	blt	r22,r7,41604 <_realloc_r+0x1e8>
   414f0:	10c00317 	ldw	r3,12(r2)
   414f4:	10800217 	ldw	r2,8(r2)
   414f8:	81bfff04 	addi	r6,r16,-4
   414fc:	bc400204 	addi	r17,r23,8
   41500:	10c00315 	stw	r3,12(r2)
   41504:	18800215 	stw	r2,8(r3)
   41508:	b9400217 	ldw	r5,8(r23)
   4150c:	b8c00317 	ldw	r3,12(r23)
   41510:	00800904 	movi	r2,36
   41514:	28c00315 	stw	r3,12(r5)
   41518:	19400215 	stw	r5,8(r3)
   4151c:	1180ef36 	bltu	r2,r6,418dc <_realloc_r+0x4c0>
   41520:	008004c4 	movi	r2,19
   41524:	1180da2e 	bgeu	r2,r6,41890 <_realloc_r+0x474>
   41528:	98800017 	ldw	r2,0(r19)
   4152c:	b8800215 	stw	r2,8(r23)
   41530:	98800117 	ldw	r2,4(r19)
   41534:	b8800315 	stw	r2,12(r23)
   41538:	008006c4 	movi	r2,27
   4153c:	1180fc2e 	bgeu	r2,r6,41930 <_realloc_r+0x514>
   41540:	98800217 	ldw	r2,8(r19)
   41544:	b8800415 	stw	r2,16(r23)
   41548:	98800317 	ldw	r2,12(r19)
   4154c:	b8800515 	stw	r2,20(r23)
   41550:	00800904 	movi	r2,36
   41554:	3080421e 	bne	r6,r2,41660 <_realloc_r+0x244>
   41558:	98800417 	ldw	r2,16(r19)
   4155c:	9cc00604 	addi	r19,r19,24
   41560:	b8c00804 	addi	r3,r23,32
   41564:	b8800615 	stw	r2,24(r23)
   41568:	98bfff17 	ldw	r2,-4(r19)
   4156c:	b8800715 	stw	r2,28(r23)
   41570:	00003d06 	br	41668 <_realloc_r+0x24c>
   41574:	01c00404 	movi	r7,16
   41578:	3829883a 	mov	r20,r7
   4157c:	003fc206 	br	41488 <__alt_data_end+0xfffd0748>
   41580:	9823883a 	mov	r17,r19
   41584:	850fc83a 	sub	r7,r16,r20
   41588:	008003c4 	movi	r2,15
   4158c:	18c0004c 	andi	r3,r3,1
   41590:	11c04336 	bltu	r2,r7,416a0 <_realloc_r+0x284>
   41594:	1c06b03a 	or	r3,r3,r16
   41598:	a8c00115 	stw	r3,4(r21)
   4159c:	ac21883a 	add	r16,r21,r16
   415a0:	80c00117 	ldw	r3,4(r16)
   415a4:	18c00054 	ori	r3,r3,1
   415a8:	80c00115 	stw	r3,4(r16)
   415ac:	9009883a 	mov	r4,r18
   415b0:	00434380 	call	43438 <__malloc_unlock>
   415b4:	8805883a 	mov	r2,r17
   415b8:	dfc00917 	ldw	ra,36(sp)
   415bc:	df000817 	ldw	fp,32(sp)
   415c0:	ddc00717 	ldw	r23,28(sp)
   415c4:	dd800617 	ldw	r22,24(sp)
   415c8:	dd400517 	ldw	r21,20(sp)
   415cc:	dd000417 	ldw	r20,16(sp)
   415d0:	dcc00317 	ldw	r19,12(sp)
   415d4:	dc800217 	ldw	r18,8(sp)
   415d8:	dc400117 	ldw	r17,4(sp)
   415dc:	dc000017 	ldw	r16,0(sp)
   415e0:	dec00a04 	addi	sp,sp,40
   415e4:	f800283a 	ret
   415e8:	18c0004c 	andi	r3,r3,1
   415ec:	1800391e 	bne	r3,zero,416d4 <_realloc_r+0x2b8>
   415f0:	9dfffe17 	ldw	r23,-8(r19)
   415f4:	00bfff04 	movi	r2,-4
   415f8:	adefc83a 	sub	r23,r21,r23
   415fc:	b9400117 	ldw	r5,4(r23)
   41600:	288a703a 	and	r5,r5,r2
   41604:	2c2d883a 	add	r22,r5,r16
   41608:	b1c03216 	blt	r22,r7,416d4 <_realloc_r+0x2b8>
   4160c:	b8800317 	ldw	r2,12(r23)
   41610:	b8c00217 	ldw	r3,8(r23)
   41614:	81bfff04 	addi	r6,r16,-4
   41618:	01000904 	movi	r4,36
   4161c:	18800315 	stw	r2,12(r3)
   41620:	10c00215 	stw	r3,8(r2)
   41624:	bc400204 	addi	r17,r23,8
   41628:	2180ac36 	bltu	r4,r6,418dc <_realloc_r+0x4c0>
   4162c:	008004c4 	movi	r2,19
   41630:	1180972e 	bgeu	r2,r6,41890 <_realloc_r+0x474>
   41634:	98800017 	ldw	r2,0(r19)
   41638:	b8800215 	stw	r2,8(r23)
   4163c:	98800117 	ldw	r2,4(r19)
   41640:	b8800315 	stw	r2,12(r23)
   41644:	008006c4 	movi	r2,27
   41648:	1180b92e 	bgeu	r2,r6,41930 <_realloc_r+0x514>
   4164c:	98800217 	ldw	r2,8(r19)
   41650:	b8800415 	stw	r2,16(r23)
   41654:	98800317 	ldw	r2,12(r19)
   41658:	b8800515 	stw	r2,20(r23)
   4165c:	313fbe26 	beq	r6,r4,41558 <__alt_data_end+0xfffd0818>
   41660:	b8c00604 	addi	r3,r23,24
   41664:	9cc00404 	addi	r19,r19,16
   41668:	98800017 	ldw	r2,0(r19)
   4166c:	b021883a 	mov	r16,r22
   41670:	b82b883a 	mov	r21,r23
   41674:	18800015 	stw	r2,0(r3)
   41678:	98800117 	ldw	r2,4(r19)
   4167c:	18800115 	stw	r2,4(r3)
   41680:	98800217 	ldw	r2,8(r19)
   41684:	18800215 	stw	r2,8(r3)
   41688:	b8c00117 	ldw	r3,4(r23)
   4168c:	003fbd06 	br	41584 <__alt_data_end+0xfffd0844>
   41690:	00800304 	movi	r2,12
   41694:	90800015 	stw	r2,0(r18)
   41698:	0005883a 	mov	r2,zero
   4169c:	003fc606 	br	415b8 <__alt_data_end+0xfffd0878>
   416a0:	1d06b03a 	or	r3,r3,r20
   416a4:	ad0b883a 	add	r5,r21,r20
   416a8:	a8c00115 	stw	r3,4(r21)
   416ac:	38800054 	ori	r2,r7,1
   416b0:	28800115 	stw	r2,4(r5)
   416b4:	29cf883a 	add	r7,r5,r7
   416b8:	38800117 	ldw	r2,4(r7)
   416bc:	9009883a 	mov	r4,r18
   416c0:	29400204 	addi	r5,r5,8
   416c4:	10800054 	ori	r2,r2,1
   416c8:	38800115 	stw	r2,4(r7)
   416cc:	00422700 	call	42270 <_free_r>
   416d0:	003fb606 	br	415ac <__alt_data_end+0xfffd086c>
   416d4:	880b883a 	mov	r5,r17
   416d8:	9009883a 	mov	r4,r18
   416dc:	00408f80 	call	408f8 <_malloc_r>
   416e0:	1023883a 	mov	r17,r2
   416e4:	1000aa26 	beq	r2,zero,41990 <_realloc_r+0x574>
   416e8:	98ffff17 	ldw	r3,-4(r19)
   416ec:	113ffe04 	addi	r4,r2,-8
   416f0:	00bfff84 	movi	r2,-2
   416f4:	1884703a 	and	r2,r3,r2
   416f8:	a885883a 	add	r2,r21,r2
   416fc:	20808626 	beq	r4,r2,41918 <_realloc_r+0x4fc>
   41700:	81bfff04 	addi	r6,r16,-4
   41704:	00800904 	movi	r2,36
   41708:	11807036 	bltu	r2,r6,418cc <_realloc_r+0x4b0>
   4170c:	00c004c4 	movi	r3,19
   41710:	19805636 	bltu	r3,r6,4186c <_realloc_r+0x450>
   41714:	8805883a 	mov	r2,r17
   41718:	9807883a 	mov	r3,r19
   4171c:	19000017 	ldw	r4,0(r3)
   41720:	11000015 	stw	r4,0(r2)
   41724:	19000117 	ldw	r4,4(r3)
   41728:	11000115 	stw	r4,4(r2)
   4172c:	18c00217 	ldw	r3,8(r3)
   41730:	10c00215 	stw	r3,8(r2)
   41734:	980b883a 	mov	r5,r19
   41738:	9009883a 	mov	r4,r18
   4173c:	00422700 	call	42270 <_free_r>
   41740:	9009883a 	mov	r4,r18
   41744:	00434380 	call	43438 <__malloc_unlock>
   41748:	8805883a 	mov	r2,r17
   4174c:	003f9a06 	br	415b8 <__alt_data_end+0xfffd0878>
   41750:	300b883a 	mov	r5,r6
   41754:	dfc00917 	ldw	ra,36(sp)
   41758:	df000817 	ldw	fp,32(sp)
   4175c:	ddc00717 	ldw	r23,28(sp)
   41760:	dd800617 	ldw	r22,24(sp)
   41764:	dd400517 	ldw	r21,20(sp)
   41768:	dd000417 	ldw	r20,16(sp)
   4176c:	dcc00317 	ldw	r19,12(sp)
   41770:	dc800217 	ldw	r18,8(sp)
   41774:	dc400117 	ldw	r17,4(sp)
   41778:	dc000017 	ldw	r16,0(sp)
   4177c:	dec00a04 	addi	sp,sp,40
   41780:	00408f81 	jmpi	408f8 <_malloc_r>
   41784:	11400317 	ldw	r5,12(r2)
   41788:	10800217 	ldw	r2,8(r2)
   4178c:	9823883a 	mov	r17,r19
   41790:	2021883a 	mov	r16,r4
   41794:	11400315 	stw	r5,12(r2)
   41798:	28800215 	stw	r2,8(r5)
   4179c:	003f7906 	br	41584 <__alt_data_end+0xfffd0844>
   417a0:	21000117 	ldw	r4,4(r4)
   417a4:	00bfff04 	movi	r2,-4
   417a8:	a1800404 	addi	r6,r20,16
   417ac:	2088703a 	and	r4,r4,r2
   417b0:	2409883a 	add	r4,r4,r16
   417b4:	2180380e 	bge	r4,r6,41898 <_realloc_r+0x47c>
   417b8:	18c0004c 	andi	r3,r3,1
   417bc:	183fc51e 	bne	r3,zero,416d4 <__alt_data_end+0xfffd0994>
   417c0:	9dfffe17 	ldw	r23,-8(r19)
   417c4:	adefc83a 	sub	r23,r21,r23
   417c8:	b9400117 	ldw	r5,4(r23)
   417cc:	288a703a 	and	r5,r5,r2
   417d0:	216d883a 	add	r22,r4,r5
   417d4:	b1bf8b16 	blt	r22,r6,41604 <__alt_data_end+0xfffd08c4>
   417d8:	b8800317 	ldw	r2,12(r23)
   417dc:	b8c00217 	ldw	r3,8(r23)
   417e0:	81bfff04 	addi	r6,r16,-4
   417e4:	01000904 	movi	r4,36
   417e8:	18800315 	stw	r2,12(r3)
   417ec:	10c00215 	stw	r3,8(r2)
   417f0:	bc400204 	addi	r17,r23,8
   417f4:	21805a36 	bltu	r4,r6,41960 <_realloc_r+0x544>
   417f8:	008004c4 	movi	r2,19
   417fc:	1180562e 	bgeu	r2,r6,41958 <_realloc_r+0x53c>
   41800:	98800017 	ldw	r2,0(r19)
   41804:	b8800215 	stw	r2,8(r23)
   41808:	98800117 	ldw	r2,4(r19)
   4180c:	b8800315 	stw	r2,12(r23)
   41810:	008006c4 	movi	r2,27
   41814:	11805636 	bltu	r2,r6,41970 <_realloc_r+0x554>
   41818:	b8800404 	addi	r2,r23,16
   4181c:	9cc00204 	addi	r19,r19,8
   41820:	98c00017 	ldw	r3,0(r19)
   41824:	10c00015 	stw	r3,0(r2)
   41828:	98c00117 	ldw	r3,4(r19)
   4182c:	10c00115 	stw	r3,4(r2)
   41830:	98c00217 	ldw	r3,8(r19)
   41834:	10c00215 	stw	r3,8(r2)
   41838:	bd07883a 	add	r3,r23,r20
   4183c:	b505c83a 	sub	r2,r22,r20
   41840:	e0c00215 	stw	r3,8(fp)
   41844:	10800054 	ori	r2,r2,1
   41848:	18800115 	stw	r2,4(r3)
   4184c:	b8800117 	ldw	r2,4(r23)
   41850:	9009883a 	mov	r4,r18
   41854:	1080004c 	andi	r2,r2,1
   41858:	a0a8b03a 	or	r20,r20,r2
   4185c:	bd000115 	stw	r20,4(r23)
   41860:	00434380 	call	43438 <__malloc_unlock>
   41864:	8805883a 	mov	r2,r17
   41868:	003f5306 	br	415b8 <__alt_data_end+0xfffd0878>
   4186c:	98c00017 	ldw	r3,0(r19)
   41870:	88c00015 	stw	r3,0(r17)
   41874:	98c00117 	ldw	r3,4(r19)
   41878:	88c00115 	stw	r3,4(r17)
   4187c:	00c006c4 	movi	r3,27
   41880:	19801d36 	bltu	r3,r6,418f8 <_realloc_r+0x4dc>
   41884:	88800204 	addi	r2,r17,8
   41888:	98c00204 	addi	r3,r19,8
   4188c:	003fa306 	br	4171c <__alt_data_end+0xfffd09dc>
   41890:	8807883a 	mov	r3,r17
   41894:	003f7406 	br	41668 <__alt_data_end+0xfffd0928>
   41898:	ad2b883a 	add	r21,r21,r20
   4189c:	2505c83a 	sub	r2,r4,r20
   418a0:	e5400215 	stw	r21,8(fp)
   418a4:	10800054 	ori	r2,r2,1
   418a8:	a8800115 	stw	r2,4(r21)
   418ac:	98bfff17 	ldw	r2,-4(r19)
   418b0:	9009883a 	mov	r4,r18
   418b4:	1080004c 	andi	r2,r2,1
   418b8:	a0a8b03a 	or	r20,r20,r2
   418bc:	9d3fff15 	stw	r20,-4(r19)
   418c0:	00434380 	call	43438 <__malloc_unlock>
   418c4:	9805883a 	mov	r2,r19
   418c8:	003f3b06 	br	415b8 <__alt_data_end+0xfffd0878>
   418cc:	8809883a 	mov	r4,r17
   418d0:	980b883a 	mov	r5,r19
   418d4:	00412c00 	call	412c0 <memmove>
   418d8:	003f9606 	br	41734 <__alt_data_end+0xfffd09f4>
   418dc:	8809883a 	mov	r4,r17
   418e0:	980b883a 	mov	r5,r19
   418e4:	00412c00 	call	412c0 <memmove>
   418e8:	b8c00117 	ldw	r3,4(r23)
   418ec:	b021883a 	mov	r16,r22
   418f0:	b82b883a 	mov	r21,r23
   418f4:	003f2306 	br	41584 <__alt_data_end+0xfffd0844>
   418f8:	98c00217 	ldw	r3,8(r19)
   418fc:	88c00215 	stw	r3,8(r17)
   41900:	98c00317 	ldw	r3,12(r19)
   41904:	88c00315 	stw	r3,12(r17)
   41908:	30800c26 	beq	r6,r2,4193c <_realloc_r+0x520>
   4190c:	88800404 	addi	r2,r17,16
   41910:	98c00404 	addi	r3,r19,16
   41914:	003f8106 	br	4171c <__alt_data_end+0xfffd09dc>
   41918:	893fff17 	ldw	r4,-4(r17)
   4191c:	00bfff04 	movi	r2,-4
   41920:	9823883a 	mov	r17,r19
   41924:	2084703a 	and	r2,r4,r2
   41928:	80a1883a 	add	r16,r16,r2
   4192c:	003f1506 	br	41584 <__alt_data_end+0xfffd0844>
   41930:	b8c00404 	addi	r3,r23,16
   41934:	9cc00204 	addi	r19,r19,8
   41938:	003f4b06 	br	41668 <__alt_data_end+0xfffd0928>
   4193c:	99000417 	ldw	r4,16(r19)
   41940:	88800604 	addi	r2,r17,24
   41944:	98c00604 	addi	r3,r19,24
   41948:	89000415 	stw	r4,16(r17)
   4194c:	99000517 	ldw	r4,20(r19)
   41950:	89000515 	stw	r4,20(r17)
   41954:	003f7106 	br	4171c <__alt_data_end+0xfffd09dc>
   41958:	8805883a 	mov	r2,r17
   4195c:	003fb006 	br	41820 <__alt_data_end+0xfffd0ae0>
   41960:	8809883a 	mov	r4,r17
   41964:	980b883a 	mov	r5,r19
   41968:	00412c00 	call	412c0 <memmove>
   4196c:	003fb206 	br	41838 <__alt_data_end+0xfffd0af8>
   41970:	98800217 	ldw	r2,8(r19)
   41974:	b8800415 	stw	r2,16(r23)
   41978:	98800317 	ldw	r2,12(r19)
   4197c:	b8800515 	stw	r2,20(r23)
   41980:	31000726 	beq	r6,r4,419a0 <_realloc_r+0x584>
   41984:	b8800604 	addi	r2,r23,24
   41988:	9cc00404 	addi	r19,r19,16
   4198c:	003fa406 	br	41820 <__alt_data_end+0xfffd0ae0>
   41990:	9009883a 	mov	r4,r18
   41994:	00434380 	call	43438 <__malloc_unlock>
   41998:	0005883a 	mov	r2,zero
   4199c:	003f0606 	br	415b8 <__alt_data_end+0xfffd0878>
   419a0:	98c00417 	ldw	r3,16(r19)
   419a4:	9cc00604 	addi	r19,r19,24
   419a8:	b8800804 	addi	r2,r23,32
   419ac:	b8c00615 	stw	r3,24(r23)
   419b0:	98ffff17 	ldw	r3,-4(r19)
   419b4:	b8c00715 	stw	r3,28(r23)
   419b8:	003f9906 	br	41820 <__alt_data_end+0xfffd0ae0>

000419bc <_sbrk_r>:
   419bc:	defffd04 	addi	sp,sp,-12
   419c0:	dc000015 	stw	r16,0(sp)
   419c4:	04000174 	movhi	r16,5
   419c8:	dc400115 	stw	r17,4(sp)
   419cc:	84228a04 	addi	r16,r16,-30168
   419d0:	2023883a 	mov	r17,r4
   419d4:	2809883a 	mov	r4,r5
   419d8:	dfc00215 	stw	ra,8(sp)
   419dc:	80000015 	stw	zero,0(r16)
   419e0:	004362c0 	call	4362c <sbrk>
   419e4:	00ffffc4 	movi	r3,-1
   419e8:	10c00526 	beq	r2,r3,41a00 <_sbrk_r+0x44>
   419ec:	dfc00217 	ldw	ra,8(sp)
   419f0:	dc400117 	ldw	r17,4(sp)
   419f4:	dc000017 	ldw	r16,0(sp)
   419f8:	dec00304 	addi	sp,sp,12
   419fc:	f800283a 	ret
   41a00:	80c00017 	ldw	r3,0(r16)
   41a04:	183ff926 	beq	r3,zero,419ec <__alt_data_end+0xfffd0cac>
   41a08:	88c00015 	stw	r3,0(r17)
   41a0c:	003ff706 	br	419ec <__alt_data_end+0xfffd0cac>

00041a10 <__swsetup_r>:
   41a10:	00800134 	movhi	r2,4
   41a14:	defffd04 	addi	sp,sp,-12
   41a18:	109bdf04 	addi	r2,r2,28540
   41a1c:	dc400115 	stw	r17,4(sp)
   41a20:	2023883a 	mov	r17,r4
   41a24:	11000017 	ldw	r4,0(r2)
   41a28:	dc000015 	stw	r16,0(sp)
   41a2c:	dfc00215 	stw	ra,8(sp)
   41a30:	2821883a 	mov	r16,r5
   41a34:	20000226 	beq	r4,zero,41a40 <__swsetup_r+0x30>
   41a38:	20c00e17 	ldw	r3,56(r4)
   41a3c:	18002e26 	beq	r3,zero,41af8 <__swsetup_r+0xe8>
   41a40:	8080030b 	ldhu	r2,12(r16)
   41a44:	10c0020c 	andi	r3,r2,8
   41a48:	100d883a 	mov	r6,r2
   41a4c:	18000f26 	beq	r3,zero,41a8c <__swsetup_r+0x7c>
   41a50:	80c00417 	ldw	r3,16(r16)
   41a54:	18001526 	beq	r3,zero,41aac <__swsetup_r+0x9c>
   41a58:	1100004c 	andi	r4,r2,1
   41a5c:	20001c1e 	bne	r4,zero,41ad0 <__swsetup_r+0xc0>
   41a60:	1080008c 	andi	r2,r2,2
   41a64:	1000261e 	bne	r2,zero,41b00 <__swsetup_r+0xf0>
   41a68:	80800517 	ldw	r2,20(r16)
   41a6c:	80800215 	stw	r2,8(r16)
   41a70:	18001c26 	beq	r3,zero,41ae4 <__swsetup_r+0xd4>
   41a74:	0005883a 	mov	r2,zero
   41a78:	dfc00217 	ldw	ra,8(sp)
   41a7c:	dc400117 	ldw	r17,4(sp)
   41a80:	dc000017 	ldw	r16,0(sp)
   41a84:	dec00304 	addi	sp,sp,12
   41a88:	f800283a 	ret
   41a8c:	3080040c 	andi	r2,r6,16
   41a90:	10001726 	beq	r2,zero,41af0 <__swsetup_r+0xe0>
   41a94:	3080010c 	andi	r2,r6,4
   41a98:	10001b1e 	bne	r2,zero,41b08 <__swsetup_r+0xf8>
   41a9c:	80c00417 	ldw	r3,16(r16)
   41aa0:	30800214 	ori	r2,r6,8
   41aa4:	8080030d 	sth	r2,12(r16)
   41aa8:	183feb1e 	bne	r3,zero,41a58 <__alt_data_end+0xfffd0d18>
   41aac:	1140a00c 	andi	r5,r2,640
   41ab0:	01008004 	movi	r4,512
   41ab4:	293fe826 	beq	r5,r4,41a58 <__alt_data_end+0xfffd0d18>
   41ab8:	8809883a 	mov	r4,r17
   41abc:	800b883a 	mov	r5,r16
   41ac0:	00426d00 	call	426d0 <__smakebuf_r>
   41ac4:	8080030b 	ldhu	r2,12(r16)
   41ac8:	80c00417 	ldw	r3,16(r16)
   41acc:	003fe206 	br	41a58 <__alt_data_end+0xfffd0d18>
   41ad0:	80800517 	ldw	r2,20(r16)
   41ad4:	80000215 	stw	zero,8(r16)
   41ad8:	0085c83a 	sub	r2,zero,r2
   41adc:	80800615 	stw	r2,24(r16)
   41ae0:	183fe41e 	bne	r3,zero,41a74 <__alt_data_end+0xfffd0d34>
   41ae4:	8080030b 	ldhu	r2,12(r16)
   41ae8:	1080200c 	andi	r2,r2,128
   41aec:	103fe226 	beq	r2,zero,41a78 <__alt_data_end+0xfffd0d38>
   41af0:	00bfffc4 	movi	r2,-1
   41af4:	003fe006 	br	41a78 <__alt_data_end+0xfffd0d38>
   41af8:	00420fc0 	call	420fc <__sinit>
   41afc:	003fd006 	br	41a40 <__alt_data_end+0xfffd0d00>
   41b00:	0005883a 	mov	r2,zero
   41b04:	003fd906 	br	41a6c <__alt_data_end+0xfffd0d2c>
   41b08:	81400c17 	ldw	r5,48(r16)
   41b0c:	28000626 	beq	r5,zero,41b28 <__swsetup_r+0x118>
   41b10:	80801004 	addi	r2,r16,64
   41b14:	28800326 	beq	r5,r2,41b24 <__swsetup_r+0x114>
   41b18:	8809883a 	mov	r4,r17
   41b1c:	00422700 	call	42270 <_free_r>
   41b20:	8180030b 	ldhu	r6,12(r16)
   41b24:	80000c15 	stw	zero,48(r16)
   41b28:	80c00417 	ldw	r3,16(r16)
   41b2c:	00bff6c4 	movi	r2,-37
   41b30:	118c703a 	and	r6,r2,r6
   41b34:	80000115 	stw	zero,4(r16)
   41b38:	80c00015 	stw	r3,0(r16)
   41b3c:	003fd806 	br	41aa0 <__alt_data_end+0xfffd0d60>

00041b40 <_fflush_r>:
   41b40:	defffb04 	addi	sp,sp,-20
   41b44:	dcc00315 	stw	r19,12(sp)
   41b48:	dc000015 	stw	r16,0(sp)
   41b4c:	dfc00415 	stw	ra,16(sp)
   41b50:	dc800215 	stw	r18,8(sp)
   41b54:	dc400115 	stw	r17,4(sp)
   41b58:	2027883a 	mov	r19,r4
   41b5c:	2821883a 	mov	r16,r5
   41b60:	20000226 	beq	r4,zero,41b6c <_fflush_r+0x2c>
   41b64:	20800e17 	ldw	r2,56(r4)
   41b68:	10005326 	beq	r2,zero,41cb8 <_fflush_r+0x178>
   41b6c:	8080030b 	ldhu	r2,12(r16)
   41b70:	10ffffcc 	andi	r3,r2,65535
   41b74:	18e0001c 	xori	r3,r3,32768
   41b78:	18e00004 	addi	r3,r3,-32768
   41b7c:	18002c26 	beq	r3,zero,41c30 <_fflush_r+0xf0>
   41b80:	10c0020c 	andi	r3,r2,8
   41b84:	1800321e 	bne	r3,zero,41c50 <_fflush_r+0x110>
   41b88:	80c00117 	ldw	r3,4(r16)
   41b8c:	10820014 	ori	r2,r2,2048
   41b90:	8080030d 	sth	r2,12(r16)
   41b94:	00c0570e 	bge	zero,r3,41cf4 <_fflush_r+0x1b4>
   41b98:	82000a17 	ldw	r8,40(r16)
   41b9c:	40002426 	beq	r8,zero,41c30 <_fflush_r+0xf0>
   41ba0:	9c400017 	ldw	r17,0(r19)
   41ba4:	10c4000c 	andi	r3,r2,4096
   41ba8:	98000015 	stw	zero,0(r19)
   41bac:	18004626 	beq	r3,zero,41cc8 <_fflush_r+0x188>
   41bb0:	81801417 	ldw	r6,80(r16)
   41bb4:	10c0010c 	andi	r3,r2,4
   41bb8:	18000626 	beq	r3,zero,41bd4 <_fflush_r+0x94>
   41bbc:	80c00117 	ldw	r3,4(r16)
   41bc0:	80800c17 	ldw	r2,48(r16)
   41bc4:	30cdc83a 	sub	r6,r6,r3
   41bc8:	10000226 	beq	r2,zero,41bd4 <_fflush_r+0x94>
   41bcc:	80800f17 	ldw	r2,60(r16)
   41bd0:	308dc83a 	sub	r6,r6,r2
   41bd4:	81400717 	ldw	r5,28(r16)
   41bd8:	9809883a 	mov	r4,r19
   41bdc:	000f883a 	mov	r7,zero
   41be0:	403ee83a 	callr	r8
   41be4:	00ffffc4 	movi	r3,-1
   41be8:	10c04526 	beq	r2,r3,41d00 <_fflush_r+0x1c0>
   41bec:	80c0030b 	ldhu	r3,12(r16)
   41bf0:	81000417 	ldw	r4,16(r16)
   41bf4:	80000115 	stw	zero,4(r16)
   41bf8:	197dffcc 	andi	r5,r3,63487
   41bfc:	8140030d 	sth	r5,12(r16)
   41c00:	81000015 	stw	r4,0(r16)
   41c04:	18c4000c 	andi	r3,r3,4096
   41c08:	18000126 	beq	r3,zero,41c10 <_fflush_r+0xd0>
   41c0c:	80801415 	stw	r2,80(r16)
   41c10:	81400c17 	ldw	r5,48(r16)
   41c14:	9c400015 	stw	r17,0(r19)
   41c18:	28000526 	beq	r5,zero,41c30 <_fflush_r+0xf0>
   41c1c:	80801004 	addi	r2,r16,64
   41c20:	28800226 	beq	r5,r2,41c2c <_fflush_r+0xec>
   41c24:	9809883a 	mov	r4,r19
   41c28:	00422700 	call	42270 <_free_r>
   41c2c:	80000c15 	stw	zero,48(r16)
   41c30:	0005883a 	mov	r2,zero
   41c34:	dfc00417 	ldw	ra,16(sp)
   41c38:	dcc00317 	ldw	r19,12(sp)
   41c3c:	dc800217 	ldw	r18,8(sp)
   41c40:	dc400117 	ldw	r17,4(sp)
   41c44:	dc000017 	ldw	r16,0(sp)
   41c48:	dec00504 	addi	sp,sp,20
   41c4c:	f800283a 	ret
   41c50:	84800417 	ldw	r18,16(r16)
   41c54:	903ff626 	beq	r18,zero,41c30 <__alt_data_end+0xfffd0ef0>
   41c58:	84400017 	ldw	r17,0(r16)
   41c5c:	108000cc 	andi	r2,r2,3
   41c60:	84800015 	stw	r18,0(r16)
   41c64:	8ca3c83a 	sub	r17,r17,r18
   41c68:	10001526 	beq	r2,zero,41cc0 <_fflush_r+0x180>
   41c6c:	0005883a 	mov	r2,zero
   41c70:	80800215 	stw	r2,8(r16)
   41c74:	04400316 	blt	zero,r17,41c84 <_fflush_r+0x144>
   41c78:	003fed06 	br	41c30 <__alt_data_end+0xfffd0ef0>
   41c7c:	90a5883a 	add	r18,r18,r2
   41c80:	047feb0e 	bge	zero,r17,41c30 <__alt_data_end+0xfffd0ef0>
   41c84:	80800917 	ldw	r2,36(r16)
   41c88:	81400717 	ldw	r5,28(r16)
   41c8c:	880f883a 	mov	r7,r17
   41c90:	900d883a 	mov	r6,r18
   41c94:	9809883a 	mov	r4,r19
   41c98:	103ee83a 	callr	r2
   41c9c:	88a3c83a 	sub	r17,r17,r2
   41ca0:	00bff616 	blt	zero,r2,41c7c <__alt_data_end+0xfffd0f3c>
   41ca4:	80c0030b 	ldhu	r3,12(r16)
   41ca8:	00bfffc4 	movi	r2,-1
   41cac:	18c01014 	ori	r3,r3,64
   41cb0:	80c0030d 	sth	r3,12(r16)
   41cb4:	003fdf06 	br	41c34 <__alt_data_end+0xfffd0ef4>
   41cb8:	00420fc0 	call	420fc <__sinit>
   41cbc:	003fab06 	br	41b6c <__alt_data_end+0xfffd0e2c>
   41cc0:	80800517 	ldw	r2,20(r16)
   41cc4:	003fea06 	br	41c70 <__alt_data_end+0xfffd0f30>
   41cc8:	81400717 	ldw	r5,28(r16)
   41ccc:	000d883a 	mov	r6,zero
   41cd0:	9809883a 	mov	r4,r19
   41cd4:	01c00044 	movi	r7,1
   41cd8:	403ee83a 	callr	r8
   41cdc:	100d883a 	mov	r6,r2
   41ce0:	00bfffc4 	movi	r2,-1
   41ce4:	30801326 	beq	r6,r2,41d34 <_fflush_r+0x1f4>
   41ce8:	8080030b 	ldhu	r2,12(r16)
   41cec:	82000a17 	ldw	r8,40(r16)
   41cf0:	003fb006 	br	41bb4 <__alt_data_end+0xfffd0e74>
   41cf4:	80c00f17 	ldw	r3,60(r16)
   41cf8:	00ffa716 	blt	zero,r3,41b98 <__alt_data_end+0xfffd0e58>
   41cfc:	003fcc06 	br	41c30 <__alt_data_end+0xfffd0ef0>
   41d00:	98c00017 	ldw	r3,0(r19)
   41d04:	183fb926 	beq	r3,zero,41bec <__alt_data_end+0xfffd0eac>
   41d08:	01000744 	movi	r4,29
   41d0c:	19000226 	beq	r3,r4,41d18 <_fflush_r+0x1d8>
   41d10:	01000584 	movi	r4,22
   41d14:	1900101e 	bne	r3,r4,41d58 <_fflush_r+0x218>
   41d18:	8080030b 	ldhu	r2,12(r16)
   41d1c:	80c00417 	ldw	r3,16(r16)
   41d20:	80000115 	stw	zero,4(r16)
   41d24:	10bdffcc 	andi	r2,r2,63487
   41d28:	8080030d 	sth	r2,12(r16)
   41d2c:	80c00015 	stw	r3,0(r16)
   41d30:	003fb706 	br	41c10 <__alt_data_end+0xfffd0ed0>
   41d34:	98800017 	ldw	r2,0(r19)
   41d38:	103feb26 	beq	r2,zero,41ce8 <__alt_data_end+0xfffd0fa8>
   41d3c:	00c00744 	movi	r3,29
   41d40:	10c00226 	beq	r2,r3,41d4c <_fflush_r+0x20c>
   41d44:	00c00584 	movi	r3,22
   41d48:	10ffd61e 	bne	r2,r3,41ca4 <__alt_data_end+0xfffd0f64>
   41d4c:	9c400015 	stw	r17,0(r19)
   41d50:	0005883a 	mov	r2,zero
   41d54:	003fb706 	br	41c34 <__alt_data_end+0xfffd0ef4>
   41d58:	80c0030b 	ldhu	r3,12(r16)
   41d5c:	18c01014 	ori	r3,r3,64
   41d60:	80c0030d 	sth	r3,12(r16)
   41d64:	003fb306 	br	41c34 <__alt_data_end+0xfffd0ef4>

00041d68 <fflush>:
   41d68:	20000526 	beq	r4,zero,41d80 <fflush+0x18>
   41d6c:	00800134 	movhi	r2,4
   41d70:	109bdf04 	addi	r2,r2,28540
   41d74:	200b883a 	mov	r5,r4
   41d78:	11000017 	ldw	r4,0(r2)
   41d7c:	0041b401 	jmpi	41b40 <_fflush_r>
   41d80:	00800134 	movhi	r2,4
   41d84:	109bde04 	addi	r2,r2,28536
   41d88:	11000017 	ldw	r4,0(r2)
   41d8c:	01400134 	movhi	r5,4
   41d90:	2946d004 	addi	r5,r5,6976
   41d94:	00426181 	jmpi	42618 <_fwalk_reent>

00041d98 <__fp_lock>:
   41d98:	0005883a 	mov	r2,zero
   41d9c:	f800283a 	ret

00041da0 <__fp_unlock>:
   41da0:	0005883a 	mov	r2,zero
   41da4:	f800283a 	ret

00041da8 <_cleanup_r>:
   41da8:	01400134 	movhi	r5,4
   41dac:	294b2604 	addi	r5,r5,11416
   41db0:	00425601 	jmpi	42560 <_fwalk>

00041db4 <__sinit.part.1>:
   41db4:	defff604 	addi	sp,sp,-40
   41db8:	00c00134 	movhi	r3,4
   41dbc:	dfc00915 	stw	ra,36(sp)
   41dc0:	df000815 	stw	fp,32(sp)
   41dc4:	ddc00715 	stw	r23,28(sp)
   41dc8:	dd800615 	stw	r22,24(sp)
   41dcc:	dd400515 	stw	r21,20(sp)
   41dd0:	dd000415 	stw	r20,16(sp)
   41dd4:	dcc00315 	stw	r19,12(sp)
   41dd8:	dc800215 	stw	r18,8(sp)
   41ddc:	dc400115 	stw	r17,4(sp)
   41de0:	dc000015 	stw	r16,0(sp)
   41de4:	18c76a04 	addi	r3,r3,7592
   41de8:	24000117 	ldw	r16,4(r4)
   41dec:	20c00f15 	stw	r3,60(r4)
   41df0:	07000044 	movi	fp,1
   41df4:	00c000c4 	movi	r3,3
   41df8:	2080bb04 	addi	r2,r4,748
   41dfc:	20c0b915 	stw	r3,740(r4)
   41e00:	27000e15 	stw	fp,56(r4)
   41e04:	2080ba15 	stw	r2,744(r4)
   41e08:	2000b815 	stw	zero,736(r4)
   41e0c:	05c00204 	movi	r23,8
   41e10:	00800104 	movi	r2,4
   41e14:	2025883a 	mov	r18,r4
   41e18:	b80d883a 	mov	r6,r23
   41e1c:	81001704 	addi	r4,r16,92
   41e20:	000b883a 	mov	r5,zero
   41e24:	80000015 	stw	zero,0(r16)
   41e28:	80000115 	stw	zero,4(r16)
   41e2c:	80000215 	stw	zero,8(r16)
   41e30:	8080030d 	sth	r2,12(r16)
   41e34:	80001915 	stw	zero,100(r16)
   41e38:	8000038d 	sth	zero,14(r16)
   41e3c:	80000415 	stw	zero,16(r16)
   41e40:	80000515 	stw	zero,20(r16)
   41e44:	80000615 	stw	zero,24(r16)
   41e48:	00428880 	call	42888 <memset>
   41e4c:	05800134 	movhi	r22,4
   41e50:	94400217 	ldw	r17,8(r18)
   41e54:	05400134 	movhi	r21,4
   41e58:	05000134 	movhi	r20,4
   41e5c:	04c00134 	movhi	r19,4
   41e60:	b58a6b04 	addi	r22,r22,10668
   41e64:	ad4a8204 	addi	r21,r21,10760
   41e68:	a50aa104 	addi	r20,r20,10884
   41e6c:	9ccab804 	addi	r19,r19,10976
   41e70:	85800815 	stw	r22,32(r16)
   41e74:	85400915 	stw	r21,36(r16)
   41e78:	85000a15 	stw	r20,40(r16)
   41e7c:	84c00b15 	stw	r19,44(r16)
   41e80:	84000715 	stw	r16,28(r16)
   41e84:	00800284 	movi	r2,10
   41e88:	89001704 	addi	r4,r17,92
   41e8c:	b80d883a 	mov	r6,r23
   41e90:	000b883a 	mov	r5,zero
   41e94:	88000015 	stw	zero,0(r17)
   41e98:	88000115 	stw	zero,4(r17)
   41e9c:	88000215 	stw	zero,8(r17)
   41ea0:	8880030d 	sth	r2,12(r17)
   41ea4:	88001915 	stw	zero,100(r17)
   41ea8:	8f00038d 	sth	fp,14(r17)
   41eac:	88000415 	stw	zero,16(r17)
   41eb0:	88000515 	stw	zero,20(r17)
   41eb4:	88000615 	stw	zero,24(r17)
   41eb8:	00428880 	call	42888 <memset>
   41ebc:	94000317 	ldw	r16,12(r18)
   41ec0:	00800484 	movi	r2,18
   41ec4:	8c400715 	stw	r17,28(r17)
   41ec8:	8d800815 	stw	r22,32(r17)
   41ecc:	8d400915 	stw	r21,36(r17)
   41ed0:	8d000a15 	stw	r20,40(r17)
   41ed4:	8cc00b15 	stw	r19,44(r17)
   41ed8:	8080030d 	sth	r2,12(r16)
   41edc:	00800084 	movi	r2,2
   41ee0:	80000015 	stw	zero,0(r16)
   41ee4:	80000115 	stw	zero,4(r16)
   41ee8:	80000215 	stw	zero,8(r16)
   41eec:	80001915 	stw	zero,100(r16)
   41ef0:	8080038d 	sth	r2,14(r16)
   41ef4:	80000415 	stw	zero,16(r16)
   41ef8:	80000515 	stw	zero,20(r16)
   41efc:	80000615 	stw	zero,24(r16)
   41f00:	81001704 	addi	r4,r16,92
   41f04:	000b883a 	mov	r5,zero
   41f08:	b80d883a 	mov	r6,r23
   41f0c:	00428880 	call	42888 <memset>
   41f10:	84000715 	stw	r16,28(r16)
   41f14:	85800815 	stw	r22,32(r16)
   41f18:	85400915 	stw	r21,36(r16)
   41f1c:	85000a15 	stw	r20,40(r16)
   41f20:	84c00b15 	stw	r19,44(r16)
   41f24:	dfc00917 	ldw	ra,36(sp)
   41f28:	df000817 	ldw	fp,32(sp)
   41f2c:	ddc00717 	ldw	r23,28(sp)
   41f30:	dd800617 	ldw	r22,24(sp)
   41f34:	dd400517 	ldw	r21,20(sp)
   41f38:	dd000417 	ldw	r20,16(sp)
   41f3c:	dcc00317 	ldw	r19,12(sp)
   41f40:	dc800217 	ldw	r18,8(sp)
   41f44:	dc400117 	ldw	r17,4(sp)
   41f48:	dc000017 	ldw	r16,0(sp)
   41f4c:	dec00a04 	addi	sp,sp,40
   41f50:	f800283a 	ret

00041f54 <__sfmoreglue>:
   41f54:	defffc04 	addi	sp,sp,-16
   41f58:	dc800215 	stw	r18,8(sp)
   41f5c:	2825883a 	mov	r18,r5
   41f60:	dc000015 	stw	r16,0(sp)
   41f64:	01401a04 	movi	r5,104
   41f68:	2021883a 	mov	r16,r4
   41f6c:	9009883a 	mov	r4,r18
   41f70:	dfc00315 	stw	ra,12(sp)
   41f74:	dc400115 	stw	r17,4(sp)
   41f78:	0042e100 	call	42e10 <__mulsi3>
   41f7c:	8009883a 	mov	r4,r16
   41f80:	11400304 	addi	r5,r2,12
   41f84:	1023883a 	mov	r17,r2
   41f88:	00408f80 	call	408f8 <_malloc_r>
   41f8c:	1021883a 	mov	r16,r2
   41f90:	10000726 	beq	r2,zero,41fb0 <__sfmoreglue+0x5c>
   41f94:	11000304 	addi	r4,r2,12
   41f98:	10000015 	stw	zero,0(r2)
   41f9c:	14800115 	stw	r18,4(r2)
   41fa0:	11000215 	stw	r4,8(r2)
   41fa4:	000b883a 	mov	r5,zero
   41fa8:	880d883a 	mov	r6,r17
   41fac:	00428880 	call	42888 <memset>
   41fb0:	8005883a 	mov	r2,r16
   41fb4:	dfc00317 	ldw	ra,12(sp)
   41fb8:	dc800217 	ldw	r18,8(sp)
   41fbc:	dc400117 	ldw	r17,4(sp)
   41fc0:	dc000017 	ldw	r16,0(sp)
   41fc4:	dec00404 	addi	sp,sp,16
   41fc8:	f800283a 	ret

00041fcc <__sfp>:
   41fcc:	00800134 	movhi	r2,4
   41fd0:	defffb04 	addi	sp,sp,-20
   41fd4:	109bde04 	addi	r2,r2,28536
   41fd8:	dc800215 	stw	r18,8(sp)
   41fdc:	14800017 	ldw	r18,0(r2)
   41fe0:	dcc00315 	stw	r19,12(sp)
   41fe4:	dfc00415 	stw	ra,16(sp)
   41fe8:	90800e17 	ldw	r2,56(r18)
   41fec:	dc400115 	stw	r17,4(sp)
   41ff0:	dc000015 	stw	r16,0(sp)
   41ff4:	2027883a 	mov	r19,r4
   41ff8:	1000021e 	bne	r2,zero,42004 <__sfp+0x38>
   41ffc:	9009883a 	mov	r4,r18
   42000:	0041db40 	call	41db4 <__sinit.part.1>
   42004:	9480b804 	addi	r18,r18,736
   42008:	047fffc4 	movi	r17,-1
   4200c:	91400117 	ldw	r5,4(r18)
   42010:	94000217 	ldw	r16,8(r18)
   42014:	297fffc4 	addi	r5,r5,-1
   42018:	28000a16 	blt	r5,zero,42044 <__sfp+0x78>
   4201c:	8080030f 	ldh	r2,12(r16)
   42020:	10000c26 	beq	r2,zero,42054 <__sfp+0x88>
   42024:	80c01d04 	addi	r3,r16,116
   42028:	00000206 	br	42034 <__sfp+0x68>
   4202c:	18bfe60f 	ldh	r2,-104(r3)
   42030:	10000826 	beq	r2,zero,42054 <__sfp+0x88>
   42034:	297fffc4 	addi	r5,r5,-1
   42038:	1c3ffd04 	addi	r16,r3,-12
   4203c:	18c01a04 	addi	r3,r3,104
   42040:	2c7ffa1e 	bne	r5,r17,4202c <__alt_data_end+0xfffd12ec>
   42044:	90800017 	ldw	r2,0(r18)
   42048:	10001d26 	beq	r2,zero,420c0 <__sfp+0xf4>
   4204c:	1025883a 	mov	r18,r2
   42050:	003fee06 	br	4200c <__alt_data_end+0xfffd12cc>
   42054:	00bfffc4 	movi	r2,-1
   42058:	8080038d 	sth	r2,14(r16)
   4205c:	00800044 	movi	r2,1
   42060:	8080030d 	sth	r2,12(r16)
   42064:	80001915 	stw	zero,100(r16)
   42068:	80000015 	stw	zero,0(r16)
   4206c:	80000215 	stw	zero,8(r16)
   42070:	80000115 	stw	zero,4(r16)
   42074:	80000415 	stw	zero,16(r16)
   42078:	80000515 	stw	zero,20(r16)
   4207c:	80000615 	stw	zero,24(r16)
   42080:	81001704 	addi	r4,r16,92
   42084:	000b883a 	mov	r5,zero
   42088:	01800204 	movi	r6,8
   4208c:	00428880 	call	42888 <memset>
   42090:	8005883a 	mov	r2,r16
   42094:	80000c15 	stw	zero,48(r16)
   42098:	80000d15 	stw	zero,52(r16)
   4209c:	80001115 	stw	zero,68(r16)
   420a0:	80001215 	stw	zero,72(r16)
   420a4:	dfc00417 	ldw	ra,16(sp)
   420a8:	dcc00317 	ldw	r19,12(sp)
   420ac:	dc800217 	ldw	r18,8(sp)
   420b0:	dc400117 	ldw	r17,4(sp)
   420b4:	dc000017 	ldw	r16,0(sp)
   420b8:	dec00504 	addi	sp,sp,20
   420bc:	f800283a 	ret
   420c0:	9809883a 	mov	r4,r19
   420c4:	01400104 	movi	r5,4
   420c8:	0041f540 	call	41f54 <__sfmoreglue>
   420cc:	90800015 	stw	r2,0(r18)
   420d0:	103fde1e 	bne	r2,zero,4204c <__alt_data_end+0xfffd130c>
   420d4:	00800304 	movi	r2,12
   420d8:	98800015 	stw	r2,0(r19)
   420dc:	0005883a 	mov	r2,zero
   420e0:	003ff006 	br	420a4 <__alt_data_end+0xfffd1364>

000420e4 <_cleanup>:
   420e4:	00800134 	movhi	r2,4
   420e8:	109bde04 	addi	r2,r2,28536
   420ec:	11000017 	ldw	r4,0(r2)
   420f0:	01400134 	movhi	r5,4
   420f4:	294b2604 	addi	r5,r5,11416
   420f8:	00425601 	jmpi	42560 <_fwalk>

000420fc <__sinit>:
   420fc:	20800e17 	ldw	r2,56(r4)
   42100:	10000126 	beq	r2,zero,42108 <__sinit+0xc>
   42104:	f800283a 	ret
   42108:	0041db41 	jmpi	41db4 <__sinit.part.1>

0004210c <__sfp_lock_acquire>:
   4210c:	f800283a 	ret

00042110 <__sfp_lock_release>:
   42110:	f800283a 	ret

00042114 <__sinit_lock_acquire>:
   42114:	f800283a 	ret

00042118 <__sinit_lock_release>:
   42118:	f800283a 	ret

0004211c <__fp_lock_all>:
   4211c:	00800134 	movhi	r2,4
   42120:	109bdf04 	addi	r2,r2,28540
   42124:	11000017 	ldw	r4,0(r2)
   42128:	01400134 	movhi	r5,4
   4212c:	29476604 	addi	r5,r5,7576
   42130:	00425601 	jmpi	42560 <_fwalk>

00042134 <__fp_unlock_all>:
   42134:	00800134 	movhi	r2,4
   42138:	109bdf04 	addi	r2,r2,28540
   4213c:	11000017 	ldw	r4,0(r2)
   42140:	01400134 	movhi	r5,4
   42144:	29476804 	addi	r5,r5,7584
   42148:	00425601 	jmpi	42560 <_fwalk>

0004214c <_malloc_trim_r>:
   4214c:	defffb04 	addi	sp,sp,-20
   42150:	dcc00315 	stw	r19,12(sp)
   42154:	04c00134 	movhi	r19,4
   42158:	dc800215 	stw	r18,8(sp)
   4215c:	dc400115 	stw	r17,4(sp)
   42160:	dc000015 	stw	r16,0(sp)
   42164:	dfc00415 	stw	ra,16(sp)
   42168:	2821883a 	mov	r16,r5
   4216c:	9cd65a04 	addi	r19,r19,22888
   42170:	2025883a 	mov	r18,r4
   42174:	00434180 	call	43418 <__malloc_lock>
   42178:	98800217 	ldw	r2,8(r19)
   4217c:	14400117 	ldw	r17,4(r2)
   42180:	00bfff04 	movi	r2,-4
   42184:	88a2703a 	and	r17,r17,r2
   42188:	8c21c83a 	sub	r16,r17,r16
   4218c:	8403fbc4 	addi	r16,r16,4079
   42190:	8020d33a 	srli	r16,r16,12
   42194:	0083ffc4 	movi	r2,4095
   42198:	843fffc4 	addi	r16,r16,-1
   4219c:	8020933a 	slli	r16,r16,12
   421a0:	1400060e 	bge	r2,r16,421bc <_malloc_trim_r+0x70>
   421a4:	9009883a 	mov	r4,r18
   421a8:	000b883a 	mov	r5,zero
   421ac:	00419bc0 	call	419bc <_sbrk_r>
   421b0:	98c00217 	ldw	r3,8(r19)
   421b4:	1c47883a 	add	r3,r3,r17
   421b8:	10c00a26 	beq	r2,r3,421e4 <_malloc_trim_r+0x98>
   421bc:	9009883a 	mov	r4,r18
   421c0:	00434380 	call	43438 <__malloc_unlock>
   421c4:	0005883a 	mov	r2,zero
   421c8:	dfc00417 	ldw	ra,16(sp)
   421cc:	dcc00317 	ldw	r19,12(sp)
   421d0:	dc800217 	ldw	r18,8(sp)
   421d4:	dc400117 	ldw	r17,4(sp)
   421d8:	dc000017 	ldw	r16,0(sp)
   421dc:	dec00504 	addi	sp,sp,20
   421e0:	f800283a 	ret
   421e4:	9009883a 	mov	r4,r18
   421e8:	040bc83a 	sub	r5,zero,r16
   421ec:	00419bc0 	call	419bc <_sbrk_r>
   421f0:	00ffffc4 	movi	r3,-1
   421f4:	10c00d26 	beq	r2,r3,4222c <_malloc_trim_r+0xe0>
   421f8:	00c00174 	movhi	r3,5
   421fc:	18e29104 	addi	r3,r3,-30140
   42200:	18800017 	ldw	r2,0(r3)
   42204:	99000217 	ldw	r4,8(r19)
   42208:	8c23c83a 	sub	r17,r17,r16
   4220c:	8c400054 	ori	r17,r17,1
   42210:	1421c83a 	sub	r16,r2,r16
   42214:	24400115 	stw	r17,4(r4)
   42218:	9009883a 	mov	r4,r18
   4221c:	1c000015 	stw	r16,0(r3)
   42220:	00434380 	call	43438 <__malloc_unlock>
   42224:	00800044 	movi	r2,1
   42228:	003fe706 	br	421c8 <__alt_data_end+0xfffd1488>
   4222c:	9009883a 	mov	r4,r18
   42230:	000b883a 	mov	r5,zero
   42234:	00419bc0 	call	419bc <_sbrk_r>
   42238:	99000217 	ldw	r4,8(r19)
   4223c:	014003c4 	movi	r5,15
   42240:	1107c83a 	sub	r3,r2,r4
   42244:	28ffdd0e 	bge	r5,r3,421bc <__alt_data_end+0xfffd147c>
   42248:	01400134 	movhi	r5,4
   4224c:	295be004 	addi	r5,r5,28544
   42250:	29400017 	ldw	r5,0(r5)
   42254:	18c00054 	ori	r3,r3,1
   42258:	20c00115 	stw	r3,4(r4)
   4225c:	00c00174 	movhi	r3,5
   42260:	1145c83a 	sub	r2,r2,r5
   42264:	18e29104 	addi	r3,r3,-30140
   42268:	18800015 	stw	r2,0(r3)
   4226c:	003fd306 	br	421bc <__alt_data_end+0xfffd147c>

00042270 <_free_r>:
   42270:	28004c26 	beq	r5,zero,423a4 <_free_r+0x134>
   42274:	defffd04 	addi	sp,sp,-12
   42278:	dc400115 	stw	r17,4(sp)
   4227c:	dc000015 	stw	r16,0(sp)
   42280:	2023883a 	mov	r17,r4
   42284:	2821883a 	mov	r16,r5
   42288:	dfc00215 	stw	ra,8(sp)
   4228c:	00434180 	call	43418 <__malloc_lock>
   42290:	813fff17 	ldw	r4,-4(r16)
   42294:	00bfff84 	movi	r2,-2
   42298:	02400134 	movhi	r9,4
   4229c:	81bffe04 	addi	r6,r16,-8
   422a0:	2084703a 	and	r2,r4,r2
   422a4:	4a565a04 	addi	r9,r9,22888
   422a8:	308b883a 	add	r5,r6,r2
   422ac:	2a000117 	ldw	r8,4(r5)
   422b0:	49c00217 	ldw	r7,8(r9)
   422b4:	00ffff04 	movi	r3,-4
   422b8:	40c6703a 	and	r3,r8,r3
   422bc:	39405326 	beq	r7,r5,4240c <_free_r+0x19c>
   422c0:	28c00115 	stw	r3,4(r5)
   422c4:	2100004c 	andi	r4,r4,1
   422c8:	2000091e 	bne	r4,zero,422f0 <_free_r+0x80>
   422cc:	81fffe17 	ldw	r7,-8(r16)
   422d0:	4a000204 	addi	r8,r9,8
   422d4:	31cdc83a 	sub	r6,r6,r7
   422d8:	31000217 	ldw	r4,8(r6)
   422dc:	11c5883a 	add	r2,r2,r7
   422e0:	22006126 	beq	r4,r8,42468 <_free_r+0x1f8>
   422e4:	31c00317 	ldw	r7,12(r6)
   422e8:	21c00315 	stw	r7,12(r4)
   422ec:	39000215 	stw	r4,8(r7)
   422f0:	28c9883a 	add	r4,r5,r3
   422f4:	21c00117 	ldw	r7,4(r4)
   422f8:	39c0004c 	andi	r7,r7,1
   422fc:	38000d1e 	bne	r7,zero,42334 <_free_r+0xc4>
   42300:	29000217 	ldw	r4,8(r5)
   42304:	10c5883a 	add	r2,r2,r3
   42308:	00c00134 	movhi	r3,4
   4230c:	18d65c04 	addi	r3,r3,22896
   42310:	20c07526 	beq	r4,r3,424e8 <_free_r+0x278>
   42314:	29c00317 	ldw	r7,12(r5)
   42318:	11400054 	ori	r5,r2,1
   4231c:	3087883a 	add	r3,r6,r2
   42320:	21c00315 	stw	r7,12(r4)
   42324:	39000215 	stw	r4,8(r7)
   42328:	31400115 	stw	r5,4(r6)
   4232c:	18800015 	stw	r2,0(r3)
   42330:	00000406 	br	42344 <_free_r+0xd4>
   42334:	10c00054 	ori	r3,r2,1
   42338:	30c00115 	stw	r3,4(r6)
   4233c:	3087883a 	add	r3,r6,r2
   42340:	18800015 	stw	r2,0(r3)
   42344:	00c07fc4 	movi	r3,511
   42348:	18801736 	bltu	r3,r2,423a8 <_free_r+0x138>
   4234c:	1004d0fa 	srli	r2,r2,3
   42350:	01400044 	movi	r5,1
   42354:	49000117 	ldw	r4,4(r9)
   42358:	1087883a 	add	r3,r2,r2
   4235c:	18c7883a 	add	r3,r3,r3
   42360:	1005d0ba 	srai	r2,r2,2
   42364:	18c7883a 	add	r3,r3,r3
   42368:	1a47883a 	add	r3,r3,r9
   4236c:	19c00217 	ldw	r7,8(r3)
   42370:	2884983a 	sll	r2,r5,r2
   42374:	30c00315 	stw	r3,12(r6)
   42378:	31c00215 	stw	r7,8(r6)
   4237c:	1104b03a 	or	r2,r2,r4
   42380:	19800215 	stw	r6,8(r3)
   42384:	48800115 	stw	r2,4(r9)
   42388:	39800315 	stw	r6,12(r7)
   4238c:	8809883a 	mov	r4,r17
   42390:	dfc00217 	ldw	ra,8(sp)
   42394:	dc400117 	ldw	r17,4(sp)
   42398:	dc000017 	ldw	r16,0(sp)
   4239c:	dec00304 	addi	sp,sp,12
   423a0:	00434381 	jmpi	43438 <__malloc_unlock>
   423a4:	f800283a 	ret
   423a8:	1006d27a 	srli	r3,r2,9
   423ac:	01000104 	movi	r4,4
   423b0:	20c04036 	bltu	r4,r3,424b4 <_free_r+0x244>
   423b4:	1006d1ba 	srli	r3,r2,6
   423b8:	19400e04 	addi	r5,r3,56
   423bc:	2947883a 	add	r3,r5,r5
   423c0:	18c7883a 	add	r3,r3,r3
   423c4:	18c7883a 	add	r3,r3,r3
   423c8:	1a49883a 	add	r4,r3,r9
   423cc:	20c00217 	ldw	r3,8(r4)
   423d0:	01c00134 	movhi	r7,4
   423d4:	39d65a04 	addi	r7,r7,22888
   423d8:	19003b26 	beq	r3,r4,424c8 <_free_r+0x258>
   423dc:	01ffff04 	movi	r7,-4
   423e0:	19400117 	ldw	r5,4(r3)
   423e4:	29ca703a 	and	r5,r5,r7
   423e8:	1140022e 	bgeu	r2,r5,423f4 <_free_r+0x184>
   423ec:	18c00217 	ldw	r3,8(r3)
   423f0:	20fffb1e 	bne	r4,r3,423e0 <__alt_data_end+0xfffd16a0>
   423f4:	18800317 	ldw	r2,12(r3)
   423f8:	30800315 	stw	r2,12(r6)
   423fc:	30c00215 	stw	r3,8(r6)
   42400:	11800215 	stw	r6,8(r2)
   42404:	19800315 	stw	r6,12(r3)
   42408:	003fe006 	br	4238c <__alt_data_end+0xfffd164c>
   4240c:	2100004c 	andi	r4,r4,1
   42410:	1885883a 	add	r2,r3,r2
   42414:	2000071e 	bne	r4,zero,42434 <_free_r+0x1c4>
   42418:	817ffe17 	ldw	r5,-8(r16)
   4241c:	314dc83a 	sub	r6,r6,r5
   42420:	30c00317 	ldw	r3,12(r6)
   42424:	31000217 	ldw	r4,8(r6)
   42428:	1145883a 	add	r2,r2,r5
   4242c:	20c00315 	stw	r3,12(r4)
   42430:	19000215 	stw	r4,8(r3)
   42434:	10c00054 	ori	r3,r2,1
   42438:	30c00115 	stw	r3,4(r6)
   4243c:	00c00134 	movhi	r3,4
   42440:	18dbe104 	addi	r3,r3,28548
   42444:	18c00017 	ldw	r3,0(r3)
   42448:	49800215 	stw	r6,8(r9)
   4244c:	10ffcf36 	bltu	r2,r3,4238c <__alt_data_end+0xfffd164c>
   42450:	00800174 	movhi	r2,5
   42454:	10a28904 	addi	r2,r2,-30172
   42458:	11400017 	ldw	r5,0(r2)
   4245c:	8809883a 	mov	r4,r17
   42460:	004214c0 	call	4214c <_malloc_trim_r>
   42464:	003fc906 	br	4238c <__alt_data_end+0xfffd164c>
   42468:	28c9883a 	add	r4,r5,r3
   4246c:	21000117 	ldw	r4,4(r4)
   42470:	2100004c 	andi	r4,r4,1
   42474:	20000a1e 	bne	r4,zero,424a0 <_free_r+0x230>
   42478:	29000317 	ldw	r4,12(r5)
   4247c:	29400217 	ldw	r5,8(r5)
   42480:	10c5883a 	add	r2,r2,r3
   42484:	10c00054 	ori	r3,r2,1
   42488:	29000315 	stw	r4,12(r5)
   4248c:	21400215 	stw	r5,8(r4)
   42490:	30c00115 	stw	r3,4(r6)
   42494:	308d883a 	add	r6,r6,r2
   42498:	30800015 	stw	r2,0(r6)
   4249c:	003fbb06 	br	4238c <__alt_data_end+0xfffd164c>
   424a0:	10c00054 	ori	r3,r2,1
   424a4:	30c00115 	stw	r3,4(r6)
   424a8:	308d883a 	add	r6,r6,r2
   424ac:	30800015 	stw	r2,0(r6)
   424b0:	003fb606 	br	4238c <__alt_data_end+0xfffd164c>
   424b4:	01000504 	movi	r4,20
   424b8:	20c01436 	bltu	r4,r3,4250c <_free_r+0x29c>
   424bc:	194016c4 	addi	r5,r3,91
   424c0:	2947883a 	add	r3,r5,r5
   424c4:	003fbe06 	br	423c0 <__alt_data_end+0xfffd1680>
   424c8:	280bd0ba 	srai	r5,r5,2
   424cc:	00800044 	movi	r2,1
   424d0:	39000117 	ldw	r4,4(r7)
   424d4:	114a983a 	sll	r5,r2,r5
   424d8:	1805883a 	mov	r2,r3
   424dc:	2908b03a 	or	r4,r5,r4
   424e0:	39000115 	stw	r4,4(r7)
   424e4:	003fc406 	br	423f8 <__alt_data_end+0xfffd16b8>
   424e8:	49800515 	stw	r6,20(r9)
   424ec:	49800415 	stw	r6,16(r9)
   424f0:	10c00054 	ori	r3,r2,1
   424f4:	31000315 	stw	r4,12(r6)
   424f8:	31000215 	stw	r4,8(r6)
   424fc:	30c00115 	stw	r3,4(r6)
   42500:	308d883a 	add	r6,r6,r2
   42504:	30800015 	stw	r2,0(r6)
   42508:	003fa006 	br	4238c <__alt_data_end+0xfffd164c>
   4250c:	01001504 	movi	r4,84
   42510:	20c00436 	bltu	r4,r3,42524 <_free_r+0x2b4>
   42514:	1006d33a 	srli	r3,r2,12
   42518:	19401b84 	addi	r5,r3,110
   4251c:	2947883a 	add	r3,r5,r5
   42520:	003fa706 	br	423c0 <__alt_data_end+0xfffd1680>
   42524:	01005504 	movi	r4,340
   42528:	20c00436 	bltu	r4,r3,4253c <_free_r+0x2cc>
   4252c:	1006d3fa 	srli	r3,r2,15
   42530:	19401dc4 	addi	r5,r3,119
   42534:	2947883a 	add	r3,r5,r5
   42538:	003fa106 	br	423c0 <__alt_data_end+0xfffd1680>
   4253c:	01015504 	movi	r4,1364
   42540:	20c00436 	bltu	r4,r3,42554 <_free_r+0x2e4>
   42544:	1006d4ba 	srli	r3,r2,18
   42548:	19401f04 	addi	r5,r3,124
   4254c:	2947883a 	add	r3,r5,r5
   42550:	003f9b06 	br	423c0 <__alt_data_end+0xfffd1680>
   42554:	00c03f04 	movi	r3,252
   42558:	01401f84 	movi	r5,126
   4255c:	003f9806 	br	423c0 <__alt_data_end+0xfffd1680>

00042560 <_fwalk>:
   42560:	defff804 	addi	sp,sp,-32
   42564:	dd400515 	stw	r21,20(sp)
   42568:	2540b804 	addi	r21,r4,736
   4256c:	dd800615 	stw	r22,24(sp)
   42570:	dd000415 	stw	r20,16(sp)
   42574:	dfc00715 	stw	ra,28(sp)
   42578:	dcc00315 	stw	r19,12(sp)
   4257c:	dc800215 	stw	r18,8(sp)
   42580:	dc400115 	stw	r17,4(sp)
   42584:	dc000015 	stw	r16,0(sp)
   42588:	2829883a 	mov	r20,r5
   4258c:	002d883a 	mov	r22,zero
   42590:	004210c0 	call	4210c <__sfp_lock_acquire>
   42594:	a8001426 	beq	r21,zero,425e8 <_fwalk+0x88>
   42598:	04ffffc4 	movi	r19,-1
   4259c:	ac400117 	ldw	r17,4(r21)
   425a0:	ac800217 	ldw	r18,8(r21)
   425a4:	8c7fffc4 	addi	r17,r17,-1
   425a8:	88000d16 	blt	r17,zero,425e0 <_fwalk+0x80>
   425ac:	94000304 	addi	r16,r18,12
   425b0:	94800384 	addi	r18,r18,14
   425b4:	80c0000f 	ldh	r3,0(r16)
   425b8:	8c7fffc4 	addi	r17,r17,-1
   425bc:	813ffd04 	addi	r4,r16,-12
   425c0:	18000426 	beq	r3,zero,425d4 <_fwalk+0x74>
   425c4:	90c0000f 	ldh	r3,0(r18)
   425c8:	1cc00226 	beq	r3,r19,425d4 <_fwalk+0x74>
   425cc:	a03ee83a 	callr	r20
   425d0:	b0acb03a 	or	r22,r22,r2
   425d4:	84001a04 	addi	r16,r16,104
   425d8:	94801a04 	addi	r18,r18,104
   425dc:	8cfff51e 	bne	r17,r19,425b4 <__alt_data_end+0xfffd1874>
   425e0:	ad400017 	ldw	r21,0(r21)
   425e4:	a83fed1e 	bne	r21,zero,4259c <__alt_data_end+0xfffd185c>
   425e8:	00421100 	call	42110 <__sfp_lock_release>
   425ec:	b005883a 	mov	r2,r22
   425f0:	dfc00717 	ldw	ra,28(sp)
   425f4:	dd800617 	ldw	r22,24(sp)
   425f8:	dd400517 	ldw	r21,20(sp)
   425fc:	dd000417 	ldw	r20,16(sp)
   42600:	dcc00317 	ldw	r19,12(sp)
   42604:	dc800217 	ldw	r18,8(sp)
   42608:	dc400117 	ldw	r17,4(sp)
   4260c:	dc000017 	ldw	r16,0(sp)
   42610:	dec00804 	addi	sp,sp,32
   42614:	f800283a 	ret

00042618 <_fwalk_reent>:
   42618:	defff804 	addi	sp,sp,-32
   4261c:	dd400515 	stw	r21,20(sp)
   42620:	2540b804 	addi	r21,r4,736
   42624:	dd800615 	stw	r22,24(sp)
   42628:	dd000415 	stw	r20,16(sp)
   4262c:	dcc00315 	stw	r19,12(sp)
   42630:	dfc00715 	stw	ra,28(sp)
   42634:	dc800215 	stw	r18,8(sp)
   42638:	dc400115 	stw	r17,4(sp)
   4263c:	dc000015 	stw	r16,0(sp)
   42640:	2027883a 	mov	r19,r4
   42644:	2829883a 	mov	r20,r5
   42648:	002d883a 	mov	r22,zero
   4264c:	004210c0 	call	4210c <__sfp_lock_acquire>
   42650:	a8001326 	beq	r21,zero,426a0 <_fwalk_reent+0x88>
   42654:	04bfffc4 	movi	r18,-1
   42658:	ac400117 	ldw	r17,4(r21)
   4265c:	ac000217 	ldw	r16,8(r21)
   42660:	8c7fffc4 	addi	r17,r17,-1
   42664:	88000c16 	blt	r17,zero,42698 <_fwalk_reent+0x80>
   42668:	84000304 	addi	r16,r16,12
   4266c:	80c0000f 	ldh	r3,0(r16)
   42670:	8c7fffc4 	addi	r17,r17,-1
   42674:	817ffd04 	addi	r5,r16,-12
   42678:	18000526 	beq	r3,zero,42690 <_fwalk_reent+0x78>
   4267c:	80c0008f 	ldh	r3,2(r16)
   42680:	9809883a 	mov	r4,r19
   42684:	1c800226 	beq	r3,r18,42690 <_fwalk_reent+0x78>
   42688:	a03ee83a 	callr	r20
   4268c:	b0acb03a 	or	r22,r22,r2
   42690:	84001a04 	addi	r16,r16,104
   42694:	8cbff51e 	bne	r17,r18,4266c <__alt_data_end+0xfffd192c>
   42698:	ad400017 	ldw	r21,0(r21)
   4269c:	a83fee1e 	bne	r21,zero,42658 <__alt_data_end+0xfffd1918>
   426a0:	00421100 	call	42110 <__sfp_lock_release>
   426a4:	b005883a 	mov	r2,r22
   426a8:	dfc00717 	ldw	ra,28(sp)
   426ac:	dd800617 	ldw	r22,24(sp)
   426b0:	dd400517 	ldw	r21,20(sp)
   426b4:	dd000417 	ldw	r20,16(sp)
   426b8:	dcc00317 	ldw	r19,12(sp)
   426bc:	dc800217 	ldw	r18,8(sp)
   426c0:	dc400117 	ldw	r17,4(sp)
   426c4:	dc000017 	ldw	r16,0(sp)
   426c8:	dec00804 	addi	sp,sp,32
   426cc:	f800283a 	ret

000426d0 <__smakebuf_r>:
   426d0:	2880030b 	ldhu	r2,12(r5)
   426d4:	10c0008c 	andi	r3,r2,2
   426d8:	1800401e 	bne	r3,zero,427dc <__smakebuf_r+0x10c>
   426dc:	deffec04 	addi	sp,sp,-80
   426e0:	dc000f15 	stw	r16,60(sp)
   426e4:	2821883a 	mov	r16,r5
   426e8:	2940038f 	ldh	r5,14(r5)
   426ec:	dc401015 	stw	r17,64(sp)
   426f0:	dfc01315 	stw	ra,76(sp)
   426f4:	dcc01215 	stw	r19,72(sp)
   426f8:	dc801115 	stw	r18,68(sp)
   426fc:	2023883a 	mov	r17,r4
   42700:	28001b16 	blt	r5,zero,42770 <__smakebuf_r+0xa0>
   42704:	d80d883a 	mov	r6,sp
   42708:	0042cac0 	call	42cac <_fstat_r>
   4270c:	10001716 	blt	r2,zero,4276c <__smakebuf_r+0x9c>
   42710:	d8800117 	ldw	r2,4(sp)
   42714:	00e00014 	movui	r3,32768
   42718:	10bc000c 	andi	r2,r2,61440
   4271c:	10c03726 	beq	r2,r3,427fc <__smakebuf_r+0x12c>
   42720:	80c0030b 	ldhu	r3,12(r16)
   42724:	18c20014 	ori	r3,r3,2048
   42728:	80c0030d 	sth	r3,12(r16)
   4272c:	00c80004 	movi	r3,8192
   42730:	10c03c1e 	bne	r2,r3,42824 <__smakebuf_r+0x154>
   42734:	8140038f 	ldh	r5,14(r16)
   42738:	8809883a 	mov	r4,r17
   4273c:	0042d040 	call	42d04 <_isatty_r>
   42740:	10004e26 	beq	r2,zero,4287c <__smakebuf_r+0x1ac>
   42744:	8080030b 	ldhu	r2,12(r16)
   42748:	04c00044 	movi	r19,1
   4274c:	80c010c4 	addi	r3,r16,67
   42750:	14c4b03a 	or	r2,r2,r19
   42754:	8080030d 	sth	r2,12(r16)
   42758:	80c00015 	stw	r3,0(r16)
   4275c:	80c00415 	stw	r3,16(r16)
   42760:	84c00515 	stw	r19,20(r16)
   42764:	04810004 	movi	r18,1024
   42768:	00000706 	br	42788 <__smakebuf_r+0xb8>
   4276c:	8080030b 	ldhu	r2,12(r16)
   42770:	10c0200c 	andi	r3,r2,128
   42774:	18001f1e 	bne	r3,zero,427f4 <__smakebuf_r+0x124>
   42778:	04810004 	movi	r18,1024
   4277c:	10820014 	ori	r2,r2,2048
   42780:	8080030d 	sth	r2,12(r16)
   42784:	0027883a 	mov	r19,zero
   42788:	8809883a 	mov	r4,r17
   4278c:	900b883a 	mov	r5,r18
   42790:	00408f80 	call	408f8 <_malloc_r>
   42794:	10002e26 	beq	r2,zero,42850 <__smakebuf_r+0x180>
   42798:	80c0030b 	ldhu	r3,12(r16)
   4279c:	01000134 	movhi	r4,4
   427a0:	21076a04 	addi	r4,r4,7592
   427a4:	89000f15 	stw	r4,60(r17)
   427a8:	18c02014 	ori	r3,r3,128
   427ac:	80c0030d 	sth	r3,12(r16)
   427b0:	80800015 	stw	r2,0(r16)
   427b4:	80800415 	stw	r2,16(r16)
   427b8:	84800515 	stw	r18,20(r16)
   427bc:	98001c1e 	bne	r19,zero,42830 <__smakebuf_r+0x160>
   427c0:	dfc01317 	ldw	ra,76(sp)
   427c4:	dcc01217 	ldw	r19,72(sp)
   427c8:	dc801117 	ldw	r18,68(sp)
   427cc:	dc401017 	ldw	r17,64(sp)
   427d0:	dc000f17 	ldw	r16,60(sp)
   427d4:	dec01404 	addi	sp,sp,80
   427d8:	f800283a 	ret
   427dc:	288010c4 	addi	r2,r5,67
   427e0:	28800015 	stw	r2,0(r5)
   427e4:	28800415 	stw	r2,16(r5)
   427e8:	00800044 	movi	r2,1
   427ec:	28800515 	stw	r2,20(r5)
   427f0:	f800283a 	ret
   427f4:	04801004 	movi	r18,64
   427f8:	003fe006 	br	4277c <__alt_data_end+0xfffd1a3c>
   427fc:	81000a17 	ldw	r4,40(r16)
   42800:	00c00134 	movhi	r3,4
   42804:	18caa104 	addi	r3,r3,10884
   42808:	20ffc51e 	bne	r4,r3,42720 <__alt_data_end+0xfffd19e0>
   4280c:	80c0030b 	ldhu	r3,12(r16)
   42810:	01010004 	movi	r4,1024
   42814:	81001315 	stw	r4,76(r16)
   42818:	1906b03a 	or	r3,r3,r4
   4281c:	80c0030d 	sth	r3,12(r16)
   42820:	003fc206 	br	4272c <__alt_data_end+0xfffd19ec>
   42824:	0027883a 	mov	r19,zero
   42828:	04810004 	movi	r18,1024
   4282c:	003fd606 	br	42788 <__alt_data_end+0xfffd1a48>
   42830:	8140038f 	ldh	r5,14(r16)
   42834:	8809883a 	mov	r4,r17
   42838:	0042d040 	call	42d04 <_isatty_r>
   4283c:	103fe026 	beq	r2,zero,427c0 <__alt_data_end+0xfffd1a80>
   42840:	8080030b 	ldhu	r2,12(r16)
   42844:	10800054 	ori	r2,r2,1
   42848:	8080030d 	sth	r2,12(r16)
   4284c:	003fdc06 	br	427c0 <__alt_data_end+0xfffd1a80>
   42850:	8080030b 	ldhu	r2,12(r16)
   42854:	10c0800c 	andi	r3,r2,512
   42858:	183fd91e 	bne	r3,zero,427c0 <__alt_data_end+0xfffd1a80>
   4285c:	10800094 	ori	r2,r2,2
   42860:	80c010c4 	addi	r3,r16,67
   42864:	8080030d 	sth	r2,12(r16)
   42868:	00800044 	movi	r2,1
   4286c:	80c00015 	stw	r3,0(r16)
   42870:	80c00415 	stw	r3,16(r16)
   42874:	80800515 	stw	r2,20(r16)
   42878:	003fd106 	br	427c0 <__alt_data_end+0xfffd1a80>
   4287c:	04c00044 	movi	r19,1
   42880:	04810004 	movi	r18,1024
   42884:	003fc006 	br	42788 <__alt_data_end+0xfffd1a48>

00042888 <memset>:
   42888:	20c000cc 	andi	r3,r4,3
   4288c:	2005883a 	mov	r2,r4
   42890:	18004326 	beq	r3,zero,429a0 <memset+0x118>
   42894:	31ffffc4 	addi	r7,r6,-1
   42898:	30004026 	beq	r6,zero,4299c <memset+0x114>
   4289c:	2813883a 	mov	r9,r5
   428a0:	200d883a 	mov	r6,r4
   428a4:	2007883a 	mov	r3,r4
   428a8:	00000406 	br	428bc <memset+0x34>
   428ac:	3a3fffc4 	addi	r8,r7,-1
   428b0:	31800044 	addi	r6,r6,1
   428b4:	38003926 	beq	r7,zero,4299c <memset+0x114>
   428b8:	400f883a 	mov	r7,r8
   428bc:	18c00044 	addi	r3,r3,1
   428c0:	32400005 	stb	r9,0(r6)
   428c4:	1a0000cc 	andi	r8,r3,3
   428c8:	403ff81e 	bne	r8,zero,428ac <__alt_data_end+0xfffd1b6c>
   428cc:	010000c4 	movi	r4,3
   428d0:	21c02d2e 	bgeu	r4,r7,42988 <memset+0x100>
   428d4:	29803fcc 	andi	r6,r5,255
   428d8:	3008923a 	slli	r4,r6,8
   428dc:	218cb03a 	or	r6,r4,r6
   428e0:	3008943a 	slli	r4,r6,16
   428e4:	218cb03a 	or	r6,r4,r6
   428e8:	010003c4 	movi	r4,15
   428ec:	21c0182e 	bgeu	r4,r7,42950 <memset+0xc8>
   428f0:	3b3ffc04 	addi	r12,r7,-16
   428f4:	6018d13a 	srli	r12,r12,4
   428f8:	1a000104 	addi	r8,r3,4
   428fc:	1ac00204 	addi	r11,r3,8
   42900:	6008913a 	slli	r4,r12,4
   42904:	1a800304 	addi	r10,r3,12
   42908:	1813883a 	mov	r9,r3
   4290c:	21000504 	addi	r4,r4,20
   42910:	1909883a 	add	r4,r3,r4
   42914:	49800015 	stw	r6,0(r9)
   42918:	41800015 	stw	r6,0(r8)
   4291c:	59800015 	stw	r6,0(r11)
   42920:	51800015 	stw	r6,0(r10)
   42924:	42000404 	addi	r8,r8,16
   42928:	4a400404 	addi	r9,r9,16
   4292c:	5ac00404 	addi	r11,r11,16
   42930:	52800404 	addi	r10,r10,16
   42934:	413ff71e 	bne	r8,r4,42914 <__alt_data_end+0xfffd1bd4>
   42938:	63000044 	addi	r12,r12,1
   4293c:	6018913a 	slli	r12,r12,4
   42940:	39c003cc 	andi	r7,r7,15
   42944:	010000c4 	movi	r4,3
   42948:	1b07883a 	add	r3,r3,r12
   4294c:	21c00e2e 	bgeu	r4,r7,42988 <memset+0x100>
   42950:	1813883a 	mov	r9,r3
   42954:	3811883a 	mov	r8,r7
   42958:	010000c4 	movi	r4,3
   4295c:	49800015 	stw	r6,0(r9)
   42960:	423fff04 	addi	r8,r8,-4
   42964:	4a400104 	addi	r9,r9,4
   42968:	223ffc36 	bltu	r4,r8,4295c <__alt_data_end+0xfffd1c1c>
   4296c:	393fff04 	addi	r4,r7,-4
   42970:	2008d0ba 	srli	r4,r4,2
   42974:	39c000cc 	andi	r7,r7,3
   42978:	21000044 	addi	r4,r4,1
   4297c:	2109883a 	add	r4,r4,r4
   42980:	2109883a 	add	r4,r4,r4
   42984:	1907883a 	add	r3,r3,r4
   42988:	38000426 	beq	r7,zero,4299c <memset+0x114>
   4298c:	19cf883a 	add	r7,r3,r7
   42990:	19400005 	stb	r5,0(r3)
   42994:	18c00044 	addi	r3,r3,1
   42998:	19fffd1e 	bne	r3,r7,42990 <__alt_data_end+0xfffd1c50>
   4299c:	f800283a 	ret
   429a0:	2007883a 	mov	r3,r4
   429a4:	300f883a 	mov	r7,r6
   429a8:	003fc806 	br	428cc <__alt_data_end+0xfffd1b8c>

000429ac <__sread>:
   429ac:	defffe04 	addi	sp,sp,-8
   429b0:	dc000015 	stw	r16,0(sp)
   429b4:	2821883a 	mov	r16,r5
   429b8:	2940038f 	ldh	r5,14(r5)
   429bc:	dfc00115 	stw	ra,4(sp)
   429c0:	0042db40 	call	42db4 <_read_r>
   429c4:	10000716 	blt	r2,zero,429e4 <__sread+0x38>
   429c8:	80c01417 	ldw	r3,80(r16)
   429cc:	1887883a 	add	r3,r3,r2
   429d0:	80c01415 	stw	r3,80(r16)
   429d4:	dfc00117 	ldw	ra,4(sp)
   429d8:	dc000017 	ldw	r16,0(sp)
   429dc:	dec00204 	addi	sp,sp,8
   429e0:	f800283a 	ret
   429e4:	80c0030b 	ldhu	r3,12(r16)
   429e8:	18fbffcc 	andi	r3,r3,61439
   429ec:	80c0030d 	sth	r3,12(r16)
   429f0:	dfc00117 	ldw	ra,4(sp)
   429f4:	dc000017 	ldw	r16,0(sp)
   429f8:	dec00204 	addi	sp,sp,8
   429fc:	f800283a 	ret

00042a00 <__seofread>:
   42a00:	0005883a 	mov	r2,zero
   42a04:	f800283a 	ret

00042a08 <__swrite>:
   42a08:	2880030b 	ldhu	r2,12(r5)
   42a0c:	defffb04 	addi	sp,sp,-20
   42a10:	dcc00315 	stw	r19,12(sp)
   42a14:	dc800215 	stw	r18,8(sp)
   42a18:	dc400115 	stw	r17,4(sp)
   42a1c:	dc000015 	stw	r16,0(sp)
   42a20:	dfc00415 	stw	ra,16(sp)
   42a24:	10c0400c 	andi	r3,r2,256
   42a28:	2821883a 	mov	r16,r5
   42a2c:	2027883a 	mov	r19,r4
   42a30:	3025883a 	mov	r18,r6
   42a34:	3823883a 	mov	r17,r7
   42a38:	18000526 	beq	r3,zero,42a50 <__swrite+0x48>
   42a3c:	2940038f 	ldh	r5,14(r5)
   42a40:	000d883a 	mov	r6,zero
   42a44:	01c00084 	movi	r7,2
   42a48:	0042d580 	call	42d58 <_lseek_r>
   42a4c:	8080030b 	ldhu	r2,12(r16)
   42a50:	8140038f 	ldh	r5,14(r16)
   42a54:	10bbffcc 	andi	r2,r2,61439
   42a58:	9809883a 	mov	r4,r19
   42a5c:	900d883a 	mov	r6,r18
   42a60:	880f883a 	mov	r7,r17
   42a64:	8080030d 	sth	r2,12(r16)
   42a68:	dfc00417 	ldw	ra,16(sp)
   42a6c:	dcc00317 	ldw	r19,12(sp)
   42a70:	dc800217 	ldw	r18,8(sp)
   42a74:	dc400117 	ldw	r17,4(sp)
   42a78:	dc000017 	ldw	r16,0(sp)
   42a7c:	dec00504 	addi	sp,sp,20
   42a80:	0042ae81 	jmpi	42ae8 <_write_r>

00042a84 <__sseek>:
   42a84:	defffe04 	addi	sp,sp,-8
   42a88:	dc000015 	stw	r16,0(sp)
   42a8c:	2821883a 	mov	r16,r5
   42a90:	2940038f 	ldh	r5,14(r5)
   42a94:	dfc00115 	stw	ra,4(sp)
   42a98:	0042d580 	call	42d58 <_lseek_r>
   42a9c:	00ffffc4 	movi	r3,-1
   42aa0:	10c00826 	beq	r2,r3,42ac4 <__sseek+0x40>
   42aa4:	80c0030b 	ldhu	r3,12(r16)
   42aa8:	80801415 	stw	r2,80(r16)
   42aac:	18c40014 	ori	r3,r3,4096
   42ab0:	80c0030d 	sth	r3,12(r16)
   42ab4:	dfc00117 	ldw	ra,4(sp)
   42ab8:	dc000017 	ldw	r16,0(sp)
   42abc:	dec00204 	addi	sp,sp,8
   42ac0:	f800283a 	ret
   42ac4:	80c0030b 	ldhu	r3,12(r16)
   42ac8:	18fbffcc 	andi	r3,r3,61439
   42acc:	80c0030d 	sth	r3,12(r16)
   42ad0:	dfc00117 	ldw	ra,4(sp)
   42ad4:	dc000017 	ldw	r16,0(sp)
   42ad8:	dec00204 	addi	sp,sp,8
   42adc:	f800283a 	ret

00042ae0 <__sclose>:
   42ae0:	2940038f 	ldh	r5,14(r5)
   42ae4:	0042b441 	jmpi	42b44 <_close_r>

00042ae8 <_write_r>:
   42ae8:	defffd04 	addi	sp,sp,-12
   42aec:	dc000015 	stw	r16,0(sp)
   42af0:	04000174 	movhi	r16,5
   42af4:	dc400115 	stw	r17,4(sp)
   42af8:	84228a04 	addi	r16,r16,-30168
   42afc:	2023883a 	mov	r17,r4
   42b00:	2809883a 	mov	r4,r5
   42b04:	300b883a 	mov	r5,r6
   42b08:	380d883a 	mov	r6,r7
   42b0c:	dfc00215 	stw	ra,8(sp)
   42b10:	80000015 	stw	zero,0(r16)
   42b14:	004372c0 	call	4372c <write>
   42b18:	00ffffc4 	movi	r3,-1
   42b1c:	10c00526 	beq	r2,r3,42b34 <_write_r+0x4c>
   42b20:	dfc00217 	ldw	ra,8(sp)
   42b24:	dc400117 	ldw	r17,4(sp)
   42b28:	dc000017 	ldw	r16,0(sp)
   42b2c:	dec00304 	addi	sp,sp,12
   42b30:	f800283a 	ret
   42b34:	80c00017 	ldw	r3,0(r16)
   42b38:	183ff926 	beq	r3,zero,42b20 <__alt_data_end+0xfffd1de0>
   42b3c:	88c00015 	stw	r3,0(r17)
   42b40:	003ff706 	br	42b20 <__alt_data_end+0xfffd1de0>

00042b44 <_close_r>:
   42b44:	defffd04 	addi	sp,sp,-12
   42b48:	dc000015 	stw	r16,0(sp)
   42b4c:	04000174 	movhi	r16,5
   42b50:	dc400115 	stw	r17,4(sp)
   42b54:	84228a04 	addi	r16,r16,-30168
   42b58:	2023883a 	mov	r17,r4
   42b5c:	2809883a 	mov	r4,r5
   42b60:	dfc00215 	stw	ra,8(sp)
   42b64:	80000015 	stw	zero,0(r16)
   42b68:	0042e880 	call	42e88 <close>
   42b6c:	00ffffc4 	movi	r3,-1
   42b70:	10c00526 	beq	r2,r3,42b88 <_close_r+0x44>
   42b74:	dfc00217 	ldw	ra,8(sp)
   42b78:	dc400117 	ldw	r17,4(sp)
   42b7c:	dc000017 	ldw	r16,0(sp)
   42b80:	dec00304 	addi	sp,sp,12
   42b84:	f800283a 	ret
   42b88:	80c00017 	ldw	r3,0(r16)
   42b8c:	183ff926 	beq	r3,zero,42b74 <__alt_data_end+0xfffd1e34>
   42b90:	88c00015 	stw	r3,0(r17)
   42b94:	003ff706 	br	42b74 <__alt_data_end+0xfffd1e34>

00042b98 <_fclose_r>:
   42b98:	28003226 	beq	r5,zero,42c64 <_fclose_r+0xcc>
   42b9c:	defffc04 	addi	sp,sp,-16
   42ba0:	dc400115 	stw	r17,4(sp)
   42ba4:	2023883a 	mov	r17,r4
   42ba8:	dc000015 	stw	r16,0(sp)
   42bac:	dfc00315 	stw	ra,12(sp)
   42bb0:	dc800215 	stw	r18,8(sp)
   42bb4:	2821883a 	mov	r16,r5
   42bb8:	004210c0 	call	4210c <__sfp_lock_acquire>
   42bbc:	88000226 	beq	r17,zero,42bc8 <_fclose_r+0x30>
   42bc0:	88800e17 	ldw	r2,56(r17)
   42bc4:	10002926 	beq	r2,zero,42c6c <_fclose_r+0xd4>
   42bc8:	8080030f 	ldh	r2,12(r16)
   42bcc:	10002226 	beq	r2,zero,42c58 <_fclose_r+0xc0>
   42bd0:	8809883a 	mov	r4,r17
   42bd4:	800b883a 	mov	r5,r16
   42bd8:	0041b400 	call	41b40 <_fflush_r>
   42bdc:	1025883a 	mov	r18,r2
   42be0:	80800b17 	ldw	r2,44(r16)
   42be4:	10000426 	beq	r2,zero,42bf8 <_fclose_r+0x60>
   42be8:	81400717 	ldw	r5,28(r16)
   42bec:	8809883a 	mov	r4,r17
   42bf0:	103ee83a 	callr	r2
   42bf4:	10002616 	blt	r2,zero,42c90 <_fclose_r+0xf8>
   42bf8:	8080030b 	ldhu	r2,12(r16)
   42bfc:	1080200c 	andi	r2,r2,128
   42c00:	10001f1e 	bne	r2,zero,42c80 <_fclose_r+0xe8>
   42c04:	81400c17 	ldw	r5,48(r16)
   42c08:	28000526 	beq	r5,zero,42c20 <_fclose_r+0x88>
   42c0c:	80801004 	addi	r2,r16,64
   42c10:	28800226 	beq	r5,r2,42c1c <_fclose_r+0x84>
   42c14:	8809883a 	mov	r4,r17
   42c18:	00422700 	call	42270 <_free_r>
   42c1c:	80000c15 	stw	zero,48(r16)
   42c20:	81401117 	ldw	r5,68(r16)
   42c24:	28000326 	beq	r5,zero,42c34 <_fclose_r+0x9c>
   42c28:	8809883a 	mov	r4,r17
   42c2c:	00422700 	call	42270 <_free_r>
   42c30:	80001115 	stw	zero,68(r16)
   42c34:	8000030d 	sth	zero,12(r16)
   42c38:	00421100 	call	42110 <__sfp_lock_release>
   42c3c:	9005883a 	mov	r2,r18
   42c40:	dfc00317 	ldw	ra,12(sp)
   42c44:	dc800217 	ldw	r18,8(sp)
   42c48:	dc400117 	ldw	r17,4(sp)
   42c4c:	dc000017 	ldw	r16,0(sp)
   42c50:	dec00404 	addi	sp,sp,16
   42c54:	f800283a 	ret
   42c58:	00421100 	call	42110 <__sfp_lock_release>
   42c5c:	0005883a 	mov	r2,zero
   42c60:	003ff706 	br	42c40 <__alt_data_end+0xfffd1f00>
   42c64:	0005883a 	mov	r2,zero
   42c68:	f800283a 	ret
   42c6c:	8809883a 	mov	r4,r17
   42c70:	00420fc0 	call	420fc <__sinit>
   42c74:	8080030f 	ldh	r2,12(r16)
   42c78:	103fd51e 	bne	r2,zero,42bd0 <__alt_data_end+0xfffd1e90>
   42c7c:	003ff606 	br	42c58 <__alt_data_end+0xfffd1f18>
   42c80:	81400417 	ldw	r5,16(r16)
   42c84:	8809883a 	mov	r4,r17
   42c88:	00422700 	call	42270 <_free_r>
   42c8c:	003fdd06 	br	42c04 <__alt_data_end+0xfffd1ec4>
   42c90:	04bfffc4 	movi	r18,-1
   42c94:	003fd806 	br	42bf8 <__alt_data_end+0xfffd1eb8>

00042c98 <fclose>:
   42c98:	00800134 	movhi	r2,4
   42c9c:	109bdf04 	addi	r2,r2,28540
   42ca0:	200b883a 	mov	r5,r4
   42ca4:	11000017 	ldw	r4,0(r2)
   42ca8:	0042b981 	jmpi	42b98 <_fclose_r>

00042cac <_fstat_r>:
   42cac:	defffd04 	addi	sp,sp,-12
   42cb0:	dc000015 	stw	r16,0(sp)
   42cb4:	04000174 	movhi	r16,5
   42cb8:	dc400115 	stw	r17,4(sp)
   42cbc:	84228a04 	addi	r16,r16,-30168
   42cc0:	2023883a 	mov	r17,r4
   42cc4:	2809883a 	mov	r4,r5
   42cc8:	300b883a 	mov	r5,r6
   42ccc:	dfc00215 	stw	ra,8(sp)
   42cd0:	80000015 	stw	zero,0(r16)
   42cd4:	0042fdc0 	call	42fdc <fstat>
   42cd8:	00ffffc4 	movi	r3,-1
   42cdc:	10c00526 	beq	r2,r3,42cf4 <_fstat_r+0x48>
   42ce0:	dfc00217 	ldw	ra,8(sp)
   42ce4:	dc400117 	ldw	r17,4(sp)
   42ce8:	dc000017 	ldw	r16,0(sp)
   42cec:	dec00304 	addi	sp,sp,12
   42cf0:	f800283a 	ret
   42cf4:	80c00017 	ldw	r3,0(r16)
   42cf8:	183ff926 	beq	r3,zero,42ce0 <__alt_data_end+0xfffd1fa0>
   42cfc:	88c00015 	stw	r3,0(r17)
   42d00:	003ff706 	br	42ce0 <__alt_data_end+0xfffd1fa0>

00042d04 <_isatty_r>:
   42d04:	defffd04 	addi	sp,sp,-12
   42d08:	dc000015 	stw	r16,0(sp)
   42d0c:	04000174 	movhi	r16,5
   42d10:	dc400115 	stw	r17,4(sp)
   42d14:	84228a04 	addi	r16,r16,-30168
   42d18:	2023883a 	mov	r17,r4
   42d1c:	2809883a 	mov	r4,r5
   42d20:	dfc00215 	stw	ra,8(sp)
   42d24:	80000015 	stw	zero,0(r16)
   42d28:	00430e40 	call	430e4 <isatty>
   42d2c:	00ffffc4 	movi	r3,-1
   42d30:	10c00526 	beq	r2,r3,42d48 <_isatty_r+0x44>
   42d34:	dfc00217 	ldw	ra,8(sp)
   42d38:	dc400117 	ldw	r17,4(sp)
   42d3c:	dc000017 	ldw	r16,0(sp)
   42d40:	dec00304 	addi	sp,sp,12
   42d44:	f800283a 	ret
   42d48:	80c00017 	ldw	r3,0(r16)
   42d4c:	183ff926 	beq	r3,zero,42d34 <__alt_data_end+0xfffd1ff4>
   42d50:	88c00015 	stw	r3,0(r17)
   42d54:	003ff706 	br	42d34 <__alt_data_end+0xfffd1ff4>

00042d58 <_lseek_r>:
   42d58:	defffd04 	addi	sp,sp,-12
   42d5c:	dc000015 	stw	r16,0(sp)
   42d60:	04000174 	movhi	r16,5
   42d64:	dc400115 	stw	r17,4(sp)
   42d68:	84228a04 	addi	r16,r16,-30168
   42d6c:	2023883a 	mov	r17,r4
   42d70:	2809883a 	mov	r4,r5
   42d74:	300b883a 	mov	r5,r6
   42d78:	380d883a 	mov	r6,r7
   42d7c:	dfc00215 	stw	ra,8(sp)
   42d80:	80000015 	stw	zero,0(r16)
   42d84:	00432c40 	call	432c4 <lseek>
   42d88:	00ffffc4 	movi	r3,-1
   42d8c:	10c00526 	beq	r2,r3,42da4 <_lseek_r+0x4c>
   42d90:	dfc00217 	ldw	ra,8(sp)
   42d94:	dc400117 	ldw	r17,4(sp)
   42d98:	dc000017 	ldw	r16,0(sp)
   42d9c:	dec00304 	addi	sp,sp,12
   42da0:	f800283a 	ret
   42da4:	80c00017 	ldw	r3,0(r16)
   42da8:	183ff926 	beq	r3,zero,42d90 <__alt_data_end+0xfffd2050>
   42dac:	88c00015 	stw	r3,0(r17)
   42db0:	003ff706 	br	42d90 <__alt_data_end+0xfffd2050>

00042db4 <_read_r>:
   42db4:	defffd04 	addi	sp,sp,-12
   42db8:	dc000015 	stw	r16,0(sp)
   42dbc:	04000174 	movhi	r16,5
   42dc0:	dc400115 	stw	r17,4(sp)
   42dc4:	84228a04 	addi	r16,r16,-30168
   42dc8:	2023883a 	mov	r17,r4
   42dcc:	2809883a 	mov	r4,r5
   42dd0:	300b883a 	mov	r5,r6
   42dd4:	380d883a 	mov	r6,r7
   42dd8:	dfc00215 	stw	ra,8(sp)
   42ddc:	80000015 	stw	zero,0(r16)
   42de0:	00434a80 	call	434a8 <read>
   42de4:	00ffffc4 	movi	r3,-1
   42de8:	10c00526 	beq	r2,r3,42e00 <_read_r+0x4c>
   42dec:	dfc00217 	ldw	ra,8(sp)
   42df0:	dc400117 	ldw	r17,4(sp)
   42df4:	dc000017 	ldw	r16,0(sp)
   42df8:	dec00304 	addi	sp,sp,12
   42dfc:	f800283a 	ret
   42e00:	80c00017 	ldw	r3,0(r16)
   42e04:	183ff926 	beq	r3,zero,42dec <__alt_data_end+0xfffd20ac>
   42e08:	88c00015 	stw	r3,0(r17)
   42e0c:	003ff706 	br	42dec <__alt_data_end+0xfffd20ac>

00042e10 <__mulsi3>:
   42e10:	0005883a 	mov	r2,zero
   42e14:	20000726 	beq	r4,zero,42e34 <__mulsi3+0x24>
   42e18:	20c0004c 	andi	r3,r4,1
   42e1c:	2008d07a 	srli	r4,r4,1
   42e20:	18000126 	beq	r3,zero,42e28 <__mulsi3+0x18>
   42e24:	1145883a 	add	r2,r2,r5
   42e28:	294b883a 	add	r5,r5,r5
   42e2c:	203ffa1e 	bne	r4,zero,42e18 <__alt_data_end+0xfffd20d8>
   42e30:	f800283a 	ret
   42e34:	f800283a 	ret

00042e38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42e38:	defffe04 	addi	sp,sp,-8
   42e3c:	dfc00115 	stw	ra,4(sp)
   42e40:	df000015 	stw	fp,0(sp)
   42e44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42e48:	00800134 	movhi	r2,4
   42e4c:	109be704 	addi	r2,r2,28572
   42e50:	10800017 	ldw	r2,0(r2)
   42e54:	10000526 	beq	r2,zero,42e6c <alt_get_errno+0x34>
   42e58:	00800134 	movhi	r2,4
   42e5c:	109be704 	addi	r2,r2,28572
   42e60:	10800017 	ldw	r2,0(r2)
   42e64:	103ee83a 	callr	r2
   42e68:	00000206 	br	42e74 <alt_get_errno+0x3c>
   42e6c:	00800174 	movhi	r2,5
   42e70:	10a28a04 	addi	r2,r2,-30168
}
   42e74:	e037883a 	mov	sp,fp
   42e78:	dfc00117 	ldw	ra,4(sp)
   42e7c:	df000017 	ldw	fp,0(sp)
   42e80:	dec00204 	addi	sp,sp,8
   42e84:	f800283a 	ret

00042e88 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42e88:	defffb04 	addi	sp,sp,-20
   42e8c:	dfc00415 	stw	ra,16(sp)
   42e90:	df000315 	stw	fp,12(sp)
   42e94:	df000304 	addi	fp,sp,12
   42e98:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42e9c:	e0bfff17 	ldw	r2,-4(fp)
   42ea0:	10000816 	blt	r2,zero,42ec4 <close+0x3c>
   42ea4:	e13fff17 	ldw	r4,-4(fp)
   42ea8:	01400304 	movi	r5,12
   42eac:	0042e100 	call	42e10 <__mulsi3>
   42eb0:	1007883a 	mov	r3,r2
   42eb4:	00800134 	movhi	r2,4
   42eb8:	10976604 	addi	r2,r2,23960
   42ebc:	1885883a 	add	r2,r3,r2
   42ec0:	00000106 	br	42ec8 <close+0x40>
   42ec4:	0005883a 	mov	r2,zero
   42ec8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   42ecc:	e0bffd17 	ldw	r2,-12(fp)
   42ed0:	10001926 	beq	r2,zero,42f38 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42ed4:	e0bffd17 	ldw	r2,-12(fp)
   42ed8:	10800017 	ldw	r2,0(r2)
   42edc:	10800417 	ldw	r2,16(r2)
   42ee0:	10000626 	beq	r2,zero,42efc <close+0x74>
   42ee4:	e0bffd17 	ldw	r2,-12(fp)
   42ee8:	10800017 	ldw	r2,0(r2)
   42eec:	10800417 	ldw	r2,16(r2)
   42ef0:	e13ffd17 	ldw	r4,-12(fp)
   42ef4:	103ee83a 	callr	r2
   42ef8:	00000106 	br	42f00 <close+0x78>
   42efc:	0005883a 	mov	r2,zero
   42f00:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42f04:	e13fff17 	ldw	r4,-4(fp)
   42f08:	00435ac0 	call	435ac <alt_release_fd>
    if (rval < 0)
   42f0c:	e0bffe17 	ldw	r2,-8(fp)
   42f10:	1000070e 	bge	r2,zero,42f30 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   42f14:	0042e380 	call	42e38 <alt_get_errno>
   42f18:	1007883a 	mov	r3,r2
   42f1c:	e0bffe17 	ldw	r2,-8(fp)
   42f20:	0085c83a 	sub	r2,zero,r2
   42f24:	18800015 	stw	r2,0(r3)
      return -1;
   42f28:	00bfffc4 	movi	r2,-1
   42f2c:	00000706 	br	42f4c <close+0xc4>
    }
    return 0;
   42f30:	0005883a 	mov	r2,zero
   42f34:	00000506 	br	42f4c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42f38:	0042e380 	call	42e38 <alt_get_errno>
   42f3c:	1007883a 	mov	r3,r2
   42f40:	00801444 	movi	r2,81
   42f44:	18800015 	stw	r2,0(r3)
    return -1;
   42f48:	00bfffc4 	movi	r2,-1
  }
}
   42f4c:	e037883a 	mov	sp,fp
   42f50:	dfc00117 	ldw	ra,4(sp)
   42f54:	df000017 	ldw	fp,0(sp)
   42f58:	dec00204 	addi	sp,sp,8
   42f5c:	f800283a 	ret

00042f60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42f60:	defffc04 	addi	sp,sp,-16
   42f64:	df000315 	stw	fp,12(sp)
   42f68:	df000304 	addi	fp,sp,12
   42f6c:	e13ffd15 	stw	r4,-12(fp)
   42f70:	e17ffe15 	stw	r5,-8(fp)
   42f74:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42f78:	e0bfff17 	ldw	r2,-4(fp)
}
   42f7c:	e037883a 	mov	sp,fp
   42f80:	df000017 	ldw	fp,0(sp)
   42f84:	dec00104 	addi	sp,sp,4
   42f88:	f800283a 	ret

00042f8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42f8c:	defffe04 	addi	sp,sp,-8
   42f90:	dfc00115 	stw	ra,4(sp)
   42f94:	df000015 	stw	fp,0(sp)
   42f98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42f9c:	00800134 	movhi	r2,4
   42fa0:	109be704 	addi	r2,r2,28572
   42fa4:	10800017 	ldw	r2,0(r2)
   42fa8:	10000526 	beq	r2,zero,42fc0 <alt_get_errno+0x34>
   42fac:	00800134 	movhi	r2,4
   42fb0:	109be704 	addi	r2,r2,28572
   42fb4:	10800017 	ldw	r2,0(r2)
   42fb8:	103ee83a 	callr	r2
   42fbc:	00000206 	br	42fc8 <alt_get_errno+0x3c>
   42fc0:	00800174 	movhi	r2,5
   42fc4:	10a28a04 	addi	r2,r2,-30168
}
   42fc8:	e037883a 	mov	sp,fp
   42fcc:	dfc00117 	ldw	ra,4(sp)
   42fd0:	df000017 	ldw	fp,0(sp)
   42fd4:	dec00204 	addi	sp,sp,8
   42fd8:	f800283a 	ret

00042fdc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   42fdc:	defffb04 	addi	sp,sp,-20
   42fe0:	dfc00415 	stw	ra,16(sp)
   42fe4:	df000315 	stw	fp,12(sp)
   42fe8:	df000304 	addi	fp,sp,12
   42fec:	e13ffe15 	stw	r4,-8(fp)
   42ff0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42ff4:	e0bffe17 	ldw	r2,-8(fp)
   42ff8:	10000816 	blt	r2,zero,4301c <fstat+0x40>
   42ffc:	e13ffe17 	ldw	r4,-8(fp)
   43000:	01400304 	movi	r5,12
   43004:	0042e100 	call	42e10 <__mulsi3>
   43008:	1007883a 	mov	r3,r2
   4300c:	00800134 	movhi	r2,4
   43010:	10976604 	addi	r2,r2,23960
   43014:	1885883a 	add	r2,r3,r2
   43018:	00000106 	br	43020 <fstat+0x44>
   4301c:	0005883a 	mov	r2,zero
   43020:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43024:	e0bffd17 	ldw	r2,-12(fp)
   43028:	10001026 	beq	r2,zero,4306c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4302c:	e0bffd17 	ldw	r2,-12(fp)
   43030:	10800017 	ldw	r2,0(r2)
   43034:	10800817 	ldw	r2,32(r2)
   43038:	10000726 	beq	r2,zero,43058 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4303c:	e0bffd17 	ldw	r2,-12(fp)
   43040:	10800017 	ldw	r2,0(r2)
   43044:	10800817 	ldw	r2,32(r2)
   43048:	e13ffd17 	ldw	r4,-12(fp)
   4304c:	e17fff17 	ldw	r5,-4(fp)
   43050:	103ee83a 	callr	r2
   43054:	00000a06 	br	43080 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43058:	e0bfff17 	ldw	r2,-4(fp)
   4305c:	00c80004 	movi	r3,8192
   43060:	10c00115 	stw	r3,4(r2)
      return 0;
   43064:	0005883a 	mov	r2,zero
   43068:	00000506 	br	43080 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4306c:	0042f8c0 	call	42f8c <alt_get_errno>
   43070:	1007883a 	mov	r3,r2
   43074:	00801444 	movi	r2,81
   43078:	18800015 	stw	r2,0(r3)
    return -1;
   4307c:	00bfffc4 	movi	r2,-1
  }
}
   43080:	e037883a 	mov	sp,fp
   43084:	dfc00117 	ldw	ra,4(sp)
   43088:	df000017 	ldw	fp,0(sp)
   4308c:	dec00204 	addi	sp,sp,8
   43090:	f800283a 	ret

00043094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43094:	defffe04 	addi	sp,sp,-8
   43098:	dfc00115 	stw	ra,4(sp)
   4309c:	df000015 	stw	fp,0(sp)
   430a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   430a4:	00800134 	movhi	r2,4
   430a8:	109be704 	addi	r2,r2,28572
   430ac:	10800017 	ldw	r2,0(r2)
   430b0:	10000526 	beq	r2,zero,430c8 <alt_get_errno+0x34>
   430b4:	00800134 	movhi	r2,4
   430b8:	109be704 	addi	r2,r2,28572
   430bc:	10800017 	ldw	r2,0(r2)
   430c0:	103ee83a 	callr	r2
   430c4:	00000206 	br	430d0 <alt_get_errno+0x3c>
   430c8:	00800174 	movhi	r2,5
   430cc:	10a28a04 	addi	r2,r2,-30168
}
   430d0:	e037883a 	mov	sp,fp
   430d4:	dfc00117 	ldw	ra,4(sp)
   430d8:	df000017 	ldw	fp,0(sp)
   430dc:	dec00204 	addi	sp,sp,8
   430e0:	f800283a 	ret

000430e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   430e4:	deffed04 	addi	sp,sp,-76
   430e8:	dfc01215 	stw	ra,72(sp)
   430ec:	df001115 	stw	fp,68(sp)
   430f0:	df001104 	addi	fp,sp,68
   430f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   430f8:	e0bfff17 	ldw	r2,-4(fp)
   430fc:	10000816 	blt	r2,zero,43120 <isatty+0x3c>
   43100:	e13fff17 	ldw	r4,-4(fp)
   43104:	01400304 	movi	r5,12
   43108:	0042e100 	call	42e10 <__mulsi3>
   4310c:	1007883a 	mov	r3,r2
   43110:	00800134 	movhi	r2,4
   43114:	10976604 	addi	r2,r2,23960
   43118:	1885883a 	add	r2,r3,r2
   4311c:	00000106 	br	43124 <isatty+0x40>
   43120:	0005883a 	mov	r2,zero
   43124:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43128:	e0bfef17 	ldw	r2,-68(fp)
   4312c:	10000e26 	beq	r2,zero,43168 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43130:	e0bfef17 	ldw	r2,-68(fp)
   43134:	10800017 	ldw	r2,0(r2)
   43138:	10800817 	ldw	r2,32(r2)
   4313c:	1000021e 	bne	r2,zero,43148 <isatty+0x64>
    {
      return 1;
   43140:	00800044 	movi	r2,1
   43144:	00000d06 	br	4317c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43148:	e0bff004 	addi	r2,fp,-64
   4314c:	e13fff17 	ldw	r4,-4(fp)
   43150:	100b883a 	mov	r5,r2
   43154:	0042fdc0 	call	42fdc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43158:	e0bff117 	ldw	r2,-60(fp)
   4315c:	10880020 	cmpeqi	r2,r2,8192
   43160:	10803fcc 	andi	r2,r2,255
   43164:	00000506 	br	4317c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43168:	00430940 	call	43094 <alt_get_errno>
   4316c:	1007883a 	mov	r3,r2
   43170:	00801444 	movi	r2,81
   43174:	18800015 	stw	r2,0(r3)
    return 0;
   43178:	0005883a 	mov	r2,zero
  }
}
   4317c:	e037883a 	mov	sp,fp
   43180:	dfc00117 	ldw	ra,4(sp)
   43184:	df000017 	ldw	fp,0(sp)
   43188:	dec00204 	addi	sp,sp,8
   4318c:	f800283a 	ret

00043190 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43190:	defffc04 	addi	sp,sp,-16
   43194:	df000315 	stw	fp,12(sp)
   43198:	df000304 	addi	fp,sp,12
   4319c:	e13ffd15 	stw	r4,-12(fp)
   431a0:	e17ffe15 	stw	r5,-8(fp)
   431a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   431a8:	e0fffe17 	ldw	r3,-8(fp)
   431ac:	e0bffd17 	ldw	r2,-12(fp)
   431b0:	18800c26 	beq	r3,r2,431e4 <alt_load_section+0x54>
  {
    while( to != end )
   431b4:	00000806 	br	431d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   431b8:	e0bffe17 	ldw	r2,-8(fp)
   431bc:	10c00104 	addi	r3,r2,4
   431c0:	e0fffe15 	stw	r3,-8(fp)
   431c4:	e0fffd17 	ldw	r3,-12(fp)
   431c8:	19000104 	addi	r4,r3,4
   431cc:	e13ffd15 	stw	r4,-12(fp)
   431d0:	18c00017 	ldw	r3,0(r3)
   431d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   431d8:	e0fffe17 	ldw	r3,-8(fp)
   431dc:	e0bfff17 	ldw	r2,-4(fp)
   431e0:	18bff51e 	bne	r3,r2,431b8 <__alt_data_end+0xfffd2478>
    {
      *to++ = *from++;
    }
  }
}
   431e4:	e037883a 	mov	sp,fp
   431e8:	df000017 	ldw	fp,0(sp)
   431ec:	dec00104 	addi	sp,sp,4
   431f0:	f800283a 	ret

000431f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   431f4:	defffe04 	addi	sp,sp,-8
   431f8:	dfc00115 	stw	ra,4(sp)
   431fc:	df000015 	stw	fp,0(sp)
   43200:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43204:	01000134 	movhi	r4,4
   43208:	211bec04 	addi	r4,r4,28592
   4320c:	01400134 	movhi	r5,4
   43210:	29555104 	addi	r5,r5,21828
   43214:	01800134 	movhi	r6,4
   43218:	319bec04 	addi	r6,r6,28592
   4321c:	00431900 	call	43190 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43220:	01000134 	movhi	r4,4
   43224:	21000804 	addi	r4,r4,32
   43228:	01400134 	movhi	r5,4
   4322c:	29400804 	addi	r5,r5,32
   43230:	01800134 	movhi	r6,4
   43234:	31806f04 	addi	r6,r6,444
   43238:	00431900 	call	43190 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4323c:	01000134 	movhi	r4,4
   43240:	21153d04 	addi	r4,r4,21748
   43244:	01400134 	movhi	r5,4
   43248:	29553d04 	addi	r5,r5,21748
   4324c:	01800134 	movhi	r6,4
   43250:	31955104 	addi	r6,r6,21828
   43254:	00431900 	call	43190 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43258:	004446c0 	call	4446c <alt_dcache_flush_all>
  alt_icache_flush_all();
   4325c:	00446340 	call	44634 <alt_icache_flush_all>
}
   43260:	e037883a 	mov	sp,fp
   43264:	dfc00117 	ldw	ra,4(sp)
   43268:	df000017 	ldw	fp,0(sp)
   4326c:	dec00204 	addi	sp,sp,8
   43270:	f800283a 	ret

00043274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43274:	defffe04 	addi	sp,sp,-8
   43278:	dfc00115 	stw	ra,4(sp)
   4327c:	df000015 	stw	fp,0(sp)
   43280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43284:	00800134 	movhi	r2,4
   43288:	109be704 	addi	r2,r2,28572
   4328c:	10800017 	ldw	r2,0(r2)
   43290:	10000526 	beq	r2,zero,432a8 <alt_get_errno+0x34>
   43294:	00800134 	movhi	r2,4
   43298:	109be704 	addi	r2,r2,28572
   4329c:	10800017 	ldw	r2,0(r2)
   432a0:	103ee83a 	callr	r2
   432a4:	00000206 	br	432b0 <alt_get_errno+0x3c>
   432a8:	00800174 	movhi	r2,5
   432ac:	10a28a04 	addi	r2,r2,-30168
}
   432b0:	e037883a 	mov	sp,fp
   432b4:	dfc00117 	ldw	ra,4(sp)
   432b8:	df000017 	ldw	fp,0(sp)
   432bc:	dec00204 	addi	sp,sp,8
   432c0:	f800283a 	ret

000432c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   432c4:	defff904 	addi	sp,sp,-28
   432c8:	dfc00615 	stw	ra,24(sp)
   432cc:	df000515 	stw	fp,20(sp)
   432d0:	df000504 	addi	fp,sp,20
   432d4:	e13ffd15 	stw	r4,-12(fp)
   432d8:	e17ffe15 	stw	r5,-8(fp)
   432dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   432e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   432e4:	e0bffd17 	ldw	r2,-12(fp)
   432e8:	10000816 	blt	r2,zero,4330c <lseek+0x48>
   432ec:	e13ffd17 	ldw	r4,-12(fp)
   432f0:	01400304 	movi	r5,12
   432f4:	0042e100 	call	42e10 <__mulsi3>
   432f8:	1007883a 	mov	r3,r2
   432fc:	00800134 	movhi	r2,4
   43300:	10976604 	addi	r2,r2,23960
   43304:	1885883a 	add	r2,r3,r2
   43308:	00000106 	br	43310 <lseek+0x4c>
   4330c:	0005883a 	mov	r2,zero
   43310:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43314:	e0bffc17 	ldw	r2,-16(fp)
   43318:	10001026 	beq	r2,zero,4335c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4331c:	e0bffc17 	ldw	r2,-16(fp)
   43320:	10800017 	ldw	r2,0(r2)
   43324:	10800717 	ldw	r2,28(r2)
   43328:	10000926 	beq	r2,zero,43350 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4332c:	e0bffc17 	ldw	r2,-16(fp)
   43330:	10800017 	ldw	r2,0(r2)
   43334:	10800717 	ldw	r2,28(r2)
   43338:	e13ffc17 	ldw	r4,-16(fp)
   4333c:	e17ffe17 	ldw	r5,-8(fp)
   43340:	e1bfff17 	ldw	r6,-4(fp)
   43344:	103ee83a 	callr	r2
   43348:	e0bffb15 	stw	r2,-20(fp)
   4334c:	00000506 	br	43364 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43350:	00bfde84 	movi	r2,-134
   43354:	e0bffb15 	stw	r2,-20(fp)
   43358:	00000206 	br	43364 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4335c:	00bfebc4 	movi	r2,-81
   43360:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43364:	e0bffb17 	ldw	r2,-20(fp)
   43368:	1000070e 	bge	r2,zero,43388 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4336c:	00432740 	call	43274 <alt_get_errno>
   43370:	1007883a 	mov	r3,r2
   43374:	e0bffb17 	ldw	r2,-20(fp)
   43378:	0085c83a 	sub	r2,zero,r2
   4337c:	18800015 	stw	r2,0(r3)
    rc = -1;
   43380:	00bfffc4 	movi	r2,-1
   43384:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43388:	e0bffb17 	ldw	r2,-20(fp)
}
   4338c:	e037883a 	mov	sp,fp
   43390:	dfc00117 	ldw	ra,4(sp)
   43394:	df000017 	ldw	fp,0(sp)
   43398:	dec00204 	addi	sp,sp,8
   4339c:	f800283a 	ret

000433a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   433a0:	defffd04 	addi	sp,sp,-12
   433a4:	dfc00215 	stw	ra,8(sp)
   433a8:	df000115 	stw	fp,4(sp)
   433ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   433b0:	0009883a 	mov	r4,zero
   433b4:	00438640 	call	43864 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   433b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   433bc:	00438980 	call	43898 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   433c0:	01000134 	movhi	r4,4
   433c4:	21154704 	addi	r4,r4,21788
   433c8:	01400134 	movhi	r5,4
   433cc:	29554704 	addi	r5,r5,21788
   433d0:	01800134 	movhi	r6,4
   433d4:	31954704 	addi	r6,r6,21788
   433d8:	0044a000 	call	44a00 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   433dc:	004457c0 	call	4457c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   433e0:	01000134 	movhi	r4,4
   433e4:	21117604 	addi	r4,r4,17880
   433e8:	00451500 	call	45150 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   433ec:	d126ad17 	ldw	r4,-25932(gp)
   433f0:	d0e6ae17 	ldw	r3,-25928(gp)
   433f4:	d0a6af17 	ldw	r2,-25924(gp)
   433f8:	180b883a 	mov	r5,r3
   433fc:	100d883a 	mov	r6,r2
   43400:	004022c0 	call	4022c <main>
   43404:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43408:	01000044 	movi	r4,1
   4340c:	0042e880 	call	42e88 <close>
  exit (result);
   43410:	e13fff17 	ldw	r4,-4(fp)
   43414:	00451640 	call	45164 <exit>

00043418 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43418:	defffe04 	addi	sp,sp,-8
   4341c:	df000115 	stw	fp,4(sp)
   43420:	df000104 	addi	fp,sp,4
   43424:	e13fff15 	stw	r4,-4(fp)
}
   43428:	e037883a 	mov	sp,fp
   4342c:	df000017 	ldw	fp,0(sp)
   43430:	dec00104 	addi	sp,sp,4
   43434:	f800283a 	ret

00043438 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43438:	defffe04 	addi	sp,sp,-8
   4343c:	df000115 	stw	fp,4(sp)
   43440:	df000104 	addi	fp,sp,4
   43444:	e13fff15 	stw	r4,-4(fp)
}
   43448:	e037883a 	mov	sp,fp
   4344c:	df000017 	ldw	fp,0(sp)
   43450:	dec00104 	addi	sp,sp,4
   43454:	f800283a 	ret

00043458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43458:	defffe04 	addi	sp,sp,-8
   4345c:	dfc00115 	stw	ra,4(sp)
   43460:	df000015 	stw	fp,0(sp)
   43464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43468:	00800134 	movhi	r2,4
   4346c:	109be704 	addi	r2,r2,28572
   43470:	10800017 	ldw	r2,0(r2)
   43474:	10000526 	beq	r2,zero,4348c <alt_get_errno+0x34>
   43478:	00800134 	movhi	r2,4
   4347c:	109be704 	addi	r2,r2,28572
   43480:	10800017 	ldw	r2,0(r2)
   43484:	103ee83a 	callr	r2
   43488:	00000206 	br	43494 <alt_get_errno+0x3c>
   4348c:	00800174 	movhi	r2,5
   43490:	10a28a04 	addi	r2,r2,-30168
}
   43494:	e037883a 	mov	sp,fp
   43498:	dfc00117 	ldw	ra,4(sp)
   4349c:	df000017 	ldw	fp,0(sp)
   434a0:	dec00204 	addi	sp,sp,8
   434a4:	f800283a 	ret

000434a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   434a8:	defff904 	addi	sp,sp,-28
   434ac:	dfc00615 	stw	ra,24(sp)
   434b0:	df000515 	stw	fp,20(sp)
   434b4:	df000504 	addi	fp,sp,20
   434b8:	e13ffd15 	stw	r4,-12(fp)
   434bc:	e17ffe15 	stw	r5,-8(fp)
   434c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   434c4:	e0bffd17 	ldw	r2,-12(fp)
   434c8:	10000816 	blt	r2,zero,434ec <read+0x44>
   434cc:	e13ffd17 	ldw	r4,-12(fp)
   434d0:	01400304 	movi	r5,12
   434d4:	0042e100 	call	42e10 <__mulsi3>
   434d8:	1007883a 	mov	r3,r2
   434dc:	00800134 	movhi	r2,4
   434e0:	10976604 	addi	r2,r2,23960
   434e4:	1885883a 	add	r2,r3,r2
   434e8:	00000106 	br	434f0 <read+0x48>
   434ec:	0005883a 	mov	r2,zero
   434f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   434f4:	e0bffb17 	ldw	r2,-20(fp)
   434f8:	10002226 	beq	r2,zero,43584 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   434fc:	e0bffb17 	ldw	r2,-20(fp)
   43500:	10800217 	ldw	r2,8(r2)
   43504:	108000cc 	andi	r2,r2,3
   43508:	10800060 	cmpeqi	r2,r2,1
   4350c:	1000181e 	bne	r2,zero,43570 <read+0xc8>
        (fd->dev->read))
   43510:	e0bffb17 	ldw	r2,-20(fp)
   43514:	10800017 	ldw	r2,0(r2)
   43518:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4351c:	10001426 	beq	r2,zero,43570 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43520:	e0bffb17 	ldw	r2,-20(fp)
   43524:	10800017 	ldw	r2,0(r2)
   43528:	10800517 	ldw	r2,20(r2)
   4352c:	e0ffff17 	ldw	r3,-4(fp)
   43530:	e13ffb17 	ldw	r4,-20(fp)
   43534:	e17ffe17 	ldw	r5,-8(fp)
   43538:	180d883a 	mov	r6,r3
   4353c:	103ee83a 	callr	r2
   43540:	e0bffc15 	stw	r2,-16(fp)
   43544:	e0bffc17 	ldw	r2,-16(fp)
   43548:	1000070e 	bge	r2,zero,43568 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4354c:	00434580 	call	43458 <alt_get_errno>
   43550:	1007883a 	mov	r3,r2
   43554:	e0bffc17 	ldw	r2,-16(fp)
   43558:	0085c83a 	sub	r2,zero,r2
   4355c:	18800015 	stw	r2,0(r3)
          return -1;
   43560:	00bfffc4 	movi	r2,-1
   43564:	00000c06 	br	43598 <read+0xf0>
        }
        return rval;
   43568:	e0bffc17 	ldw	r2,-16(fp)
   4356c:	00000a06 	br	43598 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43570:	00434580 	call	43458 <alt_get_errno>
   43574:	1007883a 	mov	r3,r2
   43578:	00800344 	movi	r2,13
   4357c:	18800015 	stw	r2,0(r3)
   43580:	00000406 	br	43594 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43584:	00434580 	call	43458 <alt_get_errno>
   43588:	1007883a 	mov	r3,r2
   4358c:	00801444 	movi	r2,81
   43590:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43594:	00bfffc4 	movi	r2,-1
}
   43598:	e037883a 	mov	sp,fp
   4359c:	dfc00117 	ldw	ra,4(sp)
   435a0:	df000017 	ldw	fp,0(sp)
   435a4:	dec00204 	addi	sp,sp,8
   435a8:	f800283a 	ret

000435ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   435ac:	defffc04 	addi	sp,sp,-16
   435b0:	dfc00315 	stw	ra,12(sp)
   435b4:	df000215 	stw	fp,8(sp)
   435b8:	dc000115 	stw	r16,4(sp)
   435bc:	df000204 	addi	fp,sp,8
   435c0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   435c4:	e0bffe17 	ldw	r2,-8(fp)
   435c8:	108000d0 	cmplti	r2,r2,3
   435cc:	1000111e 	bne	r2,zero,43614 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   435d0:	04000134 	movhi	r16,4
   435d4:	84176604 	addi	r16,r16,23960
   435d8:	e0bffe17 	ldw	r2,-8(fp)
   435dc:	1009883a 	mov	r4,r2
   435e0:	01400304 	movi	r5,12
   435e4:	0042e100 	call	42e10 <__mulsi3>
   435e8:	8085883a 	add	r2,r16,r2
   435ec:	10800204 	addi	r2,r2,8
   435f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   435f4:	04000134 	movhi	r16,4
   435f8:	84176604 	addi	r16,r16,23960
   435fc:	e0bffe17 	ldw	r2,-8(fp)
   43600:	1009883a 	mov	r4,r2
   43604:	01400304 	movi	r5,12
   43608:	0042e100 	call	42e10 <__mulsi3>
   4360c:	8085883a 	add	r2,r16,r2
   43610:	10000015 	stw	zero,0(r2)
  }
}
   43614:	e6ffff04 	addi	sp,fp,-4
   43618:	dfc00217 	ldw	ra,8(sp)
   4361c:	df000117 	ldw	fp,4(sp)
   43620:	dc000017 	ldw	r16,0(sp)
   43624:	dec00304 	addi	sp,sp,12
   43628:	f800283a 	ret

0004362c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4362c:	defff904 	addi	sp,sp,-28
   43630:	df000615 	stw	fp,24(sp)
   43634:	df000604 	addi	fp,sp,24
   43638:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4363c:	0005303a 	rdctl	r2,status
   43640:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43644:	e0fffc17 	ldw	r3,-16(fp)
   43648:	00bfff84 	movi	r2,-2
   4364c:	1884703a 	and	r2,r3,r2
   43650:	1001703a 	wrctl	status,r2
  
  return context;
   43654:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43658:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4365c:	d0a00a17 	ldw	r2,-32728(gp)
   43660:	10c000c4 	addi	r3,r2,3
   43664:	00bfff04 	movi	r2,-4
   43668:	1884703a 	and	r2,r3,r2
   4366c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43670:	d0e00a17 	ldw	r3,-32728(gp)
   43674:	e0bfff17 	ldw	r2,-4(fp)
   43678:	1887883a 	add	r3,r3,r2
   4367c:	008001f4 	movhi	r2,7
   43680:	10835004 	addi	r2,r2,3392
   43684:	10c0062e 	bgeu	r2,r3,436a0 <sbrk+0x74>
   43688:	e0bffa17 	ldw	r2,-24(fp)
   4368c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43690:	e0bffd17 	ldw	r2,-12(fp)
   43694:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43698:	00bfffc4 	movi	r2,-1
   4369c:	00000b06 	br	436cc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   436a0:	d0a00a17 	ldw	r2,-32728(gp)
   436a4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   436a8:	d0e00a17 	ldw	r3,-32728(gp)
   436ac:	e0bfff17 	ldw	r2,-4(fp)
   436b0:	1885883a 	add	r2,r3,r2
   436b4:	d0a00a15 	stw	r2,-32728(gp)
   436b8:	e0bffa17 	ldw	r2,-24(fp)
   436bc:	e0bffe15 	stw	r2,-8(fp)
   436c0:	e0bffe17 	ldw	r2,-8(fp)
   436c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   436c8:	e0bffb17 	ldw	r2,-20(fp)
} 
   436cc:	e037883a 	mov	sp,fp
   436d0:	df000017 	ldw	fp,0(sp)
   436d4:	dec00104 	addi	sp,sp,4
   436d8:	f800283a 	ret

000436dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   436dc:	defffe04 	addi	sp,sp,-8
   436e0:	dfc00115 	stw	ra,4(sp)
   436e4:	df000015 	stw	fp,0(sp)
   436e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   436ec:	00800134 	movhi	r2,4
   436f0:	109be704 	addi	r2,r2,28572
   436f4:	10800017 	ldw	r2,0(r2)
   436f8:	10000526 	beq	r2,zero,43710 <alt_get_errno+0x34>
   436fc:	00800134 	movhi	r2,4
   43700:	109be704 	addi	r2,r2,28572
   43704:	10800017 	ldw	r2,0(r2)
   43708:	103ee83a 	callr	r2
   4370c:	00000206 	br	43718 <alt_get_errno+0x3c>
   43710:	00800174 	movhi	r2,5
   43714:	10a28a04 	addi	r2,r2,-30168
}
   43718:	e037883a 	mov	sp,fp
   4371c:	dfc00117 	ldw	ra,4(sp)
   43720:	df000017 	ldw	fp,0(sp)
   43724:	dec00204 	addi	sp,sp,8
   43728:	f800283a 	ret

0004372c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4372c:	defff904 	addi	sp,sp,-28
   43730:	dfc00615 	stw	ra,24(sp)
   43734:	df000515 	stw	fp,20(sp)
   43738:	df000504 	addi	fp,sp,20
   4373c:	e13ffd15 	stw	r4,-12(fp)
   43740:	e17ffe15 	stw	r5,-8(fp)
   43744:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43748:	e0bffd17 	ldw	r2,-12(fp)
   4374c:	10000816 	blt	r2,zero,43770 <write+0x44>
   43750:	e13ffd17 	ldw	r4,-12(fp)
   43754:	01400304 	movi	r5,12
   43758:	0042e100 	call	42e10 <__mulsi3>
   4375c:	1007883a 	mov	r3,r2
   43760:	00800134 	movhi	r2,4
   43764:	10976604 	addi	r2,r2,23960
   43768:	1885883a 	add	r2,r3,r2
   4376c:	00000106 	br	43774 <write+0x48>
   43770:	0005883a 	mov	r2,zero
   43774:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43778:	e0bffb17 	ldw	r2,-20(fp)
   4377c:	10002126 	beq	r2,zero,43804 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43780:	e0bffb17 	ldw	r2,-20(fp)
   43784:	10800217 	ldw	r2,8(r2)
   43788:	108000cc 	andi	r2,r2,3
   4378c:	10001826 	beq	r2,zero,437f0 <write+0xc4>
   43790:	e0bffb17 	ldw	r2,-20(fp)
   43794:	10800017 	ldw	r2,0(r2)
   43798:	10800617 	ldw	r2,24(r2)
   4379c:	10001426 	beq	r2,zero,437f0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   437a0:	e0bffb17 	ldw	r2,-20(fp)
   437a4:	10800017 	ldw	r2,0(r2)
   437a8:	10800617 	ldw	r2,24(r2)
   437ac:	e0ffff17 	ldw	r3,-4(fp)
   437b0:	e13ffb17 	ldw	r4,-20(fp)
   437b4:	e17ffe17 	ldw	r5,-8(fp)
   437b8:	180d883a 	mov	r6,r3
   437bc:	103ee83a 	callr	r2
   437c0:	e0bffc15 	stw	r2,-16(fp)
   437c4:	e0bffc17 	ldw	r2,-16(fp)
   437c8:	1000070e 	bge	r2,zero,437e8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   437cc:	00436dc0 	call	436dc <alt_get_errno>
   437d0:	1007883a 	mov	r3,r2
   437d4:	e0bffc17 	ldw	r2,-16(fp)
   437d8:	0085c83a 	sub	r2,zero,r2
   437dc:	18800015 	stw	r2,0(r3)
        return -1;
   437e0:	00bfffc4 	movi	r2,-1
   437e4:	00000c06 	br	43818 <write+0xec>
      }
      return rval;
   437e8:	e0bffc17 	ldw	r2,-16(fp)
   437ec:	00000a06 	br	43818 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   437f0:	00436dc0 	call	436dc <alt_get_errno>
   437f4:	1007883a 	mov	r3,r2
   437f8:	00800344 	movi	r2,13
   437fc:	18800015 	stw	r2,0(r3)
   43800:	00000406 	br	43814 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43804:	00436dc0 	call	436dc <alt_get_errno>
   43808:	1007883a 	mov	r3,r2
   4380c:	00801444 	movi	r2,81
   43810:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43814:	00bfffc4 	movi	r2,-1
}
   43818:	e037883a 	mov	sp,fp
   4381c:	dfc00117 	ldw	ra,4(sp)
   43820:	df000017 	ldw	fp,0(sp)
   43824:	dec00204 	addi	sp,sp,8
   43828:	f800283a 	ret

0004382c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4382c:	defffd04 	addi	sp,sp,-12
   43830:	dfc00215 	stw	ra,8(sp)
   43834:	df000115 	stw	fp,4(sp)
   43838:	df000104 	addi	fp,sp,4
   4383c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43840:	e13fff17 	ldw	r4,-4(fp)
   43844:	01400134 	movhi	r5,4
   43848:	295be404 	addi	r5,r5,28560
   4384c:	00444d80 	call	444d8 <alt_dev_llist_insert>
}
   43850:	e037883a 	mov	sp,fp
   43854:	dfc00117 	ldw	ra,4(sp)
   43858:	df000017 	ldw	fp,0(sp)
   4385c:	dec00204 	addi	sp,sp,8
   43860:	f800283a 	ret

00043864 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43864:	defffd04 	addi	sp,sp,-12
   43868:	dfc00215 	stw	ra,8(sp)
   4386c:	df000115 	stw	fp,4(sp)
   43870:	df000104 	addi	fp,sp,4
   43874:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROC, nios2_proc);
   43878:	0044eb80 	call	44eb8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4387c:	00800044 	movi	r2,1
   43880:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43884:	e037883a 	mov	sp,fp
   43888:	dfc00117 	ldw	ra,4(sp)
   4388c:	df000017 	ldw	fp,0(sp)
   43890:	dec00204 	addi	sp,sp,8
   43894:	f800283a 	ret

00043898 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43898:	defffe04 	addi	sp,sp,-8
   4389c:	dfc00115 	stw	ra,4(sp)
   438a0:	df000015 	stw	fp,0(sp)
   438a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   438a8:	01000134 	movhi	r4,4
   438ac:	2117d004 	addi	r4,r4,24384
   438b0:	000b883a 	mov	r5,zero
   438b4:	000d883a 	mov	r6,zero
   438b8:	0043a440 	call	43a44 <altera_avalon_jtag_uart_init>
   438bc:	01000134 	movhi	r4,4
   438c0:	2117c604 	addi	r4,r4,24344
   438c4:	004382c0 	call	4382c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1337, sysid_1337);
   438c8:	0001883a 	nop
}
   438cc:	e037883a 	mov	sp,fp
   438d0:	dfc00117 	ldw	ra,4(sp)
   438d4:	df000017 	ldw	fp,0(sp)
   438d8:	dec00204 	addi	sp,sp,8
   438dc:	f800283a 	ret

000438e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   438e0:	defffa04 	addi	sp,sp,-24
   438e4:	dfc00515 	stw	ra,20(sp)
   438e8:	df000415 	stw	fp,16(sp)
   438ec:	df000404 	addi	fp,sp,16
   438f0:	e13ffd15 	stw	r4,-12(fp)
   438f4:	e17ffe15 	stw	r5,-8(fp)
   438f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   438fc:	e0bffd17 	ldw	r2,-12(fp)
   43900:	10800017 	ldw	r2,0(r2)
   43904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43908:	e0bffc17 	ldw	r2,-16(fp)
   4390c:	10c00a04 	addi	r3,r2,40
   43910:	e0bffd17 	ldw	r2,-12(fp)
   43914:	10800217 	ldw	r2,8(r2)
   43918:	1809883a 	mov	r4,r3
   4391c:	e17ffe17 	ldw	r5,-8(fp)
   43920:	e1bfff17 	ldw	r6,-4(fp)
   43924:	100f883a 	mov	r7,r2
   43928:	0043f080 	call	43f08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4392c:	e037883a 	mov	sp,fp
   43930:	dfc00117 	ldw	ra,4(sp)
   43934:	df000017 	ldw	fp,0(sp)
   43938:	dec00204 	addi	sp,sp,8
   4393c:	f800283a 	ret

00043940 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43940:	defffa04 	addi	sp,sp,-24
   43944:	dfc00515 	stw	ra,20(sp)
   43948:	df000415 	stw	fp,16(sp)
   4394c:	df000404 	addi	fp,sp,16
   43950:	e13ffd15 	stw	r4,-12(fp)
   43954:	e17ffe15 	stw	r5,-8(fp)
   43958:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4395c:	e0bffd17 	ldw	r2,-12(fp)
   43960:	10800017 	ldw	r2,0(r2)
   43964:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43968:	e0bffc17 	ldw	r2,-16(fp)
   4396c:	10c00a04 	addi	r3,r2,40
   43970:	e0bffd17 	ldw	r2,-12(fp)
   43974:	10800217 	ldw	r2,8(r2)
   43978:	1809883a 	mov	r4,r3
   4397c:	e17ffe17 	ldw	r5,-8(fp)
   43980:	e1bfff17 	ldw	r6,-4(fp)
   43984:	100f883a 	mov	r7,r2
   43988:	00441140 	call	44114 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4398c:	e037883a 	mov	sp,fp
   43990:	dfc00117 	ldw	ra,4(sp)
   43994:	df000017 	ldw	fp,0(sp)
   43998:	dec00204 	addi	sp,sp,8
   4399c:	f800283a 	ret

000439a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   439a0:	defffc04 	addi	sp,sp,-16
   439a4:	dfc00315 	stw	ra,12(sp)
   439a8:	df000215 	stw	fp,8(sp)
   439ac:	df000204 	addi	fp,sp,8
   439b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   439b4:	e0bfff17 	ldw	r2,-4(fp)
   439b8:	10800017 	ldw	r2,0(r2)
   439bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   439c0:	e0bffe17 	ldw	r2,-8(fp)
   439c4:	10c00a04 	addi	r3,r2,40
   439c8:	e0bfff17 	ldw	r2,-4(fp)
   439cc:	10800217 	ldw	r2,8(r2)
   439d0:	1809883a 	mov	r4,r3
   439d4:	100b883a 	mov	r5,r2
   439d8:	0043db40 	call	43db4 <altera_avalon_jtag_uart_close>
}
   439dc:	e037883a 	mov	sp,fp
   439e0:	dfc00117 	ldw	ra,4(sp)
   439e4:	df000017 	ldw	fp,0(sp)
   439e8:	dec00204 	addi	sp,sp,8
   439ec:	f800283a 	ret

000439f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   439f0:	defffa04 	addi	sp,sp,-24
   439f4:	dfc00515 	stw	ra,20(sp)
   439f8:	df000415 	stw	fp,16(sp)
   439fc:	df000404 	addi	fp,sp,16
   43a00:	e13ffd15 	stw	r4,-12(fp)
   43a04:	e17ffe15 	stw	r5,-8(fp)
   43a08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43a0c:	e0bffd17 	ldw	r2,-12(fp)
   43a10:	10800017 	ldw	r2,0(r2)
   43a14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43a18:	e0bffc17 	ldw	r2,-16(fp)
   43a1c:	10800a04 	addi	r2,r2,40
   43a20:	1009883a 	mov	r4,r2
   43a24:	e17ffe17 	ldw	r5,-8(fp)
   43a28:	e1bfff17 	ldw	r6,-4(fp)
   43a2c:	0043e1c0 	call	43e1c <altera_avalon_jtag_uart_ioctl>
}
   43a30:	e037883a 	mov	sp,fp
   43a34:	dfc00117 	ldw	ra,4(sp)
   43a38:	df000017 	ldw	fp,0(sp)
   43a3c:	dec00204 	addi	sp,sp,8
   43a40:	f800283a 	ret

00043a44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43a44:	defffa04 	addi	sp,sp,-24
   43a48:	dfc00515 	stw	ra,20(sp)
   43a4c:	df000415 	stw	fp,16(sp)
   43a50:	df000404 	addi	fp,sp,16
   43a54:	e13ffd15 	stw	r4,-12(fp)
   43a58:	e17ffe15 	stw	r5,-8(fp)
   43a5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43a60:	e0bffd17 	ldw	r2,-12(fp)
   43a64:	00c00044 	movi	r3,1
   43a68:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43a6c:	e0bffd17 	ldw	r2,-12(fp)
   43a70:	10800017 	ldw	r2,0(r2)
   43a74:	10800104 	addi	r2,r2,4
   43a78:	1007883a 	mov	r3,r2
   43a7c:	e0bffd17 	ldw	r2,-12(fp)
   43a80:	10800817 	ldw	r2,32(r2)
   43a84:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43a88:	e0fffe17 	ldw	r3,-8(fp)
   43a8c:	e0bfff17 	ldw	r2,-4(fp)
   43a90:	d8000015 	stw	zero,0(sp)
   43a94:	1809883a 	mov	r4,r3
   43a98:	100b883a 	mov	r5,r2
   43a9c:	01800134 	movhi	r6,4
   43aa0:	318ec204 	addi	r6,r6,15112
   43aa4:	e1fffd17 	ldw	r7,-12(fp)
   43aa8:	00446500 	call	44650 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43aac:	e0bffd17 	ldw	r2,-12(fp)
   43ab0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43ab4:	e0bffd17 	ldw	r2,-12(fp)
   43ab8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43abc:	00800174 	movhi	r2,5
   43ac0:	10a28f04 	addi	r2,r2,-30148
   43ac4:	10800017 	ldw	r2,0(r2)
   43ac8:	1809883a 	mov	r4,r3
   43acc:	100b883a 	mov	r5,r2
   43ad0:	01800134 	movhi	r6,4
   43ad4:	318f4304 	addi	r6,r6,15628
   43ad8:	e1fffd17 	ldw	r7,-12(fp)
   43adc:	004432c0 	call	4432c <alt_alarm_start>
   43ae0:	1000040e 	bge	r2,zero,43af4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43ae4:	e0fffd17 	ldw	r3,-12(fp)
   43ae8:	00a00034 	movhi	r2,32768
   43aec:	10bfffc4 	addi	r2,r2,-1
   43af0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43af4:	e037883a 	mov	sp,fp
   43af8:	dfc00117 	ldw	ra,4(sp)
   43afc:	df000017 	ldw	fp,0(sp)
   43b00:	dec00204 	addi	sp,sp,8
   43b04:	f800283a 	ret

00043b08 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43b08:	defff804 	addi	sp,sp,-32
   43b0c:	df000715 	stw	fp,28(sp)
   43b10:	df000704 	addi	fp,sp,28
   43b14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43b18:	e0bfff17 	ldw	r2,-4(fp)
   43b1c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   43b20:	e0bffb17 	ldw	r2,-20(fp)
   43b24:	10800017 	ldw	r2,0(r2)
   43b28:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43b2c:	e0bffc17 	ldw	r2,-16(fp)
   43b30:	10800104 	addi	r2,r2,4
   43b34:	10800037 	ldwio	r2,0(r2)
   43b38:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43b3c:	e0bffd17 	ldw	r2,-12(fp)
   43b40:	1080c00c 	andi	r2,r2,768
   43b44:	1000011e 	bne	r2,zero,43b4c <altera_avalon_jtag_uart_irq+0x44>
      break;
   43b48:	00006c06 	br	43cfc <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43b4c:	e0bffd17 	ldw	r2,-12(fp)
   43b50:	1080400c 	andi	r2,r2,256
   43b54:	10003426 	beq	r2,zero,43c28 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43b58:	00800074 	movhi	r2,1
   43b5c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43b60:	e0bffb17 	ldw	r2,-20(fp)
   43b64:	10800a17 	ldw	r2,40(r2)
   43b68:	10800044 	addi	r2,r2,1
   43b6c:	1081ffcc 	andi	r2,r2,2047
   43b70:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   43b74:	e0bffb17 	ldw	r2,-20(fp)
   43b78:	10c00b17 	ldw	r3,44(r2)
   43b7c:	e0bffe17 	ldw	r2,-8(fp)
   43b80:	1880011e 	bne	r3,r2,43b88 <altera_avalon_jtag_uart_irq+0x80>
          break;
   43b84:	00001606 	br	43be0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43b88:	e0bffc17 	ldw	r2,-16(fp)
   43b8c:	10800037 	ldwio	r2,0(r2)
   43b90:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43b94:	e0bff917 	ldw	r2,-28(fp)
   43b98:	10a0000c 	andi	r2,r2,32768
   43b9c:	1000011e 	bne	r2,zero,43ba4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   43ba0:	00000f06 	br	43be0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43ba4:	e0bffb17 	ldw	r2,-20(fp)
   43ba8:	10800a17 	ldw	r2,40(r2)
   43bac:	e0fff917 	ldw	r3,-28(fp)
   43bb0:	1809883a 	mov	r4,r3
   43bb4:	e0fffb17 	ldw	r3,-20(fp)
   43bb8:	1885883a 	add	r2,r3,r2
   43bbc:	10800e04 	addi	r2,r2,56
   43bc0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43bc4:	e0bffb17 	ldw	r2,-20(fp)
   43bc8:	10800a17 	ldw	r2,40(r2)
   43bcc:	10800044 	addi	r2,r2,1
   43bd0:	10c1ffcc 	andi	r3,r2,2047
   43bd4:	e0bffb17 	ldw	r2,-20(fp)
   43bd8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43bdc:	003fe006 	br	43b60 <__alt_data_end+0xfffd2e20>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43be0:	e0bff917 	ldw	r2,-28(fp)
   43be4:	10bfffec 	andhi	r2,r2,65535
   43be8:	10000f26 	beq	r2,zero,43c28 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43bec:	e0bffb17 	ldw	r2,-20(fp)
   43bf0:	10c00817 	ldw	r3,32(r2)
   43bf4:	00bfff84 	movi	r2,-2
   43bf8:	1886703a 	and	r3,r3,r2
   43bfc:	e0bffb17 	ldw	r2,-20(fp)
   43c00:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43c04:	e0bffc17 	ldw	r2,-16(fp)
   43c08:	10800104 	addi	r2,r2,4
   43c0c:	1007883a 	mov	r3,r2
   43c10:	e0bffb17 	ldw	r2,-20(fp)
   43c14:	10800817 	ldw	r2,32(r2)
   43c18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43c1c:	e0bffc17 	ldw	r2,-16(fp)
   43c20:	10800104 	addi	r2,r2,4
   43c24:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43c28:	e0bffd17 	ldw	r2,-12(fp)
   43c2c:	1080800c 	andi	r2,r2,512
   43c30:	10003126 	beq	r2,zero,43cf8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43c34:	e0bffd17 	ldw	r2,-12(fp)
   43c38:	1004d43a 	srli	r2,r2,16
   43c3c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43c40:	00001406 	br	43c94 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43c44:	e0bffc17 	ldw	r2,-16(fp)
   43c48:	e0fffb17 	ldw	r3,-20(fp)
   43c4c:	18c00d17 	ldw	r3,52(r3)
   43c50:	e13ffb17 	ldw	r4,-20(fp)
   43c54:	20c7883a 	add	r3,r4,r3
   43c58:	18c20e04 	addi	r3,r3,2104
   43c5c:	18c00003 	ldbu	r3,0(r3)
   43c60:	18c03fcc 	andi	r3,r3,255
   43c64:	18c0201c 	xori	r3,r3,128
   43c68:	18ffe004 	addi	r3,r3,-128
   43c6c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43c70:	e0bffb17 	ldw	r2,-20(fp)
   43c74:	10800d17 	ldw	r2,52(r2)
   43c78:	10800044 	addi	r2,r2,1
   43c7c:	10c1ffcc 	andi	r3,r2,2047
   43c80:	e0bffb17 	ldw	r2,-20(fp)
   43c84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43c88:	e0bffa17 	ldw	r2,-24(fp)
   43c8c:	10bfffc4 	addi	r2,r2,-1
   43c90:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43c94:	e0bffa17 	ldw	r2,-24(fp)
   43c98:	10000526 	beq	r2,zero,43cb0 <altera_avalon_jtag_uart_irq+0x1a8>
   43c9c:	e0bffb17 	ldw	r2,-20(fp)
   43ca0:	10c00d17 	ldw	r3,52(r2)
   43ca4:	e0bffb17 	ldw	r2,-20(fp)
   43ca8:	10800c17 	ldw	r2,48(r2)
   43cac:	18bfe51e 	bne	r3,r2,43c44 <__alt_data_end+0xfffd2f04>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43cb0:	e0bffa17 	ldw	r2,-24(fp)
   43cb4:	10001026 	beq	r2,zero,43cf8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43cb8:	e0bffb17 	ldw	r2,-20(fp)
   43cbc:	10c00817 	ldw	r3,32(r2)
   43cc0:	00bfff44 	movi	r2,-3
   43cc4:	1886703a 	and	r3,r3,r2
   43cc8:	e0bffb17 	ldw	r2,-20(fp)
   43ccc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43cd0:	e0bffb17 	ldw	r2,-20(fp)
   43cd4:	10800017 	ldw	r2,0(r2)
   43cd8:	10800104 	addi	r2,r2,4
   43cdc:	1007883a 	mov	r3,r2
   43ce0:	e0bffb17 	ldw	r2,-20(fp)
   43ce4:	10800817 	ldw	r2,32(r2)
   43ce8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43cec:	e0bffc17 	ldw	r2,-16(fp)
   43cf0:	10800104 	addi	r2,r2,4
   43cf4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   43cf8:	003f8c06 	br	43b2c <__alt_data_end+0xfffd2dec>
}
   43cfc:	e037883a 	mov	sp,fp
   43d00:	df000017 	ldw	fp,0(sp)
   43d04:	dec00104 	addi	sp,sp,4
   43d08:	f800283a 	ret

00043d0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   43d0c:	defff804 	addi	sp,sp,-32
   43d10:	df000715 	stw	fp,28(sp)
   43d14:	df000704 	addi	fp,sp,28
   43d18:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   43d1c:	e0bffb17 	ldw	r2,-20(fp)
   43d20:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   43d24:	e0bff917 	ldw	r2,-28(fp)
   43d28:	10800017 	ldw	r2,0(r2)
   43d2c:	10800104 	addi	r2,r2,4
   43d30:	10800037 	ldwio	r2,0(r2)
   43d34:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   43d38:	e0bffa17 	ldw	r2,-24(fp)
   43d3c:	1081000c 	andi	r2,r2,1024
   43d40:	10000b26 	beq	r2,zero,43d70 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   43d44:	e0bff917 	ldw	r2,-28(fp)
   43d48:	10800017 	ldw	r2,0(r2)
   43d4c:	10800104 	addi	r2,r2,4
   43d50:	1007883a 	mov	r3,r2
   43d54:	e0bff917 	ldw	r2,-28(fp)
   43d58:	10800817 	ldw	r2,32(r2)
   43d5c:	10810014 	ori	r2,r2,1024
   43d60:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   43d64:	e0bff917 	ldw	r2,-28(fp)
   43d68:	10000915 	stw	zero,36(r2)
   43d6c:	00000a06 	br	43d98 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   43d70:	e0bff917 	ldw	r2,-28(fp)
   43d74:	10c00917 	ldw	r3,36(r2)
   43d78:	00a00034 	movhi	r2,32768
   43d7c:	10bfff04 	addi	r2,r2,-4
   43d80:	10c00536 	bltu	r2,r3,43d98 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   43d84:	e0bff917 	ldw	r2,-28(fp)
   43d88:	10800917 	ldw	r2,36(r2)
   43d8c:	10c00044 	addi	r3,r2,1
   43d90:	e0bff917 	ldw	r2,-28(fp)
   43d94:	10c00915 	stw	r3,36(r2)
   43d98:	00800174 	movhi	r2,5
   43d9c:	10a28f04 	addi	r2,r2,-30148
   43da0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   43da4:	e037883a 	mov	sp,fp
   43da8:	df000017 	ldw	fp,0(sp)
   43dac:	dec00104 	addi	sp,sp,4
   43db0:	f800283a 	ret

00043db4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   43db4:	defffd04 	addi	sp,sp,-12
   43db8:	df000215 	stw	fp,8(sp)
   43dbc:	df000204 	addi	fp,sp,8
   43dc0:	e13ffe15 	stw	r4,-8(fp)
   43dc4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43dc8:	00000506 	br	43de0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   43dcc:	e0bfff17 	ldw	r2,-4(fp)
   43dd0:	1090000c 	andi	r2,r2,16384
   43dd4:	10000226 	beq	r2,zero,43de0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   43dd8:	00bffd44 	movi	r2,-11
   43ddc:	00000b06 	br	43e0c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43de0:	e0bffe17 	ldw	r2,-8(fp)
   43de4:	10c00d17 	ldw	r3,52(r2)
   43de8:	e0bffe17 	ldw	r2,-8(fp)
   43dec:	10800c17 	ldw	r2,48(r2)
   43df0:	18800526 	beq	r3,r2,43e08 <altera_avalon_jtag_uart_close+0x54>
   43df4:	e0bffe17 	ldw	r2,-8(fp)
   43df8:	10c00917 	ldw	r3,36(r2)
   43dfc:	e0bffe17 	ldw	r2,-8(fp)
   43e00:	10800117 	ldw	r2,4(r2)
   43e04:	18bff136 	bltu	r3,r2,43dcc <__alt_data_end+0xfffd308c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   43e08:	0005883a 	mov	r2,zero
}
   43e0c:	e037883a 	mov	sp,fp
   43e10:	df000017 	ldw	fp,0(sp)
   43e14:	dec00104 	addi	sp,sp,4
   43e18:	f800283a 	ret

00043e1c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   43e1c:	defffa04 	addi	sp,sp,-24
   43e20:	df000515 	stw	fp,20(sp)
   43e24:	df000504 	addi	fp,sp,20
   43e28:	e13ffd15 	stw	r4,-12(fp)
   43e2c:	e17ffe15 	stw	r5,-8(fp)
   43e30:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   43e34:	00bff9c4 	movi	r2,-25
   43e38:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   43e3c:	e0bffe17 	ldw	r2,-8(fp)
   43e40:	10da8060 	cmpeqi	r3,r2,27137
   43e44:	1800031e 	bne	r3,zero,43e54 <altera_avalon_jtag_uart_ioctl+0x38>
   43e48:	109a80a0 	cmpeqi	r2,r2,27138
   43e4c:	1000191e 	bne	r2,zero,43eb4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   43e50:	00002806 	br	43ef4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   43e54:	e0bffd17 	ldw	r2,-12(fp)
   43e58:	10c00117 	ldw	r3,4(r2)
   43e5c:	00a00034 	movhi	r2,32768
   43e60:	10bfffc4 	addi	r2,r2,-1
   43e64:	18801226 	beq	r3,r2,43eb0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   43e68:	e0bfff17 	ldw	r2,-4(fp)
   43e6c:	10800017 	ldw	r2,0(r2)
   43e70:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   43e74:	e0bffc17 	ldw	r2,-16(fp)
   43e78:	10800090 	cmplti	r2,r2,2
   43e7c:	1000061e 	bne	r2,zero,43e98 <altera_avalon_jtag_uart_ioctl+0x7c>
   43e80:	e0fffc17 	ldw	r3,-16(fp)
   43e84:	00a00034 	movhi	r2,32768
   43e88:	10bfffc4 	addi	r2,r2,-1
   43e8c:	18800226 	beq	r3,r2,43e98 <altera_avalon_jtag_uart_ioctl+0x7c>
   43e90:	e0bffc17 	ldw	r2,-16(fp)
   43e94:	00000206 	br	43ea0 <altera_avalon_jtag_uart_ioctl+0x84>
   43e98:	00a00034 	movhi	r2,32768
   43e9c:	10bfff84 	addi	r2,r2,-2
   43ea0:	e0fffd17 	ldw	r3,-12(fp)
   43ea4:	18800115 	stw	r2,4(r3)
      rc = 0;
   43ea8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   43eac:	00001106 	br	43ef4 <altera_avalon_jtag_uart_ioctl+0xd8>
   43eb0:	00001006 	br	43ef4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   43eb4:	e0bffd17 	ldw	r2,-12(fp)
   43eb8:	10c00117 	ldw	r3,4(r2)
   43ebc:	00a00034 	movhi	r2,32768
   43ec0:	10bfffc4 	addi	r2,r2,-1
   43ec4:	18800a26 	beq	r3,r2,43ef0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   43ec8:	e0bffd17 	ldw	r2,-12(fp)
   43ecc:	10c00917 	ldw	r3,36(r2)
   43ed0:	e0bffd17 	ldw	r2,-12(fp)
   43ed4:	10800117 	ldw	r2,4(r2)
   43ed8:	1885803a 	cmpltu	r2,r3,r2
   43edc:	10c03fcc 	andi	r3,r2,255
   43ee0:	e0bfff17 	ldw	r2,-4(fp)
   43ee4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   43ee8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   43eec:	00000006 	br	43ef0 <altera_avalon_jtag_uart_ioctl+0xd4>
   43ef0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   43ef4:	e0bffb17 	ldw	r2,-20(fp)
}
   43ef8:	e037883a 	mov	sp,fp
   43efc:	df000017 	ldw	fp,0(sp)
   43f00:	dec00104 	addi	sp,sp,4
   43f04:	f800283a 	ret

00043f08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   43f08:	defff304 	addi	sp,sp,-52
   43f0c:	dfc00c15 	stw	ra,48(sp)
   43f10:	df000b15 	stw	fp,44(sp)
   43f14:	df000b04 	addi	fp,sp,44
   43f18:	e13ffc15 	stw	r4,-16(fp)
   43f1c:	e17ffd15 	stw	r5,-12(fp)
   43f20:	e1bffe15 	stw	r6,-8(fp)
   43f24:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   43f28:	e0bffd17 	ldw	r2,-12(fp)
   43f2c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   43f30:	00004906 	br	44058 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   43f34:	e0bffc17 	ldw	r2,-16(fp)
   43f38:	10800a17 	ldw	r2,40(r2)
   43f3c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   43f40:	e0bffc17 	ldw	r2,-16(fp)
   43f44:	10800b17 	ldw	r2,44(r2)
   43f48:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   43f4c:	e0fff717 	ldw	r3,-36(fp)
   43f50:	e0bff817 	ldw	r2,-32(fp)
   43f54:	18800536 	bltu	r3,r2,43f6c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   43f58:	e0fff717 	ldw	r3,-36(fp)
   43f5c:	e0bff817 	ldw	r2,-32(fp)
   43f60:	1885c83a 	sub	r2,r3,r2
   43f64:	e0bff615 	stw	r2,-40(fp)
   43f68:	00000406 	br	43f7c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   43f6c:	00c20004 	movi	r3,2048
   43f70:	e0bff817 	ldw	r2,-32(fp)
   43f74:	1885c83a 	sub	r2,r3,r2
   43f78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   43f7c:	e0bff617 	ldw	r2,-40(fp)
   43f80:	1000011e 	bne	r2,zero,43f88 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   43f84:	00001d06 	br	43ffc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   43f88:	e0fffe17 	ldw	r3,-8(fp)
   43f8c:	e0bff617 	ldw	r2,-40(fp)
   43f90:	1880022e 	bgeu	r3,r2,43f9c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   43f94:	e0bffe17 	ldw	r2,-8(fp)
   43f98:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   43f9c:	e0bff817 	ldw	r2,-32(fp)
   43fa0:	10800e04 	addi	r2,r2,56
   43fa4:	e0fffc17 	ldw	r3,-16(fp)
   43fa8:	1885883a 	add	r2,r3,r2
   43fac:	e13ff517 	ldw	r4,-44(fp)
   43fb0:	100b883a 	mov	r5,r2
   43fb4:	e1bff617 	ldw	r6,-40(fp)
   43fb8:	00411880 	call	41188 <memcpy>
      ptr   += n;
   43fbc:	e0fff517 	ldw	r3,-44(fp)
   43fc0:	e0bff617 	ldw	r2,-40(fp)
   43fc4:	1885883a 	add	r2,r3,r2
   43fc8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   43fcc:	e0fffe17 	ldw	r3,-8(fp)
   43fd0:	e0bff617 	ldw	r2,-40(fp)
   43fd4:	1885c83a 	sub	r2,r3,r2
   43fd8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43fdc:	e0fff817 	ldw	r3,-32(fp)
   43fe0:	e0bff617 	ldw	r2,-40(fp)
   43fe4:	1885883a 	add	r2,r3,r2
   43fe8:	10c1ffcc 	andi	r3,r2,2047
   43fec:	e0bffc17 	ldw	r2,-16(fp)
   43ff0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   43ff4:	e0bffe17 	ldw	r2,-8(fp)
   43ff8:	00bfce16 	blt	zero,r2,43f34 <__alt_data_end+0xfffd31f4>

    /* If we read any data then return it */
    if (ptr != buffer)
   43ffc:	e0fff517 	ldw	r3,-44(fp)
   44000:	e0bffd17 	ldw	r2,-12(fp)
   44004:	18800126 	beq	r3,r2,4400c <altera_avalon_jtag_uart_read+0x104>
      break;
   44008:	00001506 	br	44060 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4400c:	e0bfff17 	ldw	r2,-4(fp)
   44010:	1090000c 	andi	r2,r2,16384
   44014:	10000126 	beq	r2,zero,4401c <altera_avalon_jtag_uart_read+0x114>
      break;
   44018:	00001106 	br	44060 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4401c:	0001883a 	nop
   44020:	e0bffc17 	ldw	r2,-16(fp)
   44024:	10c00a17 	ldw	r3,40(r2)
   44028:	e0bff717 	ldw	r2,-36(fp)
   4402c:	1880051e 	bne	r3,r2,44044 <altera_avalon_jtag_uart_read+0x13c>
   44030:	e0bffc17 	ldw	r2,-16(fp)
   44034:	10c00917 	ldw	r3,36(r2)
   44038:	e0bffc17 	ldw	r2,-16(fp)
   4403c:	10800117 	ldw	r2,4(r2)
   44040:	18bff736 	bltu	r3,r2,44020 <__alt_data_end+0xfffd32e0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44044:	e0bffc17 	ldw	r2,-16(fp)
   44048:	10c00a17 	ldw	r3,40(r2)
   4404c:	e0bff717 	ldw	r2,-36(fp)
   44050:	1880011e 	bne	r3,r2,44058 <altera_avalon_jtag_uart_read+0x150>
      break;
   44054:	00000206 	br	44060 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44058:	e0bffe17 	ldw	r2,-8(fp)
   4405c:	00bfb516 	blt	zero,r2,43f34 <__alt_data_end+0xfffd31f4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44060:	e0fff517 	ldw	r3,-44(fp)
   44064:	e0bffd17 	ldw	r2,-12(fp)
   44068:	18801826 	beq	r3,r2,440cc <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4406c:	0005303a 	rdctl	r2,status
   44070:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44074:	e0fffa17 	ldw	r3,-24(fp)
   44078:	00bfff84 	movi	r2,-2
   4407c:	1884703a 	and	r2,r3,r2
   44080:	1001703a 	wrctl	status,r2
  
  return context;
   44084:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44088:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4408c:	e0bffc17 	ldw	r2,-16(fp)
   44090:	10800817 	ldw	r2,32(r2)
   44094:	10c00054 	ori	r3,r2,1
   44098:	e0bffc17 	ldw	r2,-16(fp)
   4409c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   440a0:	e0bffc17 	ldw	r2,-16(fp)
   440a4:	10800017 	ldw	r2,0(r2)
   440a8:	10800104 	addi	r2,r2,4
   440ac:	1007883a 	mov	r3,r2
   440b0:	e0bffc17 	ldw	r2,-16(fp)
   440b4:	10800817 	ldw	r2,32(r2)
   440b8:	18800035 	stwio	r2,0(r3)
   440bc:	e0bff917 	ldw	r2,-28(fp)
   440c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   440c4:	e0bffb17 	ldw	r2,-20(fp)
   440c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   440cc:	e0fff517 	ldw	r3,-44(fp)
   440d0:	e0bffd17 	ldw	r2,-12(fp)
   440d4:	18800426 	beq	r3,r2,440e8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   440d8:	e0fff517 	ldw	r3,-44(fp)
   440dc:	e0bffd17 	ldw	r2,-12(fp)
   440e0:	1885c83a 	sub	r2,r3,r2
   440e4:	00000606 	br	44100 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   440e8:	e0bfff17 	ldw	r2,-4(fp)
   440ec:	1090000c 	andi	r2,r2,16384
   440f0:	10000226 	beq	r2,zero,440fc <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   440f4:	00bffd44 	movi	r2,-11
   440f8:	00000106 	br	44100 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   440fc:	00bffec4 	movi	r2,-5
}
   44100:	e037883a 	mov	sp,fp
   44104:	dfc00117 	ldw	ra,4(sp)
   44108:	df000017 	ldw	fp,0(sp)
   4410c:	dec00204 	addi	sp,sp,8
   44110:	f800283a 	ret

00044114 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44114:	defff304 	addi	sp,sp,-52
   44118:	dfc00c15 	stw	ra,48(sp)
   4411c:	df000b15 	stw	fp,44(sp)
   44120:	df000b04 	addi	fp,sp,44
   44124:	e13ffc15 	stw	r4,-16(fp)
   44128:	e17ffd15 	stw	r5,-12(fp)
   4412c:	e1bffe15 	stw	r6,-8(fp)
   44130:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   44134:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44138:	e0bffd17 	ldw	r2,-12(fp)
   4413c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44140:	00003806 	br	44224 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   44144:	e0bffc17 	ldw	r2,-16(fp)
   44148:	10800c17 	ldw	r2,48(r2)
   4414c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   44150:	e0bffc17 	ldw	r2,-16(fp)
   44154:	10800d17 	ldw	r2,52(r2)
   44158:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4415c:	e0fff817 	ldw	r3,-32(fp)
   44160:	e0bff517 	ldw	r2,-44(fp)
   44164:	1880062e 	bgeu	r3,r2,44180 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44168:	e0fff517 	ldw	r3,-44(fp)
   4416c:	e0bff817 	ldw	r2,-32(fp)
   44170:	1885c83a 	sub	r2,r3,r2
   44174:	10bfffc4 	addi	r2,r2,-1
   44178:	e0bff615 	stw	r2,-40(fp)
   4417c:	00000b06 	br	441ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44180:	e0bff517 	ldw	r2,-44(fp)
   44184:	10000526 	beq	r2,zero,4419c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44188:	00c20004 	movi	r3,2048
   4418c:	e0bff817 	ldw	r2,-32(fp)
   44190:	1885c83a 	sub	r2,r3,r2
   44194:	e0bff615 	stw	r2,-40(fp)
   44198:	00000406 	br	441ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4419c:	00c1ffc4 	movi	r3,2047
   441a0:	e0bff817 	ldw	r2,-32(fp)
   441a4:	1885c83a 	sub	r2,r3,r2
   441a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   441ac:	e0bff617 	ldw	r2,-40(fp)
   441b0:	1000011e 	bne	r2,zero,441b8 <altera_avalon_jtag_uart_write+0xa4>
        break;
   441b4:	00001d06 	br	4422c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   441b8:	e0fffe17 	ldw	r3,-8(fp)
   441bc:	e0bff617 	ldw	r2,-40(fp)
   441c0:	1880022e 	bgeu	r3,r2,441cc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   441c4:	e0bffe17 	ldw	r2,-8(fp)
   441c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   441cc:	e0bff817 	ldw	r2,-32(fp)
   441d0:	10820e04 	addi	r2,r2,2104
   441d4:	e0fffc17 	ldw	r3,-16(fp)
   441d8:	1885883a 	add	r2,r3,r2
   441dc:	1009883a 	mov	r4,r2
   441e0:	e17ffd17 	ldw	r5,-12(fp)
   441e4:	e1bff617 	ldw	r6,-40(fp)
   441e8:	00411880 	call	41188 <memcpy>
      ptr   += n;
   441ec:	e0fffd17 	ldw	r3,-12(fp)
   441f0:	e0bff617 	ldw	r2,-40(fp)
   441f4:	1885883a 	add	r2,r3,r2
   441f8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   441fc:	e0fffe17 	ldw	r3,-8(fp)
   44200:	e0bff617 	ldw	r2,-40(fp)
   44204:	1885c83a 	sub	r2,r3,r2
   44208:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4420c:	e0fff817 	ldw	r3,-32(fp)
   44210:	e0bff617 	ldw	r2,-40(fp)
   44214:	1885883a 	add	r2,r3,r2
   44218:	10c1ffcc 	andi	r3,r2,2047
   4421c:	e0bffc17 	ldw	r2,-16(fp)
   44220:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44224:	e0bffe17 	ldw	r2,-8(fp)
   44228:	00bfc616 	blt	zero,r2,44144 <__alt_data_end+0xfffd3404>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4422c:	0005303a 	rdctl	r2,status
   44230:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44234:	e0fffa17 	ldw	r3,-24(fp)
   44238:	00bfff84 	movi	r2,-2
   4423c:	1884703a 	and	r2,r3,r2
   44240:	1001703a 	wrctl	status,r2
  
  return context;
   44244:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44248:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4424c:	e0bffc17 	ldw	r2,-16(fp)
   44250:	10800817 	ldw	r2,32(r2)
   44254:	10c00094 	ori	r3,r2,2
   44258:	e0bffc17 	ldw	r2,-16(fp)
   4425c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44260:	e0bffc17 	ldw	r2,-16(fp)
   44264:	10800017 	ldw	r2,0(r2)
   44268:	10800104 	addi	r2,r2,4
   4426c:	1007883a 	mov	r3,r2
   44270:	e0bffc17 	ldw	r2,-16(fp)
   44274:	10800817 	ldw	r2,32(r2)
   44278:	18800035 	stwio	r2,0(r3)
   4427c:	e0bff917 	ldw	r2,-28(fp)
   44280:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44284:	e0bffb17 	ldw	r2,-20(fp)
   44288:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4428c:	e0bffe17 	ldw	r2,-8(fp)
   44290:	0080120e 	bge	zero,r2,442dc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   44294:	e0bfff17 	ldw	r2,-4(fp)
   44298:	1090000c 	andi	r2,r2,16384
   4429c:	10000126 	beq	r2,zero,442a4 <altera_avalon_jtag_uart_write+0x190>
        break;
   442a0:	00001006 	br	442e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   442a4:	0001883a 	nop
   442a8:	e0bffc17 	ldw	r2,-16(fp)
   442ac:	10c00d17 	ldw	r3,52(r2)
   442b0:	e0bff517 	ldw	r2,-44(fp)
   442b4:	1880051e 	bne	r3,r2,442cc <altera_avalon_jtag_uart_write+0x1b8>
   442b8:	e0bffc17 	ldw	r2,-16(fp)
   442bc:	10c00917 	ldw	r3,36(r2)
   442c0:	e0bffc17 	ldw	r2,-16(fp)
   442c4:	10800117 	ldw	r2,4(r2)
   442c8:	18bff736 	bltu	r3,r2,442a8 <__alt_data_end+0xfffd3568>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   442cc:	e0bffc17 	ldw	r2,-16(fp)
   442d0:	10800917 	ldw	r2,36(r2)
   442d4:	10000126 	beq	r2,zero,442dc <altera_avalon_jtag_uart_write+0x1c8>
         break;
   442d8:	00000206 	br	442e4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   442dc:	e0bffe17 	ldw	r2,-8(fp)
   442e0:	00bf9716 	blt	zero,r2,44140 <__alt_data_end+0xfffd3400>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   442e4:	e0fffd17 	ldw	r3,-12(fp)
   442e8:	e0bff717 	ldw	r2,-36(fp)
   442ec:	18800426 	beq	r3,r2,44300 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   442f0:	e0fffd17 	ldw	r3,-12(fp)
   442f4:	e0bff717 	ldw	r2,-36(fp)
   442f8:	1885c83a 	sub	r2,r3,r2
   442fc:	00000606 	br	44318 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   44300:	e0bfff17 	ldw	r2,-4(fp)
   44304:	1090000c 	andi	r2,r2,16384
   44308:	10000226 	beq	r2,zero,44314 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   4430c:	00bffd44 	movi	r2,-11
   44310:	00000106 	br	44318 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44314:	00bffec4 	movi	r2,-5
}
   44318:	e037883a 	mov	sp,fp
   4431c:	dfc00117 	ldw	ra,4(sp)
   44320:	df000017 	ldw	fp,0(sp)
   44324:	dec00204 	addi	sp,sp,8
   44328:	f800283a 	ret

0004432c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4432c:	defff504 	addi	sp,sp,-44
   44330:	df000a15 	stw	fp,40(sp)
   44334:	df000a04 	addi	fp,sp,40
   44338:	e13ffc15 	stw	r4,-16(fp)
   4433c:	e17ffd15 	stw	r5,-12(fp)
   44340:	e1bffe15 	stw	r6,-8(fp)
   44344:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44348:	e03ff615 	stw	zero,-40(fp)
   4434c:	00800174 	movhi	r2,5
   44350:	10a28f04 	addi	r2,r2,-30148
   44354:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   44358:	10003f26 	beq	r2,zero,44458 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4435c:	e0bffc17 	ldw	r2,-16(fp)
   44360:	10003b26 	beq	r2,zero,44450 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   44364:	e0bffc17 	ldw	r2,-16(fp)
   44368:	e0fffe17 	ldw	r3,-8(fp)
   4436c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   44370:	e0bffc17 	ldw	r2,-16(fp)
   44374:	e0ffff17 	ldw	r3,-4(fp)
   44378:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4437c:	0005303a 	rdctl	r2,status
   44380:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44384:	e0fff817 	ldw	r3,-32(fp)
   44388:	00bfff84 	movi	r2,-2
   4438c:	1884703a 	and	r2,r3,r2
   44390:	1001703a 	wrctl	status,r2
  
  return context;
   44394:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   44398:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4439c:	00800174 	movhi	r2,5
   443a0:	10a29004 	addi	r2,r2,-30144
   443a4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   443a8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   443ac:	e0fffd17 	ldw	r3,-12(fp)
   443b0:	e0bff617 	ldw	r2,-40(fp)
   443b4:	1885883a 	add	r2,r3,r2
   443b8:	10c00044 	addi	r3,r2,1
   443bc:	e0bffc17 	ldw	r2,-16(fp)
   443c0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   443c4:	e0bffc17 	ldw	r2,-16(fp)
   443c8:	10c00217 	ldw	r3,8(r2)
   443cc:	e0bff617 	ldw	r2,-40(fp)
   443d0:	1880042e 	bgeu	r3,r2,443e4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   443d4:	e0bffc17 	ldw	r2,-16(fp)
   443d8:	00c00044 	movi	r3,1
   443dc:	10c00405 	stb	r3,16(r2)
   443e0:	00000206 	br	443ec <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   443e4:	e0bffc17 	ldw	r2,-16(fp)
   443e8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   443ec:	e0fffc17 	ldw	r3,-16(fp)
   443f0:	00800134 	movhi	r2,4
   443f4:	109bea04 	addi	r2,r2,28584
   443f8:	e0bff915 	stw	r2,-28(fp)
   443fc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44400:	e0bffa17 	ldw	r2,-24(fp)
   44404:	e0fff917 	ldw	r3,-28(fp)
   44408:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4440c:	e0bff917 	ldw	r2,-28(fp)
   44410:	10c00017 	ldw	r3,0(r2)
   44414:	e0bffa17 	ldw	r2,-24(fp)
   44418:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4441c:	e0bff917 	ldw	r2,-28(fp)
   44420:	10800017 	ldw	r2,0(r2)
   44424:	e0fffa17 	ldw	r3,-24(fp)
   44428:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4442c:	e0bff917 	ldw	r2,-28(fp)
   44430:	e0fffa17 	ldw	r3,-24(fp)
   44434:	10c00015 	stw	r3,0(r2)
   44438:	e0bff717 	ldw	r2,-36(fp)
   4443c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44440:	e0bffb17 	ldw	r2,-20(fp)
   44444:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44448:	0005883a 	mov	r2,zero
   4444c:	00000306 	br	4445c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   44450:	00bffa84 	movi	r2,-22
   44454:	00000106 	br	4445c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   44458:	00bfde84 	movi	r2,-134
  }
}
   4445c:	e037883a 	mov	sp,fp
   44460:	df000017 	ldw	fp,0(sp)
   44464:	dec00104 	addi	sp,sp,4
   44468:	f800283a 	ret

0004446c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4446c:	deffff04 	addi	sp,sp,-4
   44470:	df000015 	stw	fp,0(sp)
   44474:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44478:	e037883a 	mov	sp,fp
   4447c:	df000017 	ldw	fp,0(sp)
   44480:	dec00104 	addi	sp,sp,4
   44484:	f800283a 	ret

00044488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44488:	defffe04 	addi	sp,sp,-8
   4448c:	dfc00115 	stw	ra,4(sp)
   44490:	df000015 	stw	fp,0(sp)
   44494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44498:	00800134 	movhi	r2,4
   4449c:	109be704 	addi	r2,r2,28572
   444a0:	10800017 	ldw	r2,0(r2)
   444a4:	10000526 	beq	r2,zero,444bc <alt_get_errno+0x34>
   444a8:	00800134 	movhi	r2,4
   444ac:	109be704 	addi	r2,r2,28572
   444b0:	10800017 	ldw	r2,0(r2)
   444b4:	103ee83a 	callr	r2
   444b8:	00000206 	br	444c4 <alt_get_errno+0x3c>
   444bc:	00800174 	movhi	r2,5
   444c0:	10a28a04 	addi	r2,r2,-30168
}
   444c4:	e037883a 	mov	sp,fp
   444c8:	dfc00117 	ldw	ra,4(sp)
   444cc:	df000017 	ldw	fp,0(sp)
   444d0:	dec00204 	addi	sp,sp,8
   444d4:	f800283a 	ret

000444d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   444d8:	defffa04 	addi	sp,sp,-24
   444dc:	dfc00515 	stw	ra,20(sp)
   444e0:	df000415 	stw	fp,16(sp)
   444e4:	df000404 	addi	fp,sp,16
   444e8:	e13ffe15 	stw	r4,-8(fp)
   444ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   444f0:	e0bffe17 	ldw	r2,-8(fp)
   444f4:	10000326 	beq	r2,zero,44504 <alt_dev_llist_insert+0x2c>
   444f8:	e0bffe17 	ldw	r2,-8(fp)
   444fc:	10800217 	ldw	r2,8(r2)
   44500:	1000061e 	bne	r2,zero,4451c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44504:	00444880 	call	44488 <alt_get_errno>
   44508:	1007883a 	mov	r3,r2
   4450c:	00800584 	movi	r2,22
   44510:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44514:	00bffa84 	movi	r2,-22
   44518:	00001306 	br	44568 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4451c:	e0bffe17 	ldw	r2,-8(fp)
   44520:	e0ffff17 	ldw	r3,-4(fp)
   44524:	e0fffc15 	stw	r3,-16(fp)
   44528:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4452c:	e0bffd17 	ldw	r2,-12(fp)
   44530:	e0fffc17 	ldw	r3,-16(fp)
   44534:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44538:	e0bffc17 	ldw	r2,-16(fp)
   4453c:	10c00017 	ldw	r3,0(r2)
   44540:	e0bffd17 	ldw	r2,-12(fp)
   44544:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44548:	e0bffc17 	ldw	r2,-16(fp)
   4454c:	10800017 	ldw	r2,0(r2)
   44550:	e0fffd17 	ldw	r3,-12(fp)
   44554:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44558:	e0bffc17 	ldw	r2,-16(fp)
   4455c:	e0fffd17 	ldw	r3,-12(fp)
   44560:	10c00015 	stw	r3,0(r2)

  return 0;  
   44564:	0005883a 	mov	r2,zero
}
   44568:	e037883a 	mov	sp,fp
   4456c:	dfc00117 	ldw	ra,4(sp)
   44570:	df000017 	ldw	fp,0(sp)
   44574:	dec00204 	addi	sp,sp,8
   44578:	f800283a 	ret

0004457c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4457c:	defffd04 	addi	sp,sp,-12
   44580:	dfc00215 	stw	ra,8(sp)
   44584:	df000115 	stw	fp,4(sp)
   44588:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4458c:	00800134 	movhi	r2,4
   44590:	10953c04 	addi	r2,r2,21744
   44594:	e0bfff15 	stw	r2,-4(fp)
   44598:	00000606 	br	445b4 <_do_ctors+0x38>
        (*ctor) (); 
   4459c:	e0bfff17 	ldw	r2,-4(fp)
   445a0:	10800017 	ldw	r2,0(r2)
   445a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   445a8:	e0bfff17 	ldw	r2,-4(fp)
   445ac:	10bfff04 	addi	r2,r2,-4
   445b0:	e0bfff15 	stw	r2,-4(fp)
   445b4:	e0ffff17 	ldw	r3,-4(fp)
   445b8:	00800134 	movhi	r2,4
   445bc:	10953d04 	addi	r2,r2,21748
   445c0:	18bff62e 	bgeu	r3,r2,4459c <__alt_data_end+0xfffd385c>
        (*ctor) (); 
}
   445c4:	e037883a 	mov	sp,fp
   445c8:	dfc00117 	ldw	ra,4(sp)
   445cc:	df000017 	ldw	fp,0(sp)
   445d0:	dec00204 	addi	sp,sp,8
   445d4:	f800283a 	ret

000445d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   445d8:	defffd04 	addi	sp,sp,-12
   445dc:	dfc00215 	stw	ra,8(sp)
   445e0:	df000115 	stw	fp,4(sp)
   445e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   445e8:	00800134 	movhi	r2,4
   445ec:	10953c04 	addi	r2,r2,21744
   445f0:	e0bfff15 	stw	r2,-4(fp)
   445f4:	00000606 	br	44610 <_do_dtors+0x38>
        (*dtor) (); 
   445f8:	e0bfff17 	ldw	r2,-4(fp)
   445fc:	10800017 	ldw	r2,0(r2)
   44600:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44604:	e0bfff17 	ldw	r2,-4(fp)
   44608:	10bfff04 	addi	r2,r2,-4
   4460c:	e0bfff15 	stw	r2,-4(fp)
   44610:	e0ffff17 	ldw	r3,-4(fp)
   44614:	00800134 	movhi	r2,4
   44618:	10953d04 	addi	r2,r2,21748
   4461c:	18bff62e 	bgeu	r3,r2,445f8 <__alt_data_end+0xfffd38b8>
        (*dtor) (); 
}
   44620:	e037883a 	mov	sp,fp
   44624:	dfc00117 	ldw	ra,4(sp)
   44628:	df000017 	ldw	fp,0(sp)
   4462c:	dec00204 	addi	sp,sp,8
   44630:	f800283a 	ret

00044634 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44634:	deffff04 	addi	sp,sp,-4
   44638:	df000015 	stw	fp,0(sp)
   4463c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   44640:	e037883a 	mov	sp,fp
   44644:	df000017 	ldw	fp,0(sp)
   44648:	dec00104 	addi	sp,sp,4
   4464c:	f800283a 	ret

00044650 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44650:	defff904 	addi	sp,sp,-28
   44654:	dfc00615 	stw	ra,24(sp)
   44658:	df000515 	stw	fp,20(sp)
   4465c:	df000504 	addi	fp,sp,20
   44660:	e13ffc15 	stw	r4,-16(fp)
   44664:	e17ffd15 	stw	r5,-12(fp)
   44668:	e1bffe15 	stw	r6,-8(fp)
   4466c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44670:	e0800217 	ldw	r2,8(fp)
   44674:	d8800015 	stw	r2,0(sp)
   44678:	e13ffc17 	ldw	r4,-16(fp)
   4467c:	e17ffd17 	ldw	r5,-12(fp)
   44680:	e1bffe17 	ldw	r6,-8(fp)
   44684:	e1ffff17 	ldw	r7,-4(fp)
   44688:	00448300 	call	44830 <alt_iic_isr_register>
}  
   4468c:	e037883a 	mov	sp,fp
   44690:	dfc00117 	ldw	ra,4(sp)
   44694:	df000017 	ldw	fp,0(sp)
   44698:	dec00204 	addi	sp,sp,8
   4469c:	f800283a 	ret

000446a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   446a0:	defff904 	addi	sp,sp,-28
   446a4:	df000615 	stw	fp,24(sp)
   446a8:	df000604 	addi	fp,sp,24
   446ac:	e13ffe15 	stw	r4,-8(fp)
   446b0:	e17fff15 	stw	r5,-4(fp)
   446b4:	e0bfff17 	ldw	r2,-4(fp)
   446b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   446bc:	0005303a 	rdctl	r2,status
   446c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   446c4:	e0fffb17 	ldw	r3,-20(fp)
   446c8:	00bfff84 	movi	r2,-2
   446cc:	1884703a 	and	r2,r3,r2
   446d0:	1001703a 	wrctl	status,r2
  
  return context;
   446d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   446d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   446dc:	e0bffa17 	ldw	r2,-24(fp)
   446e0:	00c00044 	movi	r3,1
   446e4:	1884983a 	sll	r2,r3,r2
   446e8:	1007883a 	mov	r3,r2
   446ec:	00800174 	movhi	r2,5
   446f0:	10a28e04 	addi	r2,r2,-30152
   446f4:	10800017 	ldw	r2,0(r2)
   446f8:	1886b03a 	or	r3,r3,r2
   446fc:	00800174 	movhi	r2,5
   44700:	10a28e04 	addi	r2,r2,-30152
   44704:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44708:	00800174 	movhi	r2,5
   4470c:	10a28e04 	addi	r2,r2,-30152
   44710:	10800017 	ldw	r2,0(r2)
   44714:	100170fa 	wrctl	ienable,r2
   44718:	e0bffc17 	ldw	r2,-16(fp)
   4471c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44720:	e0bffd17 	ldw	r2,-12(fp)
   44724:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44728:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4472c:	0001883a 	nop
}
   44730:	e037883a 	mov	sp,fp
   44734:	df000017 	ldw	fp,0(sp)
   44738:	dec00104 	addi	sp,sp,4
   4473c:	f800283a 	ret

00044740 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44740:	defff904 	addi	sp,sp,-28
   44744:	df000615 	stw	fp,24(sp)
   44748:	df000604 	addi	fp,sp,24
   4474c:	e13ffe15 	stw	r4,-8(fp)
   44750:	e17fff15 	stw	r5,-4(fp)
   44754:	e0bfff17 	ldw	r2,-4(fp)
   44758:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4475c:	0005303a 	rdctl	r2,status
   44760:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44764:	e0fffb17 	ldw	r3,-20(fp)
   44768:	00bfff84 	movi	r2,-2
   4476c:	1884703a 	and	r2,r3,r2
   44770:	1001703a 	wrctl	status,r2
  
  return context;
   44774:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44778:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4477c:	e0bffa17 	ldw	r2,-24(fp)
   44780:	00c00044 	movi	r3,1
   44784:	1884983a 	sll	r2,r3,r2
   44788:	0084303a 	nor	r2,zero,r2
   4478c:	1007883a 	mov	r3,r2
   44790:	00800174 	movhi	r2,5
   44794:	10a28e04 	addi	r2,r2,-30152
   44798:	10800017 	ldw	r2,0(r2)
   4479c:	1886703a 	and	r3,r3,r2
   447a0:	00800174 	movhi	r2,5
   447a4:	10a28e04 	addi	r2,r2,-30152
   447a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   447ac:	00800174 	movhi	r2,5
   447b0:	10a28e04 	addi	r2,r2,-30152
   447b4:	10800017 	ldw	r2,0(r2)
   447b8:	100170fa 	wrctl	ienable,r2
   447bc:	e0bffc17 	ldw	r2,-16(fp)
   447c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   447c4:	e0bffd17 	ldw	r2,-12(fp)
   447c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   447cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   447d0:	0001883a 	nop
}
   447d4:	e037883a 	mov	sp,fp
   447d8:	df000017 	ldw	fp,0(sp)
   447dc:	dec00104 	addi	sp,sp,4
   447e0:	f800283a 	ret

000447e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   447e4:	defffc04 	addi	sp,sp,-16
   447e8:	df000315 	stw	fp,12(sp)
   447ec:	df000304 	addi	fp,sp,12
   447f0:	e13ffe15 	stw	r4,-8(fp)
   447f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   447f8:	000530fa 	rdctl	r2,ienable
   447fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44800:	e0bfff17 	ldw	r2,-4(fp)
   44804:	00c00044 	movi	r3,1
   44808:	1884983a 	sll	r2,r3,r2
   4480c:	1007883a 	mov	r3,r2
   44810:	e0bffd17 	ldw	r2,-12(fp)
   44814:	1884703a 	and	r2,r3,r2
   44818:	1004c03a 	cmpne	r2,r2,zero
   4481c:	10803fcc 	andi	r2,r2,255
}
   44820:	e037883a 	mov	sp,fp
   44824:	df000017 	ldw	fp,0(sp)
   44828:	dec00104 	addi	sp,sp,4
   4482c:	f800283a 	ret

00044830 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44830:	defff504 	addi	sp,sp,-44
   44834:	dfc00a15 	stw	ra,40(sp)
   44838:	df000915 	stw	fp,36(sp)
   4483c:	df000904 	addi	fp,sp,36
   44840:	e13ffc15 	stw	r4,-16(fp)
   44844:	e17ffd15 	stw	r5,-12(fp)
   44848:	e1bffe15 	stw	r6,-8(fp)
   4484c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44850:	00bffa84 	movi	r2,-22
   44854:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44858:	e0bffd17 	ldw	r2,-12(fp)
   4485c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44860:	e0bff817 	ldw	r2,-32(fp)
   44864:	10800808 	cmpgei	r2,r2,32
   44868:	1000271e 	bne	r2,zero,44908 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4486c:	0005303a 	rdctl	r2,status
   44870:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44874:	e0fffa17 	ldw	r3,-24(fp)
   44878:	00bfff84 	movi	r2,-2
   4487c:	1884703a 	and	r2,r3,r2
   44880:	1001703a 	wrctl	status,r2
  
  return context;
   44884:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44888:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4488c:	00800174 	movhi	r2,5
   44890:	10a29b04 	addi	r2,r2,-30100
   44894:	e0fff817 	ldw	r3,-32(fp)
   44898:	180690fa 	slli	r3,r3,3
   4489c:	10c5883a 	add	r2,r2,r3
   448a0:	e0fffe17 	ldw	r3,-8(fp)
   448a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   448a8:	00800174 	movhi	r2,5
   448ac:	10a29b04 	addi	r2,r2,-30100
   448b0:	e0fff817 	ldw	r3,-32(fp)
   448b4:	180690fa 	slli	r3,r3,3
   448b8:	10c5883a 	add	r2,r2,r3
   448bc:	10800104 	addi	r2,r2,4
   448c0:	e0ffff17 	ldw	r3,-4(fp)
   448c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   448c8:	e0bffe17 	ldw	r2,-8(fp)
   448cc:	10000526 	beq	r2,zero,448e4 <alt_iic_isr_register+0xb4>
   448d0:	e0bff817 	ldw	r2,-32(fp)
   448d4:	e13ffc17 	ldw	r4,-16(fp)
   448d8:	100b883a 	mov	r5,r2
   448dc:	00446a00 	call	446a0 <alt_ic_irq_enable>
   448e0:	00000406 	br	448f4 <alt_iic_isr_register+0xc4>
   448e4:	e0bff817 	ldw	r2,-32(fp)
   448e8:	e13ffc17 	ldw	r4,-16(fp)
   448ec:	100b883a 	mov	r5,r2
   448f0:	00447400 	call	44740 <alt_ic_irq_disable>
   448f4:	e0bff715 	stw	r2,-36(fp)
   448f8:	e0bff917 	ldw	r2,-28(fp)
   448fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44900:	e0bffb17 	ldw	r2,-20(fp)
   44904:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   44908:	e0bff717 	ldw	r2,-36(fp)
}
   4490c:	e037883a 	mov	sp,fp
   44910:	dfc00117 	ldw	ra,4(sp)
   44914:	df000017 	ldw	fp,0(sp)
   44918:	dec00204 	addi	sp,sp,8
   4491c:	f800283a 	ret

00044920 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44920:	defff804 	addi	sp,sp,-32
   44924:	dfc00715 	stw	ra,28(sp)
   44928:	df000615 	stw	fp,24(sp)
   4492c:	dc000515 	stw	r16,20(sp)
   44930:	df000604 	addi	fp,sp,24
   44934:	e13ffb15 	stw	r4,-20(fp)
   44938:	e17ffc15 	stw	r5,-16(fp)
   4493c:	e1bffd15 	stw	r6,-12(fp)
   44940:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   44944:	e13ffc17 	ldw	r4,-16(fp)
   44948:	e17ffd17 	ldw	r5,-12(fp)
   4494c:	e1bffe17 	ldw	r6,-8(fp)
   44950:	0044bbc0 	call	44bbc <open>
   44954:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   44958:	e0bffa17 	ldw	r2,-24(fp)
   4495c:	10002216 	blt	r2,zero,449e8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   44960:	04000134 	movhi	r16,4
   44964:	84176604 	addi	r16,r16,23960
   44968:	e0bffa17 	ldw	r2,-24(fp)
   4496c:	1009883a 	mov	r4,r2
   44970:	01400304 	movi	r5,12
   44974:	0042e100 	call	42e10 <__mulsi3>
   44978:	8085883a 	add	r2,r16,r2
   4497c:	10c00017 	ldw	r3,0(r2)
   44980:	e0bffb17 	ldw	r2,-20(fp)
   44984:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44988:	04000134 	movhi	r16,4
   4498c:	84176604 	addi	r16,r16,23960
   44990:	e0bffa17 	ldw	r2,-24(fp)
   44994:	1009883a 	mov	r4,r2
   44998:	01400304 	movi	r5,12
   4499c:	0042e100 	call	42e10 <__mulsi3>
   449a0:	8085883a 	add	r2,r16,r2
   449a4:	10800104 	addi	r2,r2,4
   449a8:	10c00017 	ldw	r3,0(r2)
   449ac:	e0bffb17 	ldw	r2,-20(fp)
   449b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   449b4:	04000134 	movhi	r16,4
   449b8:	84176604 	addi	r16,r16,23960
   449bc:	e0bffa17 	ldw	r2,-24(fp)
   449c0:	1009883a 	mov	r4,r2
   449c4:	01400304 	movi	r5,12
   449c8:	0042e100 	call	42e10 <__mulsi3>
   449cc:	8085883a 	add	r2,r16,r2
   449d0:	10800204 	addi	r2,r2,8
   449d4:	10c00017 	ldw	r3,0(r2)
   449d8:	e0bffb17 	ldw	r2,-20(fp)
   449dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   449e0:	e13ffa17 	ldw	r4,-24(fp)
   449e4:	00435ac0 	call	435ac <alt_release_fd>
  }
} 
   449e8:	e6ffff04 	addi	sp,fp,-4
   449ec:	dfc00217 	ldw	ra,8(sp)
   449f0:	df000117 	ldw	fp,4(sp)
   449f4:	dc000017 	ldw	r16,0(sp)
   449f8:	dec00304 	addi	sp,sp,12
   449fc:	f800283a 	ret

00044a00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44a00:	defffb04 	addi	sp,sp,-20
   44a04:	dfc00415 	stw	ra,16(sp)
   44a08:	df000315 	stw	fp,12(sp)
   44a0c:	df000304 	addi	fp,sp,12
   44a10:	e13ffd15 	stw	r4,-12(fp)
   44a14:	e17ffe15 	stw	r5,-8(fp)
   44a18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44a1c:	01000134 	movhi	r4,4
   44a20:	21176904 	addi	r4,r4,23972
   44a24:	e17ffd17 	ldw	r5,-12(fp)
   44a28:	01800044 	movi	r6,1
   44a2c:	01c07fc4 	movi	r7,511
   44a30:	00449200 	call	44920 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44a34:	01000134 	movhi	r4,4
   44a38:	21176604 	addi	r4,r4,23960
   44a3c:	e17ffe17 	ldw	r5,-8(fp)
   44a40:	000d883a 	mov	r6,zero
   44a44:	01c07fc4 	movi	r7,511
   44a48:	00449200 	call	44920 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44a4c:	01000134 	movhi	r4,4
   44a50:	21176c04 	addi	r4,r4,23984
   44a54:	e17fff17 	ldw	r5,-4(fp)
   44a58:	01800044 	movi	r6,1
   44a5c:	01c07fc4 	movi	r7,511
   44a60:	00449200 	call	44920 <alt_open_fd>
}  
   44a64:	e037883a 	mov	sp,fp
   44a68:	dfc00117 	ldw	ra,4(sp)
   44a6c:	df000017 	ldw	fp,0(sp)
   44a70:	dec00204 	addi	sp,sp,8
   44a74:	f800283a 	ret

00044a78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44a78:	defffe04 	addi	sp,sp,-8
   44a7c:	dfc00115 	stw	ra,4(sp)
   44a80:	df000015 	stw	fp,0(sp)
   44a84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44a88:	00800134 	movhi	r2,4
   44a8c:	109be704 	addi	r2,r2,28572
   44a90:	10800017 	ldw	r2,0(r2)
   44a94:	10000526 	beq	r2,zero,44aac <alt_get_errno+0x34>
   44a98:	00800134 	movhi	r2,4
   44a9c:	109be704 	addi	r2,r2,28572
   44aa0:	10800017 	ldw	r2,0(r2)
   44aa4:	103ee83a 	callr	r2
   44aa8:	00000206 	br	44ab4 <alt_get_errno+0x3c>
   44aac:	00800174 	movhi	r2,5
   44ab0:	10a28a04 	addi	r2,r2,-30168
}
   44ab4:	e037883a 	mov	sp,fp
   44ab8:	dfc00117 	ldw	ra,4(sp)
   44abc:	df000017 	ldw	fp,0(sp)
   44ac0:	dec00204 	addi	sp,sp,8
   44ac4:	f800283a 	ret

00044ac8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44ac8:	defffb04 	addi	sp,sp,-20
   44acc:	dfc00415 	stw	ra,16(sp)
   44ad0:	df000315 	stw	fp,12(sp)
   44ad4:	dc000215 	stw	r16,8(sp)
   44ad8:	df000304 	addi	fp,sp,12
   44adc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44ae0:	e0bffe17 	ldw	r2,-8(fp)
   44ae4:	10800217 	ldw	r2,8(r2)
   44ae8:	10d00034 	orhi	r3,r2,16384
   44aec:	e0bffe17 	ldw	r2,-8(fp)
   44af0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44af4:	e03ffd15 	stw	zero,-12(fp)
   44af8:	00002306 	br	44b88 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44afc:	04000134 	movhi	r16,4
   44b00:	84176604 	addi	r16,r16,23960
   44b04:	e0bffd17 	ldw	r2,-12(fp)
   44b08:	1009883a 	mov	r4,r2
   44b0c:	01400304 	movi	r5,12
   44b10:	0042e100 	call	42e10 <__mulsi3>
   44b14:	8085883a 	add	r2,r16,r2
   44b18:	10c00017 	ldw	r3,0(r2)
   44b1c:	e0bffe17 	ldw	r2,-8(fp)
   44b20:	10800017 	ldw	r2,0(r2)
   44b24:	1880151e 	bne	r3,r2,44b7c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44b28:	04000134 	movhi	r16,4
   44b2c:	84176604 	addi	r16,r16,23960
   44b30:	e0bffd17 	ldw	r2,-12(fp)
   44b34:	1009883a 	mov	r4,r2
   44b38:	01400304 	movi	r5,12
   44b3c:	0042e100 	call	42e10 <__mulsi3>
   44b40:	8085883a 	add	r2,r16,r2
   44b44:	10800204 	addi	r2,r2,8
   44b48:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44b4c:	10000b0e 	bge	r2,zero,44b7c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44b50:	e13ffd17 	ldw	r4,-12(fp)
   44b54:	01400304 	movi	r5,12
   44b58:	0042e100 	call	42e10 <__mulsi3>
   44b5c:	1007883a 	mov	r3,r2
   44b60:	00800134 	movhi	r2,4
   44b64:	10976604 	addi	r2,r2,23960
   44b68:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44b6c:	e0bffe17 	ldw	r2,-8(fp)
   44b70:	18800226 	beq	r3,r2,44b7c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44b74:	00bffcc4 	movi	r2,-13
   44b78:	00000a06 	br	44ba4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44b7c:	e0bffd17 	ldw	r2,-12(fp)
   44b80:	10800044 	addi	r2,r2,1
   44b84:	e0bffd15 	stw	r2,-12(fp)
   44b88:	00800134 	movhi	r2,4
   44b8c:	109be604 	addi	r2,r2,28568
   44b90:	10800017 	ldw	r2,0(r2)
   44b94:	1007883a 	mov	r3,r2
   44b98:	e0bffd17 	ldw	r2,-12(fp)
   44b9c:	18bfd72e 	bgeu	r3,r2,44afc <__alt_data_end+0xfffd3dbc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44ba0:	0005883a 	mov	r2,zero
}
   44ba4:	e6ffff04 	addi	sp,fp,-4
   44ba8:	dfc00217 	ldw	ra,8(sp)
   44bac:	df000117 	ldw	fp,4(sp)
   44bb0:	dc000017 	ldw	r16,0(sp)
   44bb4:	dec00304 	addi	sp,sp,12
   44bb8:	f800283a 	ret

00044bbc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44bbc:	defff604 	addi	sp,sp,-40
   44bc0:	dfc00915 	stw	ra,36(sp)
   44bc4:	df000815 	stw	fp,32(sp)
   44bc8:	df000804 	addi	fp,sp,32
   44bcc:	e13ffd15 	stw	r4,-12(fp)
   44bd0:	e17ffe15 	stw	r5,-8(fp)
   44bd4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44bd8:	00bfffc4 	movi	r2,-1
   44bdc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   44be0:	00bffb44 	movi	r2,-19
   44be4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   44be8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44bec:	e13ffd17 	ldw	r4,-12(fp)
   44bf0:	01400134 	movhi	r5,4
   44bf4:	295be404 	addi	r5,r5,28560
   44bf8:	0044ed80 	call	44ed8 <alt_find_dev>
   44bfc:	e0bff815 	stw	r2,-32(fp)
   44c00:	e0bff817 	ldw	r2,-32(fp)
   44c04:	1000051e 	bne	r2,zero,44c1c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44c08:	e13ffd17 	ldw	r4,-12(fp)
   44c0c:	0044f680 	call	44f68 <alt_find_file>
   44c10:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   44c14:	00800044 	movi	r2,1
   44c18:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   44c1c:	e0bff817 	ldw	r2,-32(fp)
   44c20:	10002b26 	beq	r2,zero,44cd0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44c24:	e13ff817 	ldw	r4,-32(fp)
   44c28:	004507c0 	call	4507c <alt_get_fd>
   44c2c:	e0bff915 	stw	r2,-28(fp)
   44c30:	e0bff917 	ldw	r2,-28(fp)
   44c34:	1000030e 	bge	r2,zero,44c44 <open+0x88>
    {
      status = index;
   44c38:	e0bff917 	ldw	r2,-28(fp)
   44c3c:	e0bffa15 	stw	r2,-24(fp)
   44c40:	00002506 	br	44cd8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   44c44:	e13ff917 	ldw	r4,-28(fp)
   44c48:	01400304 	movi	r5,12
   44c4c:	0042e100 	call	42e10 <__mulsi3>
   44c50:	1007883a 	mov	r3,r2
   44c54:	00800134 	movhi	r2,4
   44c58:	10976604 	addi	r2,r2,23960
   44c5c:	1885883a 	add	r2,r3,r2
   44c60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44c64:	e0fffe17 	ldw	r3,-8(fp)
   44c68:	00900034 	movhi	r2,16384
   44c6c:	10bfffc4 	addi	r2,r2,-1
   44c70:	1886703a 	and	r3,r3,r2
   44c74:	e0bffc17 	ldw	r2,-16(fp)
   44c78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44c7c:	e0bffb17 	ldw	r2,-20(fp)
   44c80:	1000051e 	bne	r2,zero,44c98 <open+0xdc>
   44c84:	e13ffc17 	ldw	r4,-16(fp)
   44c88:	0044ac80 	call	44ac8 <alt_file_locked>
   44c8c:	e0bffa15 	stw	r2,-24(fp)
   44c90:	e0bffa17 	ldw	r2,-24(fp)
   44c94:	10001016 	blt	r2,zero,44cd8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44c98:	e0bff817 	ldw	r2,-32(fp)
   44c9c:	10800317 	ldw	r2,12(r2)
   44ca0:	10000826 	beq	r2,zero,44cc4 <open+0x108>
   44ca4:	e0bff817 	ldw	r2,-32(fp)
   44ca8:	10800317 	ldw	r2,12(r2)
   44cac:	e13ffc17 	ldw	r4,-16(fp)
   44cb0:	e17ffd17 	ldw	r5,-12(fp)
   44cb4:	e1bffe17 	ldw	r6,-8(fp)
   44cb8:	e1ffff17 	ldw	r7,-4(fp)
   44cbc:	103ee83a 	callr	r2
   44cc0:	00000106 	br	44cc8 <open+0x10c>
   44cc4:	0005883a 	mov	r2,zero
   44cc8:	e0bffa15 	stw	r2,-24(fp)
   44ccc:	00000206 	br	44cd8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44cd0:	00bffb44 	movi	r2,-19
   44cd4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44cd8:	e0bffa17 	ldw	r2,-24(fp)
   44cdc:	1000090e 	bge	r2,zero,44d04 <open+0x148>
  {
    alt_release_fd (index);  
   44ce0:	e13ff917 	ldw	r4,-28(fp)
   44ce4:	00435ac0 	call	435ac <alt_release_fd>
    ALT_ERRNO = -status;
   44ce8:	0044a780 	call	44a78 <alt_get_errno>
   44cec:	1007883a 	mov	r3,r2
   44cf0:	e0bffa17 	ldw	r2,-24(fp)
   44cf4:	0085c83a 	sub	r2,zero,r2
   44cf8:	18800015 	stw	r2,0(r3)
    return -1;
   44cfc:	00bfffc4 	movi	r2,-1
   44d00:	00000106 	br	44d08 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   44d04:	e0bff917 	ldw	r2,-28(fp)
}
   44d08:	e037883a 	mov	sp,fp
   44d0c:	dfc00117 	ldw	ra,4(sp)
   44d10:	df000017 	ldw	fp,0(sp)
   44d14:	dec00204 	addi	sp,sp,8
   44d18:	f800283a 	ret

00044d1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   44d1c:	defffa04 	addi	sp,sp,-24
   44d20:	df000515 	stw	fp,20(sp)
   44d24:	df000504 	addi	fp,sp,20
   44d28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44d2c:	0005303a 	rdctl	r2,status
   44d30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44d34:	e0fffc17 	ldw	r3,-16(fp)
   44d38:	00bfff84 	movi	r2,-2
   44d3c:	1884703a 	and	r2,r3,r2
   44d40:	1001703a 	wrctl	status,r2
  
  return context;
   44d44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   44d48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   44d4c:	e0bfff17 	ldw	r2,-4(fp)
   44d50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   44d54:	e0bffd17 	ldw	r2,-12(fp)
   44d58:	10800017 	ldw	r2,0(r2)
   44d5c:	e0fffd17 	ldw	r3,-12(fp)
   44d60:	18c00117 	ldw	r3,4(r3)
   44d64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   44d68:	e0bffd17 	ldw	r2,-12(fp)
   44d6c:	10800117 	ldw	r2,4(r2)
   44d70:	e0fffd17 	ldw	r3,-12(fp)
   44d74:	18c00017 	ldw	r3,0(r3)
   44d78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   44d7c:	e0bffd17 	ldw	r2,-12(fp)
   44d80:	e0fffd17 	ldw	r3,-12(fp)
   44d84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   44d88:	e0bffd17 	ldw	r2,-12(fp)
   44d8c:	e0fffd17 	ldw	r3,-12(fp)
   44d90:	10c00015 	stw	r3,0(r2)
   44d94:	e0bffb17 	ldw	r2,-20(fp)
   44d98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44d9c:	e0bffe17 	ldw	r2,-8(fp)
   44da0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   44da4:	e037883a 	mov	sp,fp
   44da8:	df000017 	ldw	fp,0(sp)
   44dac:	dec00104 	addi	sp,sp,4
   44db0:	f800283a 	ret

00044db4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   44db4:	defffb04 	addi	sp,sp,-20
   44db8:	dfc00415 	stw	ra,16(sp)
   44dbc:	df000315 	stw	fp,12(sp)
   44dc0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   44dc4:	d0a00c17 	ldw	r2,-32720(gp)
   44dc8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   44dcc:	d0a6b217 	ldw	r2,-25912(gp)
   44dd0:	10800044 	addi	r2,r2,1
   44dd4:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44dd8:	00002e06 	br	44e94 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   44ddc:	e0bffd17 	ldw	r2,-12(fp)
   44de0:	10800017 	ldw	r2,0(r2)
   44de4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   44de8:	e0bffd17 	ldw	r2,-12(fp)
   44dec:	10800403 	ldbu	r2,16(r2)
   44df0:	10803fcc 	andi	r2,r2,255
   44df4:	10000426 	beq	r2,zero,44e08 <alt_tick+0x54>
   44df8:	d0a6b217 	ldw	r2,-25912(gp)
   44dfc:	1000021e 	bne	r2,zero,44e08 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   44e00:	e0bffd17 	ldw	r2,-12(fp)
   44e04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   44e08:	e0bffd17 	ldw	r2,-12(fp)
   44e0c:	10800217 	ldw	r2,8(r2)
   44e10:	d0e6b217 	ldw	r3,-25912(gp)
   44e14:	18801d36 	bltu	r3,r2,44e8c <alt_tick+0xd8>
   44e18:	e0bffd17 	ldw	r2,-12(fp)
   44e1c:	10800403 	ldbu	r2,16(r2)
   44e20:	10803fcc 	andi	r2,r2,255
   44e24:	1000191e 	bne	r2,zero,44e8c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   44e28:	e0bffd17 	ldw	r2,-12(fp)
   44e2c:	10800317 	ldw	r2,12(r2)
   44e30:	e0fffd17 	ldw	r3,-12(fp)
   44e34:	18c00517 	ldw	r3,20(r3)
   44e38:	1809883a 	mov	r4,r3
   44e3c:	103ee83a 	callr	r2
   44e40:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   44e44:	e0bfff17 	ldw	r2,-4(fp)
   44e48:	1000031e 	bne	r2,zero,44e58 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   44e4c:	e13ffd17 	ldw	r4,-12(fp)
   44e50:	0044d1c0 	call	44d1c <alt_alarm_stop>
   44e54:	00000d06 	br	44e8c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   44e58:	e0bffd17 	ldw	r2,-12(fp)
   44e5c:	10c00217 	ldw	r3,8(r2)
   44e60:	e0bfff17 	ldw	r2,-4(fp)
   44e64:	1887883a 	add	r3,r3,r2
   44e68:	e0bffd17 	ldw	r2,-12(fp)
   44e6c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   44e70:	e0bffd17 	ldw	r2,-12(fp)
   44e74:	10c00217 	ldw	r3,8(r2)
   44e78:	d0a6b217 	ldw	r2,-25912(gp)
   44e7c:	1880032e 	bgeu	r3,r2,44e8c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   44e80:	e0bffd17 	ldw	r2,-12(fp)
   44e84:	00c00044 	movi	r3,1
   44e88:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   44e8c:	e0bffe17 	ldw	r2,-8(fp)
   44e90:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44e94:	e0fffd17 	ldw	r3,-12(fp)
   44e98:	d0a00c04 	addi	r2,gp,-32720
   44e9c:	18bfcf1e 	bne	r3,r2,44ddc <__alt_data_end+0xfffd409c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   44ea0:	0001883a 	nop
}
   44ea4:	e037883a 	mov	sp,fp
   44ea8:	dfc00117 	ldw	ra,4(sp)
   44eac:	df000017 	ldw	fp,0(sp)
   44eb0:	dec00204 	addi	sp,sp,8
   44eb4:	f800283a 	ret

00044eb8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   44eb8:	deffff04 	addi	sp,sp,-4
   44ebc:	df000015 	stw	fp,0(sp)
   44ec0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   44ec4:	000170fa 	wrctl	ienable,zero
}
   44ec8:	e037883a 	mov	sp,fp
   44ecc:	df000017 	ldw	fp,0(sp)
   44ed0:	dec00104 	addi	sp,sp,4
   44ed4:	f800283a 	ret

00044ed8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   44ed8:	defffa04 	addi	sp,sp,-24
   44edc:	dfc00515 	stw	ra,20(sp)
   44ee0:	df000415 	stw	fp,16(sp)
   44ee4:	df000404 	addi	fp,sp,16
   44ee8:	e13ffe15 	stw	r4,-8(fp)
   44eec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44ef0:	e0bfff17 	ldw	r2,-4(fp)
   44ef4:	10800017 	ldw	r2,0(r2)
   44ef8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   44efc:	e13ffe17 	ldw	r4,-8(fp)
   44f00:	00403bc0 	call	403bc <strlen>
   44f04:	10800044 	addi	r2,r2,1
   44f08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44f0c:	00000d06 	br	44f44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44f10:	e0bffc17 	ldw	r2,-16(fp)
   44f14:	10c00217 	ldw	r3,8(r2)
   44f18:	e0bffd17 	ldw	r2,-12(fp)
   44f1c:	1809883a 	mov	r4,r3
   44f20:	e17ffe17 	ldw	r5,-8(fp)
   44f24:	100d883a 	mov	r6,r2
   44f28:	004519c0 	call	4519c <memcmp>
   44f2c:	1000021e 	bne	r2,zero,44f38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   44f30:	e0bffc17 	ldw	r2,-16(fp)
   44f34:	00000706 	br	44f54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   44f38:	e0bffc17 	ldw	r2,-16(fp)
   44f3c:	10800017 	ldw	r2,0(r2)
   44f40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44f44:	e0fffc17 	ldw	r3,-16(fp)
   44f48:	e0bfff17 	ldw	r2,-4(fp)
   44f4c:	18bff01e 	bne	r3,r2,44f10 <__alt_data_end+0xfffd41d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   44f50:	0005883a 	mov	r2,zero
}
   44f54:	e037883a 	mov	sp,fp
   44f58:	dfc00117 	ldw	ra,4(sp)
   44f5c:	df000017 	ldw	fp,0(sp)
   44f60:	dec00204 	addi	sp,sp,8
   44f64:	f800283a 	ret

00044f68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   44f68:	defffb04 	addi	sp,sp,-20
   44f6c:	dfc00415 	stw	ra,16(sp)
   44f70:	df000315 	stw	fp,12(sp)
   44f74:	df000304 	addi	fp,sp,12
   44f78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   44f7c:	00800134 	movhi	r2,4
   44f80:	109be204 	addi	r2,r2,28552
   44f84:	10800017 	ldw	r2,0(r2)
   44f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   44f8c:	00003106 	br	45054 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   44f90:	e0bffd17 	ldw	r2,-12(fp)
   44f94:	10800217 	ldw	r2,8(r2)
   44f98:	1009883a 	mov	r4,r2
   44f9c:	00403bc0 	call	403bc <strlen>
   44fa0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   44fa4:	e0bffd17 	ldw	r2,-12(fp)
   44fa8:	10c00217 	ldw	r3,8(r2)
   44fac:	e0bffe17 	ldw	r2,-8(fp)
   44fb0:	10bfffc4 	addi	r2,r2,-1
   44fb4:	1885883a 	add	r2,r3,r2
   44fb8:	10800003 	ldbu	r2,0(r2)
   44fbc:	10803fcc 	andi	r2,r2,255
   44fc0:	1080201c 	xori	r2,r2,128
   44fc4:	10bfe004 	addi	r2,r2,-128
   44fc8:	10800bd8 	cmpnei	r2,r2,47
   44fcc:	1000031e 	bne	r2,zero,44fdc <alt_find_file+0x74>
    {
      len -= 1;
   44fd0:	e0bffe17 	ldw	r2,-8(fp)
   44fd4:	10bfffc4 	addi	r2,r2,-1
   44fd8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   44fdc:	e0bffe17 	ldw	r2,-8(fp)
   44fe0:	e0ffff17 	ldw	r3,-4(fp)
   44fe4:	1885883a 	add	r2,r3,r2
   44fe8:	10800003 	ldbu	r2,0(r2)
   44fec:	10803fcc 	andi	r2,r2,255
   44ff0:	1080201c 	xori	r2,r2,128
   44ff4:	10bfe004 	addi	r2,r2,-128
   44ff8:	10800be0 	cmpeqi	r2,r2,47
   44ffc:	1000081e 	bne	r2,zero,45020 <alt_find_file+0xb8>
   45000:	e0bffe17 	ldw	r2,-8(fp)
   45004:	e0ffff17 	ldw	r3,-4(fp)
   45008:	1885883a 	add	r2,r3,r2
   4500c:	10800003 	ldbu	r2,0(r2)
   45010:	10803fcc 	andi	r2,r2,255
   45014:	1080201c 	xori	r2,r2,128
   45018:	10bfe004 	addi	r2,r2,-128
   4501c:	10000a1e 	bne	r2,zero,45048 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   45020:	e0bffd17 	ldw	r2,-12(fp)
   45024:	10c00217 	ldw	r3,8(r2)
   45028:	e0bffe17 	ldw	r2,-8(fp)
   4502c:	1809883a 	mov	r4,r3
   45030:	e17fff17 	ldw	r5,-4(fp)
   45034:	100d883a 	mov	r6,r2
   45038:	004519c0 	call	4519c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4503c:	1000021e 	bne	r2,zero,45048 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   45040:	e0bffd17 	ldw	r2,-12(fp)
   45044:	00000806 	br	45068 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   45048:	e0bffd17 	ldw	r2,-12(fp)
   4504c:	10800017 	ldw	r2,0(r2)
   45050:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45054:	e0fffd17 	ldw	r3,-12(fp)
   45058:	00800134 	movhi	r2,4
   4505c:	109be204 	addi	r2,r2,28552
   45060:	18bfcb1e 	bne	r3,r2,44f90 <__alt_data_end+0xfffd4250>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45064:	0005883a 	mov	r2,zero
}
   45068:	e037883a 	mov	sp,fp
   4506c:	dfc00117 	ldw	ra,4(sp)
   45070:	df000017 	ldw	fp,0(sp)
   45074:	dec00204 	addi	sp,sp,8
   45078:	f800283a 	ret

0004507c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4507c:	defffa04 	addi	sp,sp,-24
   45080:	dfc00515 	stw	ra,20(sp)
   45084:	df000415 	stw	fp,16(sp)
   45088:	dc000315 	stw	r16,12(sp)
   4508c:	df000404 	addi	fp,sp,16
   45090:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   45094:	00bffa04 	movi	r2,-24
   45098:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4509c:	e03ffc15 	stw	zero,-16(fp)
   450a0:	00002106 	br	45128 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   450a4:	04000134 	movhi	r16,4
   450a8:	84176604 	addi	r16,r16,23960
   450ac:	e0bffc17 	ldw	r2,-16(fp)
   450b0:	1009883a 	mov	r4,r2
   450b4:	01400304 	movi	r5,12
   450b8:	0042e100 	call	42e10 <__mulsi3>
   450bc:	8085883a 	add	r2,r16,r2
   450c0:	10800017 	ldw	r2,0(r2)
   450c4:	1000151e 	bne	r2,zero,4511c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   450c8:	04000134 	movhi	r16,4
   450cc:	84176604 	addi	r16,r16,23960
   450d0:	e0bffc17 	ldw	r2,-16(fp)
   450d4:	1009883a 	mov	r4,r2
   450d8:	01400304 	movi	r5,12
   450dc:	0042e100 	call	42e10 <__mulsi3>
   450e0:	8085883a 	add	r2,r16,r2
   450e4:	e0fffe17 	ldw	r3,-8(fp)
   450e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   450ec:	00800134 	movhi	r2,4
   450f0:	109be604 	addi	r2,r2,28568
   450f4:	10c00017 	ldw	r3,0(r2)
   450f8:	e0bffc17 	ldw	r2,-16(fp)
   450fc:	1880040e 	bge	r3,r2,45110 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   45100:	00800134 	movhi	r2,4
   45104:	109be604 	addi	r2,r2,28568
   45108:	e0fffc17 	ldw	r3,-16(fp)
   4510c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   45110:	e0bffc17 	ldw	r2,-16(fp)
   45114:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   45118:	00000606 	br	45134 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4511c:	e0bffc17 	ldw	r2,-16(fp)
   45120:	10800044 	addi	r2,r2,1
   45124:	e0bffc15 	stw	r2,-16(fp)
   45128:	e0bffc17 	ldw	r2,-16(fp)
   4512c:	10800810 	cmplti	r2,r2,32
   45130:	103fdc1e 	bne	r2,zero,450a4 <__alt_data_end+0xfffd4364>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45134:	e0bffd17 	ldw	r2,-12(fp)
}
   45138:	e6ffff04 	addi	sp,fp,-4
   4513c:	dfc00217 	ldw	ra,8(sp)
   45140:	df000117 	ldw	fp,4(sp)
   45144:	dc000017 	ldw	r16,0(sp)
   45148:	dec00304 	addi	sp,sp,12
   4514c:	f800283a 	ret

00045150 <atexit>:
   45150:	200b883a 	mov	r5,r4
   45154:	000d883a 	mov	r6,zero
   45158:	0009883a 	mov	r4,zero
   4515c:	000f883a 	mov	r7,zero
   45160:	00452181 	jmpi	45218 <__register_exitproc>

00045164 <exit>:
   45164:	defffe04 	addi	sp,sp,-8
   45168:	000b883a 	mov	r5,zero
   4516c:	dc000015 	stw	r16,0(sp)
   45170:	dfc00115 	stw	ra,4(sp)
   45174:	2021883a 	mov	r16,r4
   45178:	004532c0 	call	4532c <__call_exitprocs>
   4517c:	00800134 	movhi	r2,4
   45180:	109bde04 	addi	r2,r2,28536
   45184:	11000017 	ldw	r4,0(r2)
   45188:	20800f17 	ldw	r2,60(r4)
   4518c:	10000126 	beq	r2,zero,45194 <exit+0x30>
   45190:	103ee83a 	callr	r2
   45194:	8009883a 	mov	r4,r16
   45198:	00454c00 	call	454c0 <_exit>

0004519c <memcmp>:
   4519c:	01c000c4 	movi	r7,3
   451a0:	3980192e 	bgeu	r7,r6,45208 <memcmp+0x6c>
   451a4:	2144b03a 	or	r2,r4,r5
   451a8:	11c4703a 	and	r2,r2,r7
   451ac:	10000f26 	beq	r2,zero,451ec <memcmp+0x50>
   451b0:	20800003 	ldbu	r2,0(r4)
   451b4:	28c00003 	ldbu	r3,0(r5)
   451b8:	10c0151e 	bne	r2,r3,45210 <memcmp+0x74>
   451bc:	31bfff84 	addi	r6,r6,-2
   451c0:	01ffffc4 	movi	r7,-1
   451c4:	00000406 	br	451d8 <memcmp+0x3c>
   451c8:	20800003 	ldbu	r2,0(r4)
   451cc:	28c00003 	ldbu	r3,0(r5)
   451d0:	31bfffc4 	addi	r6,r6,-1
   451d4:	10c00e1e 	bne	r2,r3,45210 <memcmp+0x74>
   451d8:	21000044 	addi	r4,r4,1
   451dc:	29400044 	addi	r5,r5,1
   451e0:	31fff91e 	bne	r6,r7,451c8 <__alt_data_end+0xfffd4488>
   451e4:	0005883a 	mov	r2,zero
   451e8:	f800283a 	ret
   451ec:	20c00017 	ldw	r3,0(r4)
   451f0:	28800017 	ldw	r2,0(r5)
   451f4:	1880041e 	bne	r3,r2,45208 <memcmp+0x6c>
   451f8:	31bfff04 	addi	r6,r6,-4
   451fc:	21000104 	addi	r4,r4,4
   45200:	29400104 	addi	r5,r5,4
   45204:	39bff936 	bltu	r7,r6,451ec <__alt_data_end+0xfffd44ac>
   45208:	303fe91e 	bne	r6,zero,451b0 <__alt_data_end+0xfffd4470>
   4520c:	003ff506 	br	451e4 <__alt_data_end+0xfffd44a4>
   45210:	10c5c83a 	sub	r2,r2,r3
   45214:	f800283a 	ret

00045218 <__register_exitproc>:
   45218:	00800134 	movhi	r2,4
   4521c:	defffa04 	addi	sp,sp,-24
   45220:	109bde04 	addi	r2,r2,28536
   45224:	dc000315 	stw	r16,12(sp)
   45228:	14000017 	ldw	r16,0(r2)
   4522c:	dc400415 	stw	r17,16(sp)
   45230:	dfc00515 	stw	ra,20(sp)
   45234:	80805217 	ldw	r2,328(r16)
   45238:	2023883a 	mov	r17,r4
   4523c:	10003626 	beq	r2,zero,45318 <__register_exitproc+0x100>
   45240:	10c00117 	ldw	r3,4(r2)
   45244:	010007c4 	movi	r4,31
   45248:	20c00e16 	blt	r4,r3,45284 <__register_exitproc+0x6c>
   4524c:	1a400044 	addi	r9,r3,1
   45250:	8800211e 	bne	r17,zero,452d8 <__register_exitproc+0xc0>
   45254:	18c00084 	addi	r3,r3,2
   45258:	18c7883a 	add	r3,r3,r3
   4525c:	18c7883a 	add	r3,r3,r3
   45260:	12400115 	stw	r9,4(r2)
   45264:	10c7883a 	add	r3,r2,r3
   45268:	19400015 	stw	r5,0(r3)
   4526c:	0005883a 	mov	r2,zero
   45270:	dfc00517 	ldw	ra,20(sp)
   45274:	dc400417 	ldw	r17,16(sp)
   45278:	dc000317 	ldw	r16,12(sp)
   4527c:	dec00604 	addi	sp,sp,24
   45280:	f800283a 	ret
   45284:	00800034 	movhi	r2,0
   45288:	10800004 	addi	r2,r2,0
   4528c:	10002526 	beq	r2,zero,45324 <__register_exitproc+0x10c>
   45290:	01006404 	movi	r4,400
   45294:	d9400015 	stw	r5,0(sp)
   45298:	d9800115 	stw	r6,4(sp)
   4529c:	d9c00215 	stw	r7,8(sp)
   452a0:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   452a4:	d9400017 	ldw	r5,0(sp)
   452a8:	d9800117 	ldw	r6,4(sp)
   452ac:	d9c00217 	ldw	r7,8(sp)
   452b0:	10001c26 	beq	r2,zero,45324 <__register_exitproc+0x10c>
   452b4:	80c05217 	ldw	r3,328(r16)
   452b8:	10000115 	stw	zero,4(r2)
   452bc:	02400044 	movi	r9,1
   452c0:	10c00015 	stw	r3,0(r2)
   452c4:	80805215 	stw	r2,328(r16)
   452c8:	10006215 	stw	zero,392(r2)
   452cc:	10006315 	stw	zero,396(r2)
   452d0:	0007883a 	mov	r3,zero
   452d4:	883fdf26 	beq	r17,zero,45254 <__alt_data_end+0xfffd4514>
   452d8:	18d1883a 	add	r8,r3,r3
   452dc:	4211883a 	add	r8,r8,r8
   452e0:	1211883a 	add	r8,r2,r8
   452e4:	41802215 	stw	r6,136(r8)
   452e8:	01000044 	movi	r4,1
   452ec:	11806217 	ldw	r6,392(r2)
   452f0:	20c8983a 	sll	r4,r4,r3
   452f4:	310cb03a 	or	r6,r6,r4
   452f8:	11806215 	stw	r6,392(r2)
   452fc:	41c04215 	stw	r7,264(r8)
   45300:	01800084 	movi	r6,2
   45304:	89bfd31e 	bne	r17,r6,45254 <__alt_data_end+0xfffd4514>
   45308:	11806317 	ldw	r6,396(r2)
   4530c:	3108b03a 	or	r4,r6,r4
   45310:	11006315 	stw	r4,396(r2)
   45314:	003fcf06 	br	45254 <__alt_data_end+0xfffd4514>
   45318:	80805304 	addi	r2,r16,332
   4531c:	80805215 	stw	r2,328(r16)
   45320:	003fc706 	br	45240 <__alt_data_end+0xfffd4500>
   45324:	00bfffc4 	movi	r2,-1
   45328:	003fd106 	br	45270 <__alt_data_end+0xfffd4530>

0004532c <__call_exitprocs>:
   4532c:	00800134 	movhi	r2,4
   45330:	109bde04 	addi	r2,r2,28536
   45334:	10800017 	ldw	r2,0(r2)
   45338:	defff404 	addi	sp,sp,-48
   4533c:	dd800815 	stw	r22,32(sp)
   45340:	d8800015 	stw	r2,0(sp)
   45344:	10805204 	addi	r2,r2,328
   45348:	dd000615 	stw	r20,24(sp)
   4534c:	dc800415 	stw	r18,16(sp)
   45350:	dfc00b15 	stw	ra,44(sp)
   45354:	df000a15 	stw	fp,40(sp)
   45358:	ddc00915 	stw	r23,36(sp)
   4535c:	dd400715 	stw	r21,28(sp)
   45360:	dcc00515 	stw	r19,20(sp)
   45364:	dc400315 	stw	r17,12(sp)
   45368:	dc000215 	stw	r16,8(sp)
   4536c:	2025883a 	mov	r18,r4
   45370:	2829883a 	mov	r20,r5
   45374:	d8800115 	stw	r2,4(sp)
   45378:	05bfffc4 	movi	r22,-1
   4537c:	d8800017 	ldw	r2,0(sp)
   45380:	14c05217 	ldw	r19,328(r2)
   45384:	98001d26 	beq	r19,zero,453fc <__call_exitprocs+0xd0>
   45388:	dd400117 	ldw	r21,4(sp)
   4538c:	98800117 	ldw	r2,4(r19)
   45390:	173fffc4 	addi	fp,r2,-1
   45394:	e0000d16 	blt	fp,zero,453cc <__call_exitprocs+0xa0>
   45398:	14000044 	addi	r16,r2,1
   4539c:	8421883a 	add	r16,r16,r16
   453a0:	8421883a 	add	r16,r16,r16
   453a4:	84402004 	addi	r17,r16,128
   453a8:	9c63883a 	add	r17,r19,r17
   453ac:	9c21883a 	add	r16,r19,r16
   453b0:	a0001e26 	beq	r20,zero,4542c <__call_exitprocs+0x100>
   453b4:	80804017 	ldw	r2,256(r16)
   453b8:	15001c26 	beq	r2,r20,4542c <__call_exitprocs+0x100>
   453bc:	e73fffc4 	addi	fp,fp,-1
   453c0:	843fff04 	addi	r16,r16,-4
   453c4:	8c7fff04 	addi	r17,r17,-4
   453c8:	e5bff91e 	bne	fp,r22,453b0 <__alt_data_end+0xfffd4670>
   453cc:	00800034 	movhi	r2,0
   453d0:	10800004 	addi	r2,r2,0
   453d4:	10000926 	beq	r2,zero,453fc <__call_exitprocs+0xd0>
   453d8:	98800117 	ldw	r2,4(r19)
   453dc:	1000311e 	bne	r2,zero,454a4 <__call_exitprocs+0x178>
   453e0:	98800017 	ldw	r2,0(r19)
   453e4:	10003426 	beq	r2,zero,454b8 <__call_exitprocs+0x18c>
   453e8:	9809883a 	mov	r4,r19
   453ec:	a8800015 	stw	r2,0(r21)
   453f0:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   453f4:	acc00017 	ldw	r19,0(r21)
   453f8:	983fe41e 	bne	r19,zero,4538c <__alt_data_end+0xfffd464c>
   453fc:	dfc00b17 	ldw	ra,44(sp)
   45400:	df000a17 	ldw	fp,40(sp)
   45404:	ddc00917 	ldw	r23,36(sp)
   45408:	dd800817 	ldw	r22,32(sp)
   4540c:	dd400717 	ldw	r21,28(sp)
   45410:	dd000617 	ldw	r20,24(sp)
   45414:	dcc00517 	ldw	r19,20(sp)
   45418:	dc800417 	ldw	r18,16(sp)
   4541c:	dc400317 	ldw	r17,12(sp)
   45420:	dc000217 	ldw	r16,8(sp)
   45424:	dec00c04 	addi	sp,sp,48
   45428:	f800283a 	ret
   4542c:	98800117 	ldw	r2,4(r19)
   45430:	80c00017 	ldw	r3,0(r16)
   45434:	10bfffc4 	addi	r2,r2,-1
   45438:	17001526 	beq	r2,fp,45490 <__call_exitprocs+0x164>
   4543c:	80000015 	stw	zero,0(r16)
   45440:	183fde26 	beq	r3,zero,453bc <__alt_data_end+0xfffd467c>
   45444:	00800044 	movi	r2,1
   45448:	1708983a 	sll	r4,r2,fp
   4544c:	98806217 	ldw	r2,392(r19)
   45450:	9dc00117 	ldw	r23,4(r19)
   45454:	2084703a 	and	r2,r4,r2
   45458:	1000061e 	bne	r2,zero,45474 <__call_exitprocs+0x148>
   4545c:	183ee83a 	callr	r3
   45460:	98800117 	ldw	r2,4(r19)
   45464:	15ffc51e 	bne	r2,r23,4537c <__alt_data_end+0xfffd463c>
   45468:	a8800017 	ldw	r2,0(r21)
   4546c:	14ffd326 	beq	r2,r19,453bc <__alt_data_end+0xfffd467c>
   45470:	003fc206 	br	4537c <__alt_data_end+0xfffd463c>
   45474:	98806317 	ldw	r2,396(r19)
   45478:	2084703a 	and	r2,r4,r2
   4547c:	1000061e 	bne	r2,zero,45498 <__call_exitprocs+0x16c>
   45480:	89400017 	ldw	r5,0(r17)
   45484:	9009883a 	mov	r4,r18
   45488:	183ee83a 	callr	r3
   4548c:	003ff406 	br	45460 <__alt_data_end+0xfffd4720>
   45490:	9f000115 	stw	fp,4(r19)
   45494:	003fea06 	br	45440 <__alt_data_end+0xfffd4700>
   45498:	89000017 	ldw	r4,0(r17)
   4549c:	183ee83a 	callr	r3
   454a0:	003fef06 	br	45460 <__alt_data_end+0xfffd4720>
   454a4:	98800017 	ldw	r2,0(r19)
   454a8:	982b883a 	mov	r21,r19
   454ac:	1027883a 	mov	r19,r2
   454b0:	983fb61e 	bne	r19,zero,4538c <__alt_data_end+0xfffd464c>
   454b4:	003fd106 	br	453fc <__alt_data_end+0xfffd46bc>
   454b8:	0005883a 	mov	r2,zero
   454bc:	003ffa06 	br	454a8 <__alt_data_end+0xfffd4768>

000454c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   454c0:	defffd04 	addi	sp,sp,-12
   454c4:	df000215 	stw	fp,8(sp)
   454c8:	df000204 	addi	fp,sp,8
   454cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   454d0:	0001883a 	nop
   454d4:	e0bfff17 	ldw	r2,-4(fp)
   454d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   454dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   454e0:	10000226 	beq	r2,zero,454ec <_exit+0x2c>
    ALT_SIM_FAIL();
   454e4:	002af070 	cmpltui	zero,zero,43969
   454e8:	00000106 	br	454f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   454ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   454f0:	003fff06 	br	454f0 <__alt_data_end+0xfffd47b0>
